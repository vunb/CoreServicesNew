using System;
using System.ComponentModel;
using System.Threading;
using System.Web;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Controller class for T_TEST_INFO_DELETED
    /// </summary>
    [DataObject]
    public class TTestInfoDeletedController
    {
        // Preload our schema..
        private TTestInfoDeleted thisSchemaLoad = new TTestInfoDeleted();
        private string userName = String.Empty;

        protected string UserName
        {
            get
            {
                if (userName.Length == 0)
                {
                    if (HttpContext.Current != null)
                    {
                        userName = HttpContext.Current.User.Identity.Name;
                    }
                    else
                    {
                        userName = Thread.CurrentPrincipal.Identity.Name;
                    }
                }
                return userName;
            }
        }

        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TTestInfoDeletedCollection FetchAll()
        {
            var coll = new TTestInfoDeletedCollection();
            var qry = new Query(TTestInfoDeleted.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TTestInfoDeletedCollection FetchByID(object Id)
        {
            TTestInfoDeletedCollection coll = new TTestInfoDeletedCollection().Where("Id", Id).Load();
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TTestInfoDeletedCollection FetchByQuery(Query qry)
        {
            var coll = new TTestInfoDeletedCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object Id)
        {
            return (TTestInfoDeleted.Delete(Id) == 1);
        }

        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object Id)
        {
            return (TTestInfoDeleted.Destroy(Id) == 1);
        }


        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public void Insert(decimal TestId, decimal? TestTypeId, string Barcode, string TestSeq, decimal? PatientId,
            DateTime? TestDate, DateTime? RequireDate, decimal? AssignId, decimal? DiagnosticianId, decimal? ReceiverId,
            short? TestStatus, string DiagResult, decimal? UpdateUser, DateTime? UpdateDate, int? HisAssignId,
            decimal? DeviceId, int? ParaId, bool? Printstatus)
        {
            var item = new TTestInfoDeleted();

            item.TestId = TestId;

            item.TestTypeId = TestTypeId;

            item.Barcode = Barcode;

            item.TestSeq = TestSeq;

            item.PatientId = PatientId;

            item.TestDate = TestDate;

            item.RequireDate = RequireDate;

            item.AssignId = AssignId;

            item.DiagnosticianId = DiagnosticianId;

            item.ReceiverId = ReceiverId;

            item.TestStatus = TestStatus;

            item.DiagResult = DiagResult;

            item.UpdateUser = UpdateUser;

            item.UpdateDate = UpdateDate;

            item.HisAssignId = HisAssignId;

            item.DeviceId = DeviceId;

            item.ParaId = ParaId;

            item.Printstatus = Printstatus;


            item.Save(UserName);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public void Update(decimal Id, decimal TestId, decimal? TestTypeId, string Barcode, string TestSeq,
            decimal? PatientId, DateTime? TestDate, DateTime? RequireDate, decimal? AssignId, decimal? DiagnosticianId,
            decimal? ReceiverId, short? TestStatus, string DiagResult, decimal? UpdateUser, DateTime? UpdateDate,
            int? HisAssignId, decimal? DeviceId, int? ParaId, bool? Printstatus)
        {
            var item = new TTestInfoDeleted();
            item.MarkOld();
            item.IsLoaded = true;

            item.Id = Id;

            item.TestId = TestId;

            item.TestTypeId = TestTypeId;

            item.Barcode = Barcode;

            item.TestSeq = TestSeq;

            item.PatientId = PatientId;

            item.TestDate = TestDate;

            item.RequireDate = RequireDate;

            item.AssignId = AssignId;

            item.DiagnosticianId = DiagnosticianId;

            item.ReceiverId = ReceiverId;

            item.TestStatus = TestStatus;

            item.DiagResult = DiagResult;

            item.UpdateUser = UpdateUser;

            item.UpdateDate = UpdateDate;

            item.HisAssignId = HisAssignId;

            item.DeviceId = DeviceId;

            item.ParaId = ParaId;

            item.Printstatus = Printstatus;

            item.Save(UserName);
        }
    }
}