using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Strongly-typed collection for the TTestTypeList class.
    /// </summary>
    [Serializable]
    public class TTestTypeListCollection : ActiveList<TTestTypeList, TTestTypeListCollection>
    {
        /// <summary>
        ///     Filters an existing collection based on the set criteria. This is an in-memory filter
        ///     Thanks to developingchris for this!
        /// </summary>
        /// <returns>TTestTypeListCollection</returns>
        public TTestTypeListCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                TTestTypeList o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    ///     This is an ActiveRecord class which wraps the T_TEST_TYPE_LIST table.
    /// </summary>
    [Serializable]
    public class TTestTypeList : ActiveRecord<TTestTypeList>, IActiveRecord
    {
        #region .ctors and Default Settings

        public TTestTypeList()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public TTestTypeList(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public TTestTypeList(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public TTestTypeList(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("T_TEST_TYPE_LIST", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarTestTypeId = new TableSchema.TableColumn(schema);
                colvarTestTypeId.ColumnName = "TestType_ID";
                colvarTestTypeId.DataType = DbType.Int32;
                colvarTestTypeId.MaxLength = 0;
                colvarTestTypeId.AutoIncrement = true;
                colvarTestTypeId.IsNullable = false;
                colvarTestTypeId.IsPrimaryKey = true;
                colvarTestTypeId.IsForeignKey = false;
                colvarTestTypeId.IsReadOnly = false;
                colvarTestTypeId.DefaultSetting = @"";
                colvarTestTypeId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTestTypeId);

                var colvarTestTypeName = new TableSchema.TableColumn(schema);
                colvarTestTypeName.ColumnName = "TestType_Name";
                colvarTestTypeName.DataType = DbType.String;
                colvarTestTypeName.MaxLength = 200;
                colvarTestTypeName.AutoIncrement = false;
                colvarTestTypeName.IsNullable = true;
                colvarTestTypeName.IsPrimaryKey = false;
                colvarTestTypeName.IsForeignKey = false;
                colvarTestTypeName.IsReadOnly = false;
                colvarTestTypeName.DefaultSetting = @"";
                colvarTestTypeName.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTestTypeName);

                var colvarNote = new TableSchema.TableColumn(schema);
                colvarNote.ColumnName = "Note";
                colvarNote.DataType = DbType.String;
                colvarNote.MaxLength = 200;
                colvarNote.AutoIncrement = false;
                colvarNote.IsNullable = true;
                colvarNote.IsPrimaryKey = false;
                colvarNote.IsForeignKey = false;
                colvarNote.IsReadOnly = false;
                colvarNote.DefaultSetting = @"";
                colvarNote.ForeignKeyTableName = "";
                schema.Columns.Add(colvarNote);

                var colvarIntOrder = new TableSchema.TableColumn(schema);
                colvarIntOrder.ColumnName = "intOrder";
                colvarIntOrder.DataType = DbType.Int16;
                colvarIntOrder.MaxLength = 0;
                colvarIntOrder.AutoIncrement = false;
                colvarIntOrder.IsNullable = true;
                colvarIntOrder.IsPrimaryKey = false;
                colvarIntOrder.IsForeignKey = false;
                colvarIntOrder.IsReadOnly = false;
                colvarIntOrder.DefaultSetting = @"";
                colvarIntOrder.ForeignKeyTableName = "";
                schema.Columns.Add(colvarIntOrder);

                var colvarPrintDetail = new TableSchema.TableColumn(schema);
                colvarPrintDetail.ColumnName = "printDetail";
                colvarPrintDetail.DataType = DbType.Int16;
                colvarPrintDetail.MaxLength = 0;
                colvarPrintDetail.AutoIncrement = false;
                colvarPrintDetail.IsNullable = true;
                colvarPrintDetail.IsPrimaryKey = false;
                colvarPrintDetail.IsForeignKey = false;
                colvarPrintDetail.IsReadOnly = false;
                colvarPrintDetail.DefaultSetting = @"";
                colvarPrintDetail.ForeignKeyTableName = "";
                schema.Columns.Add(colvarPrintDetail);

                var colvarPrice = new TableSchema.TableColumn(schema);
                colvarPrice.ColumnName = "Price";
                colvarPrice.DataType = DbType.Currency;
                colvarPrice.MaxLength = 0;
                colvarPrice.AutoIncrement = false;
                colvarPrice.IsNullable = true;
                colvarPrice.IsPrimaryKey = false;
                colvarPrice.IsForeignKey = false;
                colvarPrice.IsReadOnly = false;
                colvarPrice.DefaultSetting = @"";
                colvarPrice.ForeignKeyTableName = "";
                schema.Columns.Add(colvarPrice);

                var colvarAbbreviation = new TableSchema.TableColumn(schema);
                colvarAbbreviation.ColumnName = "Abbreviation";
                colvarAbbreviation.DataType = DbType.String;
                colvarAbbreviation.MaxLength = 10;
                colvarAbbreviation.AutoIncrement = false;
                colvarAbbreviation.IsNullable = true;
                colvarAbbreviation.IsPrimaryKey = false;
                colvarAbbreviation.IsForeignKey = false;
                colvarAbbreviation.IsReadOnly = false;
                colvarAbbreviation.DefaultSetting = @"";
                colvarAbbreviation.ForeignKeyTableName = "";
                schema.Columns.Add(colvarAbbreviation);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("T_TEST_TYPE_LIST", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("TestTypeId")]
        [Bindable(true)]
        public int TestTypeId
        {
            get { return GetColumnValue<int>(Columns.TestTypeId); }
            set { SetColumnValue(Columns.TestTypeId, value); }
        }

        [XmlAttribute("TestTypeName")]
        [Bindable(true)]
        public string TestTypeName
        {
            get { return GetColumnValue<string>(Columns.TestTypeName); }
            set { SetColumnValue(Columns.TestTypeName, value); }
        }

        [XmlAttribute("Note")]
        [Bindable(true)]
        public string Note
        {
            get { return GetColumnValue<string>(Columns.Note); }
            set { SetColumnValue(Columns.Note, value); }
        }

        [XmlAttribute("IntOrder")]
        [Bindable(true)]
        public short? IntOrder
        {
            get { return GetColumnValue<short?>(Columns.IntOrder); }
            set { SetColumnValue(Columns.IntOrder, value); }
        }

        [XmlAttribute("PrintDetail")]
        [Bindable(true)]
        public short? PrintDetail
        {
            get { return GetColumnValue<short?>(Columns.PrintDetail); }
            set { SetColumnValue(Columns.PrintDetail, value); }
        }

        [XmlAttribute("Price")]
        [Bindable(true)]
        public decimal? Price
        {
            get { return GetColumnValue<decimal?>(Columns.Price); }
            set { SetColumnValue(Columns.Price, value); }
        }

        [XmlAttribute("Abbreviation")]
        [Bindable(true)]
        public string Abbreviation
        {
            get { return GetColumnValue<string>(Columns.Abbreviation); }
            set { SetColumnValue(Columns.Abbreviation, value); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(string varTestTypeName, string varNote, short? varIntOrder, short? varPrintDetail,
            decimal? varPrice, string varAbbreviation)
        {
            var item = new TTestTypeList();

            item.TestTypeName = varTestTypeName;

            item.Note = varNote;

            item.IntOrder = varIntOrder;

            item.PrintDetail = varPrintDetail;

            item.Price = varPrice;

            item.Abbreviation = varAbbreviation;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(int varTestTypeId, string varTestTypeName, string varNote, short? varIntOrder,
            short? varPrintDetail, decimal? varPrice, string varAbbreviation)
        {
            var item = new TTestTypeList();

            item.TestTypeId = varTestTypeId;

            item.TestTypeName = varTestTypeName;

            item.Note = varNote;

            item.IntOrder = varIntOrder;

            item.PrintDetail = varPrintDetail;

            item.Price = varPrice;

            item.Abbreviation = varAbbreviation;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn TestTypeIdColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn TestTypeNameColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn NoteColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn IntOrderColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn PrintDetailColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn PriceColumn
        {
            get { return Schema.Columns[5]; }
        }


        public static TableSchema.TableColumn AbbreviationColumn
        {
            get { return Schema.Columns[6]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string TestTypeId = @"TestType_ID";
            public static string TestTypeName = @"TestType_Name";
            public static string Note = @"Note";
            public static string IntOrder = @"intOrder";
            public static string PrintDetail = @"printDetail";
            public static string Price = @"Price";
            public static string Abbreviation = @"Abbreviation";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no foreign key tables defined (0)


        //no ManyToMany tables defined (0)
    }
}