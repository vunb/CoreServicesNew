using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Vietbait.Lablink.Model
{
	/// <summary>
	/// Strongly-typed collection for the LFormControl class.
	/// </summary>
    [Serializable]
	public partial class LFormControlCollection : ActiveList<LFormControl, LFormControlCollection>
	{	   
		public LFormControlCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LFormControlCollection</returns>
		public LFormControlCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LFormControl o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the L_Form_Control table.
	/// </summary>
	[Serializable]
	public partial class LFormControl : ActiveRecord<LFormControl>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LFormControl()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LFormControl(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LFormControl(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LFormControl(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("L_Form_Control", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarControlId = new TableSchema.TableColumn(schema);
				colvarControlId.ColumnName = "Control_ID";
				colvarControlId.DataType = DbType.Int32;
				colvarControlId.MaxLength = 0;
				colvarControlId.AutoIncrement = true;
				colvarControlId.IsNullable = false;
				colvarControlId.IsPrimaryKey = true;
				colvarControlId.IsForeignKey = false;
				colvarControlId.IsReadOnly = false;
				colvarControlId.DefaultSetting = @"";
				colvarControlId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarControlId);
				
				TableSchema.TableColumn colvarFormName = new TableSchema.TableColumn(schema);
				colvarFormName.ColumnName = "Form_Name";
				colvarFormName.DataType = DbType.String;
				colvarFormName.MaxLength = 50;
				colvarFormName.AutoIncrement = false;
				colvarFormName.IsNullable = true;
				colvarFormName.IsPrimaryKey = false;
				colvarFormName.IsForeignKey = false;
				colvarFormName.IsReadOnly = false;
				colvarFormName.DefaultSetting = @"";
				colvarFormName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFormName);
				
				TableSchema.TableColumn colvarControlName = new TableSchema.TableColumn(schema);
				colvarControlName.ColumnName = "Control_Name";
				colvarControlName.DataType = DbType.String;
				colvarControlName.MaxLength = 50;
				colvarControlName.AutoIncrement = false;
				colvarControlName.IsNullable = true;
				colvarControlName.IsPrimaryKey = false;
				colvarControlName.IsForeignKey = false;
				colvarControlName.IsReadOnly = false;
				colvarControlName.DefaultSetting = @"";
				colvarControlName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarControlName);
				
				TableSchema.TableColumn colvarControlTypeName = new TableSchema.TableColumn(schema);
				colvarControlTypeName.ColumnName = "Control_Type_Name";
				colvarControlTypeName.DataType = DbType.String;
				colvarControlTypeName.MaxLength = 50;
				colvarControlTypeName.AutoIncrement = false;
				colvarControlTypeName.IsNullable = true;
				colvarControlTypeName.IsPrimaryKey = false;
				colvarControlTypeName.IsForeignKey = false;
				colvarControlTypeName.IsReadOnly = false;
				colvarControlTypeName.DefaultSetting = @"";
				colvarControlTypeName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarControlTypeName);
				
				TableSchema.TableColumn colvarPropertyName = new TableSchema.TableColumn(schema);
				colvarPropertyName.ColumnName = "Property_Name";
				colvarPropertyName.DataType = DbType.String;
				colvarPropertyName.MaxLength = 50;
				colvarPropertyName.AutoIncrement = false;
				colvarPropertyName.IsNullable = true;
				colvarPropertyName.IsPrimaryKey = false;
				colvarPropertyName.IsForeignKey = false;
				colvarPropertyName.IsReadOnly = false;
				colvarPropertyName.DefaultSetting = @"";
				colvarPropertyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPropertyName);
				
				TableSchema.TableColumn colvarValueX = new TableSchema.TableColumn(schema);
				colvarValueX.ColumnName = "Value";
				colvarValueX.DataType = DbType.String;
				colvarValueX.MaxLength = 50;
				colvarValueX.AutoIncrement = false;
				colvarValueX.IsNullable = true;
				colvarValueX.IsPrimaryKey = false;
				colvarValueX.IsForeignKey = false;
				colvarValueX.IsReadOnly = false;
				colvarValueX.DefaultSetting = @"";
				colvarValueX.ForeignKeyTableName = "";
				schema.Columns.Add(colvarValueX);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("L_Form_Control",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("ControlId")]
		[Bindable(true)]
		public int ControlId 
		{
			get { return GetColumnValue<int>(Columns.ControlId); }
			set { SetColumnValue(Columns.ControlId, value); }
		}
		  
		[XmlAttribute("FormName")]
		[Bindable(true)]
		public string FormName 
		{
			get { return GetColumnValue<string>(Columns.FormName); }
			set { SetColumnValue(Columns.FormName, value); }
		}
		  
		[XmlAttribute("ControlName")]
		[Bindable(true)]
		public string ControlName 
		{
			get { return GetColumnValue<string>(Columns.ControlName); }
			set { SetColumnValue(Columns.ControlName, value); }
		}
		  
		[XmlAttribute("ControlTypeName")]
		[Bindable(true)]
		public string ControlTypeName 
		{
			get { return GetColumnValue<string>(Columns.ControlTypeName); }
			set { SetColumnValue(Columns.ControlTypeName, value); }
		}
		  
		[XmlAttribute("PropertyName")]
		[Bindable(true)]
		public string PropertyName 
		{
			get { return GetColumnValue<string>(Columns.PropertyName); }
			set { SetColumnValue(Columns.PropertyName, value); }
		}
		  
		[XmlAttribute("ValueX")]
		[Bindable(true)]
		public string ValueX 
		{
			get { return GetColumnValue<string>(Columns.ValueX); }
			set { SetColumnValue(Columns.ValueX, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varFormName,string varControlName,string varControlTypeName,string varPropertyName,string varValueX)
		{
			LFormControl item = new LFormControl();
			
			item.FormName = varFormName;
			
			item.ControlName = varControlName;
			
			item.ControlTypeName = varControlTypeName;
			
			item.PropertyName = varPropertyName;
			
			item.ValueX = varValueX;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varControlId,string varFormName,string varControlName,string varControlTypeName,string varPropertyName,string varValueX)
		{
			LFormControl item = new LFormControl();
			
				item.ControlId = varControlId;
			
				item.FormName = varFormName;
			
				item.ControlName = varControlName;
			
				item.ControlTypeName = varControlTypeName;
			
				item.PropertyName = varPropertyName;
			
				item.ValueX = varValueX;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn ControlIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn FormNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ControlNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ControlTypeNameColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn PropertyNameColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ValueXColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string ControlId = @"Control_ID";
			 public static string FormName = @"Form_Name";
			 public static string ControlName = @"Control_Name";
			 public static string ControlTypeName = @"Control_Type_Name";
			 public static string PropertyName = @"Property_Name";
			 public static string ValueX = @"Value";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
