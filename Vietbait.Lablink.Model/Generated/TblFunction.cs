using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Strongly-typed collection for the TblFunction class.
    /// </summary>
    [Serializable]
    public class TblFunctionCollection : ActiveList<TblFunction, TblFunctionCollection>
    {
        /// <summary>
        ///     Filters an existing collection based on the set criteria. This is an in-memory filter
        ///     Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblFunctionCollection</returns>
        public TblFunctionCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                TblFunction o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    ///     This is an ActiveRecord class which wraps the tbl_Functions table.
    /// </summary>
    [Serializable]
    public class TblFunction : ActiveRecord<TblFunction>, IActiveRecord
    {
        #region .ctors and Default Settings

        public TblFunction()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public TblFunction(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public TblFunction(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public TblFunction(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("tbl_Functions", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarPkIid = new TableSchema.TableColumn(schema);
                colvarPkIid.ColumnName = "PK_iID";
                colvarPkIid.DataType = DbType.Int64;
                colvarPkIid.MaxLength = 0;
                colvarPkIid.AutoIncrement = true;
                colvarPkIid.IsNullable = false;
                colvarPkIid.IsPrimaryKey = true;
                colvarPkIid.IsForeignKey = false;
                colvarPkIid.IsReadOnly = false;
                colvarPkIid.DefaultSetting = @"";
                colvarPkIid.ForeignKeyTableName = "";
                schema.Columns.Add(colvarPkIid);

                var colvarFpSBranchID = new TableSchema.TableColumn(schema);
                colvarFpSBranchID.ColumnName = "FP_sBranchID";
                colvarFpSBranchID.DataType = DbType.String;
                colvarFpSBranchID.MaxLength = 10;
                colvarFpSBranchID.AutoIncrement = false;
                colvarFpSBranchID.IsNullable = false;
                colvarFpSBranchID.IsPrimaryKey = true;
                colvarFpSBranchID.IsForeignKey = true;
                colvarFpSBranchID.IsReadOnly = false;
                colvarFpSBranchID.DefaultSetting = @"";

                colvarFpSBranchID.ForeignKeyTableName = "tbl_ManagementUnit";
                schema.Columns.Add(colvarFpSBranchID);

                var colvarSFunctionName = new TableSchema.TableColumn(schema);
                colvarSFunctionName.ColumnName = "sFunctionName";
                colvarSFunctionName.DataType = DbType.String;
                colvarSFunctionName.MaxLength = 150;
                colvarSFunctionName.AutoIncrement = false;
                colvarSFunctionName.IsNullable = false;
                colvarSFunctionName.IsPrimaryKey = false;
                colvarSFunctionName.IsForeignKey = false;
                colvarSFunctionName.IsReadOnly = false;
                colvarSFunctionName.DefaultSetting = @"";
                colvarSFunctionName.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSFunctionName);

                var colvarSDLLname = new TableSchema.TableColumn(schema);
                colvarSDLLname.ColumnName = "sDLLname";
                colvarSDLLname.DataType = DbType.String;
                colvarSDLLname.MaxLength = 100;
                colvarSDLLname.AutoIncrement = false;
                colvarSDLLname.IsNullable = false;
                colvarSDLLname.IsPrimaryKey = false;
                colvarSDLLname.IsForeignKey = false;
                colvarSDLLname.IsReadOnly = false;
                colvarSDLLname.DefaultSetting = @"";
                colvarSDLLname.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSDLLname);

                var colvarSFormName = new TableSchema.TableColumn(schema);
                colvarSFormName.ColumnName = "sFormName";
                colvarSFormName.DataType = DbType.String;
                colvarSFormName.MaxLength = 100;
                colvarSFormName.AutoIncrement = false;
                colvarSFormName.IsNullable = false;
                colvarSFormName.IsPrimaryKey = false;
                colvarSFormName.IsForeignKey = false;
                colvarSFormName.IsReadOnly = false;
                colvarSFormName.DefaultSetting = @"";
                colvarSFormName.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSFormName);

                var colvarSAssemblyName = new TableSchema.TableColumn(schema);
                colvarSAssemblyName.ColumnName = "sAssemblyName";
                colvarSAssemblyName.DataType = DbType.String;
                colvarSAssemblyName.MaxLength = 100;
                colvarSAssemblyName.AutoIncrement = false;
                colvarSAssemblyName.IsNullable = true;
                colvarSAssemblyName.IsPrimaryKey = false;
                colvarSAssemblyName.IsForeignKey = false;
                colvarSAssemblyName.IsReadOnly = false;
                colvarSAssemblyName.DefaultSetting = @"";
                colvarSAssemblyName.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSAssemblyName);

                var colvarBEnable = new TableSchema.TableColumn(schema);
                colvarBEnable.ColumnName = "bEnable";
                colvarBEnable.DataType = DbType.Boolean;
                colvarBEnable.MaxLength = 0;
                colvarBEnable.AutoIncrement = false;
                colvarBEnable.IsNullable = true;
                colvarBEnable.IsPrimaryKey = false;
                colvarBEnable.IsForeignKey = false;
                colvarBEnable.IsReadOnly = false;
                colvarBEnable.DefaultSetting = @"";
                colvarBEnable.ForeignKeyTableName = "";
                schema.Columns.Add(colvarBEnable);

                var colvarSParameterList = new TableSchema.TableColumn(schema);
                colvarSParameterList.ColumnName = "sParameterList";
                colvarSParameterList.DataType = DbType.String;
                colvarSParameterList.MaxLength = 500;
                colvarSParameterList.AutoIncrement = false;
                colvarSParameterList.IsNullable = true;
                colvarSParameterList.IsPrimaryKey = false;
                colvarSParameterList.IsForeignKey = false;
                colvarSParameterList.IsReadOnly = false;
                colvarSParameterList.DefaultSetting = @"";
                colvarSParameterList.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSParameterList);

                var colvarSDesc = new TableSchema.TableColumn(schema);
                colvarSDesc.ColumnName = "sDesc";
                colvarSDesc.DataType = DbType.String;
                colvarSDesc.MaxLength = 255;
                colvarSDesc.AutoIncrement = false;
                colvarSDesc.IsNullable = true;
                colvarSDesc.IsPrimaryKey = false;
                colvarSDesc.IsForeignKey = false;
                colvarSDesc.IsReadOnly = false;
                colvarSDesc.DefaultSetting = @"";
                colvarSDesc.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSDesc);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("tbl_Functions", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("PkIid")]
        [Bindable(true)]
        public long PkIid
        {
            get { return GetColumnValue<long>(Columns.PkIid); }
            set { SetColumnValue(Columns.PkIid, value); }
        }

        [XmlAttribute("FpSBranchID")]
        [Bindable(true)]
        public string FpSBranchID
        {
            get { return GetColumnValue<string>(Columns.FpSBranchID); }
            set { SetColumnValue(Columns.FpSBranchID, value); }
        }

        [XmlAttribute("SFunctionName")]
        [Bindable(true)]
        public string SFunctionName
        {
            get { return GetColumnValue<string>(Columns.SFunctionName); }
            set { SetColumnValue(Columns.SFunctionName, value); }
        }

        [XmlAttribute("SDLLname")]
        [Bindable(true)]
        public string SDLLname
        {
            get { return GetColumnValue<string>(Columns.SDLLname); }
            set { SetColumnValue(Columns.SDLLname, value); }
        }

        [XmlAttribute("SFormName")]
        [Bindable(true)]
        public string SFormName
        {
            get { return GetColumnValue<string>(Columns.SFormName); }
            set { SetColumnValue(Columns.SFormName, value); }
        }

        [XmlAttribute("SAssemblyName")]
        [Bindable(true)]
        public string SAssemblyName
        {
            get { return GetColumnValue<string>(Columns.SAssemblyName); }
            set { SetColumnValue(Columns.SAssemblyName, value); }
        }

        [XmlAttribute("BEnable")]
        [Bindable(true)]
        public bool? BEnable
        {
            get { return GetColumnValue<bool?>(Columns.BEnable); }
            set { SetColumnValue(Columns.BEnable, value); }
        }

        [XmlAttribute("SParameterList")]
        [Bindable(true)]
        public string SParameterList
        {
            get { return GetColumnValue<string>(Columns.SParameterList); }
            set { SetColumnValue(Columns.SParameterList, value); }
        }

        [XmlAttribute("SDesc")]
        [Bindable(true)]
        public string SDesc
        {
            get { return GetColumnValue<string>(Columns.SDesc); }
            set { SetColumnValue(Columns.SDesc, value); }
        }

        #endregion

        #region ForeignKey Properties

        /// <summary>
        ///     Returns a TblManagementUnit ActiveRecord object related to this TblFunction
        /// </summary>
        public TblManagementUnit TblManagementUnit
        {
            get { return TblManagementUnit.FetchByID(FpSBranchID); }
            set { SetColumnValue("FP_sBranchID", value.PkSBranchID); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(string varFpSBranchID, string varSFunctionName, string varSDLLname,
            string varSFormName, string varSAssemblyName, bool? varBEnable, string varSParameterList, string varSDesc)
        {
            var item = new TblFunction();

            item.FpSBranchID = varFpSBranchID;

            item.SFunctionName = varSFunctionName;

            item.SDLLname = varSDLLname;

            item.SFormName = varSFormName;

            item.SAssemblyName = varSAssemblyName;

            item.BEnable = varBEnable;

            item.SParameterList = varSParameterList;

            item.SDesc = varSDesc;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(long varPkIid, string varFpSBranchID, string varSFunctionName, string varSDLLname,
            string varSFormName, string varSAssemblyName, bool? varBEnable, string varSParameterList, string varSDesc)
        {
            var item = new TblFunction();

            item.PkIid = varPkIid;

            item.FpSBranchID = varFpSBranchID;

            item.SFunctionName = varSFunctionName;

            item.SDLLname = varSDLLname;

            item.SFormName = varSFormName;

            item.SAssemblyName = varSAssemblyName;

            item.BEnable = varBEnable;

            item.SParameterList = varSParameterList;

            item.SDesc = varSDesc;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn PkIidColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn FpSBranchIDColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn SFunctionNameColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn SDLLnameColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn SFormNameColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn SAssemblyNameColumn
        {
            get { return Schema.Columns[5]; }
        }


        public static TableSchema.TableColumn BEnableColumn
        {
            get { return Schema.Columns[6]; }
        }


        public static TableSchema.TableColumn SParameterListColumn
        {
            get { return Schema.Columns[7]; }
        }


        public static TableSchema.TableColumn SDescColumn
        {
            get { return Schema.Columns[8]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string PkIid = @"PK_iID";
            public static string FpSBranchID = @"FP_sBranchID";
            public static string SFunctionName = @"sFunctionName";
            public static string SDLLname = @"sDLLname";
            public static string SFormName = @"sFormName";
            public static string SAssemblyName = @"sAssemblyName";
            public static string BEnable = @"bEnable";
            public static string SParameterList = @"sParameterList";
            public static string SDesc = @"sDesc";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no ManyToMany tables defined (0)
    }
}