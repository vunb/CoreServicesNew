using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Strongly-typed collection for the TEvolisRerun class.
    /// </summary>
    [Serializable]
    public class TEvolisRerunCollection : ActiveList<TEvolisRerun, TEvolisRerunCollection>
    {
        /// <summary>
        ///     Filters an existing collection based on the set criteria. This is an in-memory filter
        ///     Thanks to developingchris for this!
        /// </summary>
        /// <returns>TEvolisRerunCollection</returns>
        public TEvolisRerunCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                TEvolisRerun o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    ///     This is an ActiveRecord class which wraps the T_EvolisRerun table.
    /// </summary>
    [Serializable]
    public class TEvolisRerun : ActiveRecord<TEvolisRerun>, IActiveRecord
    {
        #region .ctors and Default Settings

        public TEvolisRerun()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public TEvolisRerun(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public TEvolisRerun(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public TEvolisRerun(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("T_EvolisRerun", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarId = new TableSchema.TableColumn(schema);
                colvarId.ColumnName = "ID";
                colvarId.DataType = DbType.Int64;
                colvarId.MaxLength = 0;
                colvarId.AutoIncrement = true;
                colvarId.IsNullable = false;
                colvarId.IsPrimaryKey = true;
                colvarId.IsForeignKey = false;
                colvarId.IsReadOnly = false;
                colvarId.DefaultSetting = @"";
                colvarId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarId);

                var colvarDetailId = new TableSchema.TableColumn(schema);
                colvarDetailId.ColumnName = "DetailId";
                colvarDetailId.DataType = DbType.Int64;
                colvarDetailId.MaxLength = 0;
                colvarDetailId.AutoIncrement = false;
                colvarDetailId.IsNullable = false;
                colvarDetailId.IsPrimaryKey = false;
                colvarDetailId.IsForeignKey = false;
                colvarDetailId.IsReadOnly = false;
                colvarDetailId.DefaultSetting = @"";
                colvarDetailId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDetailId);

                var colvarResultId = new TableSchema.TableColumn(schema);
                colvarResultId.ColumnName = "ResultId";
                colvarResultId.DataType = DbType.Int64;
                colvarResultId.MaxLength = 0;
                colvarResultId.AutoIncrement = false;
                colvarResultId.IsNullable = false;
                colvarResultId.IsPrimaryKey = false;
                colvarResultId.IsForeignKey = false;
                colvarResultId.IsReadOnly = false;
                colvarResultId.DefaultSetting = @"";
                colvarResultId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarResultId);

                var colvarPatientId = new TableSchema.TableColumn(schema);
                colvarPatientId.ColumnName = "PatientId";
                colvarPatientId.DataType = DbType.String;
                colvarPatientId.MaxLength = 50;
                colvarPatientId.AutoIncrement = false;
                colvarPatientId.IsNullable = false;
                colvarPatientId.IsPrimaryKey = false;
                colvarPatientId.IsForeignKey = false;
                colvarPatientId.IsReadOnly = false;
                colvarPatientId.DefaultSetting = @"";
                colvarPatientId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarPatientId);

                var colvarBarcode = new TableSchema.TableColumn(schema);
                colvarBarcode.ColumnName = "Barcode";
                colvarBarcode.DataType = DbType.String;
                colvarBarcode.MaxLength = 50;
                colvarBarcode.AutoIncrement = false;
                colvarBarcode.IsNullable = false;
                colvarBarcode.IsPrimaryKey = false;
                colvarBarcode.IsForeignKey = false;
                colvarBarcode.IsReadOnly = false;
                colvarBarcode.DefaultSetting = @"";
                colvarBarcode.ForeignKeyTableName = "";
                schema.Columns.Add(colvarBarcode);

                var colvarTestName = new TableSchema.TableColumn(schema);
                colvarTestName.ColumnName = "TestName";
                colvarTestName.DataType = DbType.String;
                colvarTestName.MaxLength = 50;
                colvarTestName.AutoIncrement = false;
                colvarTestName.IsNullable = false;
                colvarTestName.IsPrimaryKey = false;
                colvarTestName.IsForeignKey = false;
                colvarTestName.IsReadOnly = false;
                colvarTestName.DefaultSetting = @"";
                colvarTestName.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTestName);

                var colvarReasonId = new TableSchema.TableColumn(schema);
                colvarReasonId.ColumnName = "ReasonId";
                colvarReasonId.DataType = DbType.Int32;
                colvarReasonId.MaxLength = 0;
                colvarReasonId.AutoIncrement = false;
                colvarReasonId.IsNullable = false;
                colvarReasonId.IsPrimaryKey = false;
                colvarReasonId.IsForeignKey = false;
                colvarReasonId.IsReadOnly = false;
                colvarReasonId.DefaultSetting = @"";
                colvarReasonId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarReasonId);

                var colvarBarcodeRerun = new TableSchema.TableColumn(schema);
                colvarBarcodeRerun.ColumnName = "BarcodeRerun";
                colvarBarcodeRerun.DataType = DbType.String;
                colvarBarcodeRerun.MaxLength = 50;
                colvarBarcodeRerun.AutoIncrement = false;
                colvarBarcodeRerun.IsNullable = false;
                colvarBarcodeRerun.IsPrimaryKey = false;
                colvarBarcodeRerun.IsForeignKey = false;
                colvarBarcodeRerun.IsReadOnly = false;
                colvarBarcodeRerun.DefaultSetting = @"";
                colvarBarcodeRerun.ForeignKeyTableName = "";
                schema.Columns.Add(colvarBarcodeRerun);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("T_EvolisRerun", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("Id")]
        [Bindable(true)]
        public long Id
        {
            get { return GetColumnValue<long>(Columns.Id); }
            set { SetColumnValue(Columns.Id, value); }
        }

        [XmlAttribute("DetailId")]
        [Bindable(true)]
        public long DetailId
        {
            get { return GetColumnValue<long>(Columns.DetailId); }
            set { SetColumnValue(Columns.DetailId, value); }
        }

        [XmlAttribute("ResultId")]
        [Bindable(true)]
        public long ResultId
        {
            get { return GetColumnValue<long>(Columns.ResultId); }
            set { SetColumnValue(Columns.ResultId, value); }
        }

        [XmlAttribute("PatientId")]
        [Bindable(true)]
        public string PatientId
        {
            get { return GetColumnValue<string>(Columns.PatientId); }
            set { SetColumnValue(Columns.PatientId, value); }
        }

        [XmlAttribute("Barcode")]
        [Bindable(true)]
        public string Barcode
        {
            get { return GetColumnValue<string>(Columns.Barcode); }
            set { SetColumnValue(Columns.Barcode, value); }
        }

        [XmlAttribute("TestName")]
        [Bindable(true)]
        public string TestName
        {
            get { return GetColumnValue<string>(Columns.TestName); }
            set { SetColumnValue(Columns.TestName, value); }
        }

        [XmlAttribute("ReasonId")]
        [Bindable(true)]
        public int ReasonId
        {
            get { return GetColumnValue<int>(Columns.ReasonId); }
            set { SetColumnValue(Columns.ReasonId, value); }
        }

        [XmlAttribute("BarcodeRerun")]
        [Bindable(true)]
        public string BarcodeRerun
        {
            get { return GetColumnValue<string>(Columns.BarcodeRerun); }
            set { SetColumnValue(Columns.BarcodeRerun, value); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(long varDetailId, long varResultId, string varPatientId, string varBarcode,
            string varTestName, int varReasonId, string varBarcodeRerun)
        {
            var item = new TEvolisRerun();

            item.DetailId = varDetailId;

            item.ResultId = varResultId;

            item.PatientId = varPatientId;

            item.Barcode = varBarcode;

            item.TestName = varTestName;

            item.ReasonId = varReasonId;

            item.BarcodeRerun = varBarcodeRerun;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(long varId, long varDetailId, long varResultId, string varPatientId, string varBarcode,
            string varTestName, int varReasonId, string varBarcodeRerun)
        {
            var item = new TEvolisRerun();

            item.Id = varId;

            item.DetailId = varDetailId;

            item.ResultId = varResultId;

            item.PatientId = varPatientId;

            item.Barcode = varBarcode;

            item.TestName = varTestName;

            item.ReasonId = varReasonId;

            item.BarcodeRerun = varBarcodeRerun;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn DetailIdColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn ResultIdColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn PatientIdColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn BarcodeColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn TestNameColumn
        {
            get { return Schema.Columns[5]; }
        }


        public static TableSchema.TableColumn ReasonIdColumn
        {
            get { return Schema.Columns[6]; }
        }


        public static TableSchema.TableColumn BarcodeRerunColumn
        {
            get { return Schema.Columns[7]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string Id = @"ID";
            public static string DetailId = @"DetailId";
            public static string ResultId = @"ResultId";
            public static string PatientId = @"PatientId";
            public static string Barcode = @"Barcode";
            public static string TestName = @"TestName";
            public static string ReasonId = @"ReasonId";
            public static string BarcodeRerun = @"BarcodeRerun";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no foreign key tables defined (0)


        //no ManyToMany tables defined (0)
    }
}