using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Vietbait.Lablink.Model
{
	/// <summary>
	/// Strongly-typed collection for the TblLot class.
	/// </summary>
    [Serializable]
	public partial class TblLotCollection : ActiveList<TblLot, TblLotCollection>
	{	   
		public TblLotCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblLotCollection</returns>
		public TblLotCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblLot o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the tbl_Lot table.
	/// </summary>
	[Serializable]
	public partial class TblLot : ActiveRecord<TblLot>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblLot()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblLot(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblLot(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblLot(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("tbl_Lot", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarOrderFrom = new TableSchema.TableColumn(schema);
				colvarOrderFrom.ColumnName = "OrderFrom";
				colvarOrderFrom.DataType = DbType.Int32;
				colvarOrderFrom.MaxLength = 0;
				colvarOrderFrom.AutoIncrement = false;
				colvarOrderFrom.IsNullable = false;
				colvarOrderFrom.IsPrimaryKey = false;
				colvarOrderFrom.IsForeignKey = false;
				colvarOrderFrom.IsReadOnly = false;
				colvarOrderFrom.DefaultSetting = @"";
				colvarOrderFrom.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderFrom);
				
				TableSchema.TableColumn colvarOrderTo = new TableSchema.TableColumn(schema);
				colvarOrderTo.ColumnName = "OrderTo";
				colvarOrderTo.DataType = DbType.Int32;
				colvarOrderTo.MaxLength = 0;
				colvarOrderTo.AutoIncrement = false;
				colvarOrderTo.IsNullable = false;
				colvarOrderTo.IsPrimaryKey = false;
				colvarOrderTo.IsForeignKey = false;
				colvarOrderTo.IsReadOnly = false;
				colvarOrderTo.DefaultSetting = @"";
				colvarOrderTo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrderTo);
				
				TableSchema.TableColumn colvarDateInput = new TableSchema.TableColumn(schema);
				colvarDateInput.ColumnName = "DateInput";
				colvarDateInput.DataType = DbType.DateTime;
				colvarDateInput.MaxLength = 0;
				colvarDateInput.AutoIncrement = false;
				colvarDateInput.IsNullable = false;
				colvarDateInput.IsPrimaryKey = false;
				colvarDateInput.IsForeignKey = false;
				colvarDateInput.IsReadOnly = false;
				colvarDateInput.DefaultSetting = @"";
				colvarDateInput.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDateInput);
				
				TableSchema.TableColumn colvarObjectX = new TableSchema.TableColumn(schema);
				colvarObjectX.ColumnName = "Object";
				colvarObjectX.DataType = DbType.String;
				colvarObjectX.MaxLength = 50;
				colvarObjectX.AutoIncrement = false;
				colvarObjectX.IsNullable = false;
				colvarObjectX.IsPrimaryKey = false;
				colvarObjectX.IsForeignKey = false;
				colvarObjectX.IsReadOnly = false;
				colvarObjectX.DefaultSetting = @"";
				colvarObjectX.ForeignKeyTableName = "";
				schema.Columns.Add(colvarObjectX);
				
				TableSchema.TableColumn colvarSex = new TableSchema.TableColumn(schema);
				colvarSex.ColumnName = "Sex";
				colvarSex.DataType = DbType.String;
				colvarSex.MaxLength = 3;
				colvarSex.AutoIncrement = false;
				colvarSex.IsNullable = false;
				colvarSex.IsPrimaryKey = false;
				colvarSex.IsForeignKey = false;
				colvarSex.IsReadOnly = false;
				colvarSex.DefaultSetting = @"";
				colvarSex.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSex);
				
				TableSchema.TableColumn colvarAddress = new TableSchema.TableColumn(schema);
				colvarAddress.ColumnName = "Address";
				colvarAddress.DataType = DbType.String;
				colvarAddress.MaxLength = 50;
				colvarAddress.AutoIncrement = false;
				colvarAddress.IsNullable = false;
				colvarAddress.IsPrimaryKey = false;
				colvarAddress.IsForeignKey = false;
				colvarAddress.IsReadOnly = false;
				colvarAddress.DefaultSetting = @"";
				colvarAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddress);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("tbl_Lot",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("OrderFrom")]
		[Bindable(true)]
		public int OrderFrom 
		{
			get { return GetColumnValue<int>(Columns.OrderFrom); }
			set { SetColumnValue(Columns.OrderFrom, value); }
		}
		  
		[XmlAttribute("OrderTo")]
		[Bindable(true)]
		public int OrderTo 
		{
			get { return GetColumnValue<int>(Columns.OrderTo); }
			set { SetColumnValue(Columns.OrderTo, value); }
		}
		  
		[XmlAttribute("DateInput")]
		[Bindable(true)]
		public DateTime DateInput 
		{
			get { return GetColumnValue<DateTime>(Columns.DateInput); }
			set { SetColumnValue(Columns.DateInput, value); }
		}
		  
		[XmlAttribute("ObjectX")]
		[Bindable(true)]
		public string ObjectX 
		{
			get { return GetColumnValue<string>(Columns.ObjectX); }
			set { SetColumnValue(Columns.ObjectX, value); }
		}
		  
		[XmlAttribute("Sex")]
		[Bindable(true)]
		public string Sex 
		{
			get { return GetColumnValue<string>(Columns.Sex); }
			set { SetColumnValue(Columns.Sex, value); }
		}
		  
		[XmlAttribute("Address")]
		[Bindable(true)]
		public string Address 
		{
			get { return GetColumnValue<string>(Columns.Address); }
			set { SetColumnValue(Columns.Address, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varOrderFrom,int varOrderTo,DateTime varDateInput,string varObjectX,string varSex,string varAddress)
		{
			TblLot item = new TblLot();
			
			item.OrderFrom = varOrderFrom;
			
			item.OrderTo = varOrderTo;
			
			item.DateInput = varDateInput;
			
			item.ObjectX = varObjectX;
			
			item.Sex = varSex;
			
			item.Address = varAddress;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,int varOrderFrom,int varOrderTo,DateTime varDateInput,string varObjectX,string varSex,string varAddress)
		{
			TblLot item = new TblLot();
			
				item.Id = varId;
			
				item.OrderFrom = varOrderFrom;
			
				item.OrderTo = varOrderTo;
			
				item.DateInput = varDateInput;
			
				item.ObjectX = varObjectX;
			
				item.Sex = varSex;
			
				item.Address = varAddress;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderFromColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn OrderToColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DateInputColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ObjectXColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn SexColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn AddressColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string OrderFrom = @"OrderFrom";
			 public static string OrderTo = @"OrderTo";
			 public static string DateInput = @"DateInput";
			 public static string ObjectX = @"Object";
			 public static string Sex = @"Sex";
			 public static string Address = @"Address";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
