using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Strongly-typed collection for the TTestgroupList class.
    /// </summary>
    [Serializable]
    public class TTestgroupListCollection : ActiveList<TTestgroupList, TTestgroupListCollection>
    {
        /// <summary>
        ///     Filters an existing collection based on the set criteria. This is an in-memory filter
        ///     Thanks to developingchris for this!
        /// </summary>
        /// <returns>TTestgroupListCollection</returns>
        public TTestgroupListCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                TTestgroupList o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    ///     This is an ActiveRecord class which wraps the T_TESTGROUP_LIST table.
    /// </summary>
    [Serializable]
    public class TTestgroupList : ActiveRecord<TTestgroupList>, IActiveRecord
    {
        #region .ctors and Default Settings

        public TTestgroupList()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public TTestgroupList(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public TTestgroupList(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public TTestgroupList(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("T_TESTGROUP_LIST", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarTestGroupId = new TableSchema.TableColumn(schema);
                colvarTestGroupId.ColumnName = "TestGroup_ID";
                colvarTestGroupId.DataType = DbType.Int32;
                colvarTestGroupId.MaxLength = 0;
                colvarTestGroupId.AutoIncrement = true;
                colvarTestGroupId.IsNullable = false;
                colvarTestGroupId.IsPrimaryKey = true;
                colvarTestGroupId.IsForeignKey = false;
                colvarTestGroupId.IsReadOnly = false;
                colvarTestGroupId.DefaultSetting = @"";
                colvarTestGroupId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTestGroupId);

                var colvarTestGroupName = new TableSchema.TableColumn(schema);
                colvarTestGroupName.ColumnName = "TestGroup_Name";
                colvarTestGroupName.DataType = DbType.String;
                colvarTestGroupName.MaxLength = 100;
                colvarTestGroupName.AutoIncrement = false;
                colvarTestGroupName.IsNullable = true;
                colvarTestGroupName.IsPrimaryKey = false;
                colvarTestGroupName.IsForeignKey = false;
                colvarTestGroupName.IsReadOnly = false;
                colvarTestGroupName.DefaultSetting = @"";
                colvarTestGroupName.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTestGroupName);

                var colvarDescription = new TableSchema.TableColumn(schema);
                colvarDescription.ColumnName = "Description";
                colvarDescription.DataType = DbType.String;
                colvarDescription.MaxLength = 100;
                colvarDescription.AutoIncrement = false;
                colvarDescription.IsNullable = true;
                colvarDescription.IsPrimaryKey = false;
                colvarDescription.IsForeignKey = false;
                colvarDescription.IsReadOnly = false;
                colvarDescription.DefaultSetting = @"";
                colvarDescription.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDescription);

                var colvarDeviceId = new TableSchema.TableColumn(schema);
                colvarDeviceId.ColumnName = "Device_ID";
                colvarDeviceId.DataType = DbType.Decimal;
                colvarDeviceId.MaxLength = 0;
                colvarDeviceId.AutoIncrement = false;
                colvarDeviceId.IsNullable = true;
                colvarDeviceId.IsPrimaryKey = false;
                colvarDeviceId.IsForeignKey = false;
                colvarDeviceId.IsReadOnly = false;
                colvarDeviceId.DefaultSetting = @"";
                colvarDeviceId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDeviceId);

                var colvarTestTypeId = new TableSchema.TableColumn(schema);
                colvarTestTypeId.ColumnName = "TestType_ID";
                colvarTestTypeId.DataType = DbType.Int32;
                colvarTestTypeId.MaxLength = 0;
                colvarTestTypeId.AutoIncrement = false;
                colvarTestTypeId.IsNullable = true;
                colvarTestTypeId.IsPrimaryKey = false;
                colvarTestTypeId.IsForeignKey = false;
                colvarTestTypeId.IsReadOnly = false;
                colvarTestTypeId.DefaultSetting = @"";
                colvarTestTypeId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTestTypeId);

                var colvarTestGroupOrder = new TableSchema.TableColumn(schema);
                colvarTestGroupOrder.ColumnName = "TestGroup_Order";
                colvarTestGroupOrder.DataType = DbType.Int16;
                colvarTestGroupOrder.MaxLength = 0;
                colvarTestGroupOrder.AutoIncrement = false;
                colvarTestGroupOrder.IsNullable = true;
                colvarTestGroupOrder.IsPrimaryKey = false;
                colvarTestGroupOrder.IsForeignKey = false;
                colvarTestGroupOrder.IsReadOnly = false;
                colvarTestGroupOrder.DefaultSetting = @"";
                colvarTestGroupOrder.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTestGroupOrder);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("T_TESTGROUP_LIST", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("TestGroupId")]
        [Bindable(true)]
        public int TestGroupId
        {
            get { return GetColumnValue<int>(Columns.TestGroupId); }
            set { SetColumnValue(Columns.TestGroupId, value); }
        }

        [XmlAttribute("TestGroupName")]
        [Bindable(true)]
        public string TestGroupName
        {
            get { return GetColumnValue<string>(Columns.TestGroupName); }
            set { SetColumnValue(Columns.TestGroupName, value); }
        }

        [XmlAttribute("Description")]
        [Bindable(true)]
        public string Description
        {
            get { return GetColumnValue<string>(Columns.Description); }
            set { SetColumnValue(Columns.Description, value); }
        }

        [XmlAttribute("DeviceId")]
        [Bindable(true)]
        public decimal? DeviceId
        {
            get { return GetColumnValue<decimal?>(Columns.DeviceId); }
            set { SetColumnValue(Columns.DeviceId, value); }
        }

        [XmlAttribute("TestTypeId")]
        [Bindable(true)]
        public int? TestTypeId
        {
            get { return GetColumnValue<int?>(Columns.TestTypeId); }
            set { SetColumnValue(Columns.TestTypeId, value); }
        }

        [XmlAttribute("TestGroupOrder")]
        [Bindable(true)]
        public short? TestGroupOrder
        {
            get { return GetColumnValue<short?>(Columns.TestGroupOrder); }
            set { SetColumnValue(Columns.TestGroupOrder, value); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(string varTestGroupName, string varDescription, decimal? varDeviceId,
            int? varTestTypeId, short? varTestGroupOrder)
        {
            var item = new TTestgroupList();

            item.TestGroupName = varTestGroupName;

            item.Description = varDescription;

            item.DeviceId = varDeviceId;

            item.TestTypeId = varTestTypeId;

            item.TestGroupOrder = varTestGroupOrder;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(int varTestGroupId, string varTestGroupName, string varDescription,
            decimal? varDeviceId, int? varTestTypeId, short? varTestGroupOrder)
        {
            var item = new TTestgroupList();

            item.TestGroupId = varTestGroupId;

            item.TestGroupName = varTestGroupName;

            item.Description = varDescription;

            item.DeviceId = varDeviceId;

            item.TestTypeId = varTestTypeId;

            item.TestGroupOrder = varTestGroupOrder;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn TestGroupIdColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn TestGroupNameColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn DeviceIdColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn TestTypeIdColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn TestGroupOrderColumn
        {
            get { return Schema.Columns[5]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string TestGroupId = @"TestGroup_ID";
            public static string TestGroupName = @"TestGroup_Name";
            public static string Description = @"Description";
            public static string DeviceId = @"Device_ID";
            public static string TestTypeId = @"TestType_ID";
            public static string TestGroupOrder = @"TestGroup_Order";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no foreign key tables defined (0)


        //no ManyToMany tables defined (0)
    }
}