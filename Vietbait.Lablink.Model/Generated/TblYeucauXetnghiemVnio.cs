using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Strongly-typed collection for the TblYeucauXetnghiemVnio class.
    /// </summary>
    [Serializable]
    public class TblYeucauXetnghiemVnioCollection : ActiveList<TblYeucauXetnghiemVnio, TblYeucauXetnghiemVnioCollection>
    {
        /// <summary>
        ///     Filters an existing collection based on the set criteria. This is an in-memory filter
        ///     Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblYeucauXetnghiemVnioCollection</returns>
        public TblYeucauXetnghiemVnioCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                TblYeucauXetnghiemVnio o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    ///     This is an ActiveRecord class which wraps the tblYeucauXetnghiem_VNIO table.
    /// </summary>
    [Serializable]
    public class TblYeucauXetnghiemVnio : ActiveRecord<TblYeucauXetnghiemVnio>, IActiveRecord
    {
        #region .ctors and Default Settings

        public TblYeucauXetnghiemVnio()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public TblYeucauXetnghiemVnio(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public TblYeucauXetnghiemVnio(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public TblYeucauXetnghiemVnio(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("tblYeucauXetnghiem_VNIO", TableType.Table,
                    DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarIdXetnghiem = new TableSchema.TableColumn(schema);
                colvarIdXetnghiem.ColumnName = "Id_Xetnghiem";
                colvarIdXetnghiem.DataType = DbType.Int64;
                colvarIdXetnghiem.MaxLength = 0;
                colvarIdXetnghiem.AutoIncrement = true;
                colvarIdXetnghiem.IsNullable = false;
                colvarIdXetnghiem.IsPrimaryKey = true;
                colvarIdXetnghiem.IsForeignKey = false;
                colvarIdXetnghiem.IsReadOnly = false;
                colvarIdXetnghiem.DefaultSetting = @"";
                colvarIdXetnghiem.ForeignKeyTableName = "";
                schema.Columns.Add(colvarIdXetnghiem);

                var colvarIdCanLamSangThucHien = new TableSchema.TableColumn(schema);
                colvarIdCanLamSangThucHien.ColumnName = "idCanLamSangThucHien";
                colvarIdCanLamSangThucHien.DataType = DbType.Int16;
                colvarIdCanLamSangThucHien.MaxLength = 0;
                colvarIdCanLamSangThucHien.AutoIncrement = false;
                colvarIdCanLamSangThucHien.IsNullable = true;
                colvarIdCanLamSangThucHien.IsPrimaryKey = false;
                colvarIdCanLamSangThucHien.IsForeignKey = false;
                colvarIdCanLamSangThucHien.IsReadOnly = false;
                colvarIdCanLamSangThucHien.DefaultSetting = @"";
                colvarIdCanLamSangThucHien.ForeignKeyTableName = "";
                schema.Columns.Add(colvarIdCanLamSangThucHien);

                var colvarThucHienCho = new TableSchema.TableColumn(schema);
                colvarThucHienCho.ColumnName = "thucHienCho";
                colvarThucHienCho.DataType = DbType.Int16;
                colvarThucHienCho.MaxLength = 0;
                colvarThucHienCho.AutoIncrement = false;
                colvarThucHienCho.IsNullable = true;
                colvarThucHienCho.IsPrimaryKey = false;
                colvarThucHienCho.IsForeignKey = false;
                colvarThucHienCho.IsReadOnly = false;
                colvarThucHienCho.DefaultSetting = @"";
                colvarThucHienCho.ForeignKeyTableName = "";
                schema.Columns.Add(colvarThucHienCho);

                var colvarTrangThaiThucHien = new TableSchema.TableColumn(schema);
                colvarTrangThaiThucHien.ColumnName = "trangThaiThucHien";
                colvarTrangThaiThucHien.DataType = DbType.Int16;
                colvarTrangThaiThucHien.MaxLength = 0;
                colvarTrangThaiThucHien.AutoIncrement = false;
                colvarTrangThaiThucHien.IsNullable = true;
                colvarTrangThaiThucHien.IsPrimaryKey = false;
                colvarTrangThaiThucHien.IsForeignKey = false;
                colvarTrangThaiThucHien.IsReadOnly = false;
                colvarTrangThaiThucHien.DefaultSetting = @"";
                colvarTrangThaiThucHien.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTrangThaiThucHien);

                var colvarYeuCauXetNghiemId = new TableSchema.TableColumn(schema);
                colvarYeuCauXetNghiemId.ColumnName = "yeuCauXetNghiem_Id";
                colvarYeuCauXetNghiemId.DataType = DbType.Int16;
                colvarYeuCauXetNghiemId.MaxLength = 0;
                colvarYeuCauXetNghiemId.AutoIncrement = false;
                colvarYeuCauXetNghiemId.IsNullable = true;
                colvarYeuCauXetNghiemId.IsPrimaryKey = false;
                colvarYeuCauXetNghiemId.IsForeignKey = false;
                colvarYeuCauXetNghiemId.IsReadOnly = false;
                colvarYeuCauXetNghiemId.DefaultSetting = @"";
                colvarYeuCauXetNghiemId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarYeuCauXetNghiemId);

                var colvarId = new TableSchema.TableColumn(schema);
                colvarId.ColumnName = "Id";
                colvarId.DataType = DbType.Int64;
                colvarId.MaxLength = 0;
                colvarId.AutoIncrement = false;
                colvarId.IsNullable = true;
                colvarId.IsPrimaryKey = false;
                colvarId.IsForeignKey = false;
                colvarId.IsReadOnly = false;
                colvarId.DefaultSetting = @"";
                colvarId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarId);

                var colvarMaBenhNhan = new TableSchema.TableColumn(schema);
                colvarMaBenhNhan.ColumnName = "maBenhNhan";
                colvarMaBenhNhan.DataType = DbType.String;
                colvarMaBenhNhan.MaxLength = 150;
                colvarMaBenhNhan.AutoIncrement = false;
                colvarMaBenhNhan.IsNullable = true;
                colvarMaBenhNhan.IsPrimaryKey = false;
                colvarMaBenhNhan.IsForeignKey = false;
                colvarMaBenhNhan.IsReadOnly = false;
                colvarMaBenhNhan.DefaultSetting = @"";
                colvarMaBenhNhan.ForeignKeyTableName = "";
                schema.Columns.Add(colvarMaBenhNhan);

                var colvarBarcode = new TableSchema.TableColumn(schema);
                colvarBarcode.ColumnName = "Barcode";
                colvarBarcode.DataType = DbType.String;
                colvarBarcode.MaxLength = 50;
                colvarBarcode.AutoIncrement = false;
                colvarBarcode.IsNullable = true;
                colvarBarcode.IsPrimaryKey = false;
                colvarBarcode.IsForeignKey = false;
                colvarBarcode.IsReadOnly = false;
                colvarBarcode.DefaultSetting = @"";
                colvarBarcode.ForeignKeyTableName = "";
                schema.Columns.Add(colvarBarcode);

                var colvarTestTypeId = new TableSchema.TableColumn(schema);
                colvarTestTypeId.ColumnName = "TestType_ID";
                colvarTestTypeId.DataType = DbType.Int32;
                colvarTestTypeId.MaxLength = 0;
                colvarTestTypeId.AutoIncrement = false;
                colvarTestTypeId.IsNullable = true;
                colvarTestTypeId.IsPrimaryKey = false;
                colvarTestTypeId.IsForeignKey = false;
                colvarTestTypeId.IsReadOnly = false;
                colvarTestTypeId.DefaultSetting = @"";
                colvarTestTypeId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTestTypeId);

                var colvarSophieu = new TableSchema.TableColumn(schema);
                colvarSophieu.ColumnName = "sophieu";
                colvarSophieu.DataType = DbType.String;
                colvarSophieu.MaxLength = 50;
                colvarSophieu.AutoIncrement = false;
                colvarSophieu.IsNullable = true;
                colvarSophieu.IsPrimaryKey = false;
                colvarSophieu.IsForeignKey = false;
                colvarSophieu.IsReadOnly = false;
                colvarSophieu.DefaultSetting = @"";
                colvarSophieu.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSophieu);

                var colvarTestDate = new TableSchema.TableColumn(schema);
                colvarTestDate.ColumnName = "test_date";
                colvarTestDate.DataType = DbType.DateTime;
                colvarTestDate.MaxLength = 0;
                colvarTestDate.AutoIncrement = false;
                colvarTestDate.IsNullable = true;
                colvarTestDate.IsPrimaryKey = false;
                colvarTestDate.IsForeignKey = false;
                colvarTestDate.IsReadOnly = false;
                colvarTestDate.DefaultSetting = @"";
                colvarTestDate.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTestDate);

                var colvarIsTestName = new TableSchema.TableColumn(schema);
                colvarIsTestName.ColumnName = "IsTestName";
                colvarIsTestName.DataType = DbType.Boolean;
                colvarIsTestName.MaxLength = 0;
                colvarIsTestName.AutoIncrement = false;
                colvarIsTestName.IsNullable = true;
                colvarIsTestName.IsPrimaryKey = false;
                colvarIsTestName.IsForeignKey = false;
                colvarIsTestName.IsReadOnly = false;
                colvarIsTestName.DefaultSetting = @"";
                colvarIsTestName.ForeignKeyTableName = "";
                schema.Columns.Add(colvarIsTestName);

                var colvarSendStatus = new TableSchema.TableColumn(schema);
                colvarSendStatus.ColumnName = "SendStatus";
                colvarSendStatus.DataType = DbType.Boolean;
                colvarSendStatus.MaxLength = 0;
                colvarSendStatus.AutoIncrement = false;
                colvarSendStatus.IsNullable = true;
                colvarSendStatus.IsPrimaryKey = false;
                colvarSendStatus.IsForeignKey = false;
                colvarSendStatus.IsReadOnly = false;

                colvarSendStatus.DefaultSetting = @"((0))";
                colvarSendStatus.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSendStatus);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("tblYeucauXetnghiem_VNIO", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("IdXetnghiem")]
        [Bindable(true)]
        public long IdXetnghiem
        {
            get { return GetColumnValue<long>(Columns.IdXetnghiem); }
            set { SetColumnValue(Columns.IdXetnghiem, value); }
        }

        [XmlAttribute("IdCanLamSangThucHien")]
        [Bindable(true)]
        public short? IdCanLamSangThucHien
        {
            get { return GetColumnValue<short?>(Columns.IdCanLamSangThucHien); }
            set { SetColumnValue(Columns.IdCanLamSangThucHien, value); }
        }

        [XmlAttribute("ThucHienCho")]
        [Bindable(true)]
        public short? ThucHienCho
        {
            get { return GetColumnValue<short?>(Columns.ThucHienCho); }
            set { SetColumnValue(Columns.ThucHienCho, value); }
        }

        [XmlAttribute("TrangThaiThucHien")]
        [Bindable(true)]
        public short? TrangThaiThucHien
        {
            get { return GetColumnValue<short?>(Columns.TrangThaiThucHien); }
            set { SetColumnValue(Columns.TrangThaiThucHien, value); }
        }

        [XmlAttribute("YeuCauXetNghiemId")]
        [Bindable(true)]
        public short? YeuCauXetNghiemId
        {
            get { return GetColumnValue<short?>(Columns.YeuCauXetNghiemId); }
            set { SetColumnValue(Columns.YeuCauXetNghiemId, value); }
        }

        [XmlAttribute("Id")]
        [Bindable(true)]
        public long? Id
        {
            get { return GetColumnValue<long?>(Columns.Id); }
            set { SetColumnValue(Columns.Id, value); }
        }

        [XmlAttribute("MaBenhNhan")]
        [Bindable(true)]
        public string MaBenhNhan
        {
            get { return GetColumnValue<string>(Columns.MaBenhNhan); }
            set { SetColumnValue(Columns.MaBenhNhan, value); }
        }

        [XmlAttribute("Barcode")]
        [Bindable(true)]
        public string Barcode
        {
            get { return GetColumnValue<string>(Columns.Barcode); }
            set { SetColumnValue(Columns.Barcode, value); }
        }

        [XmlAttribute("TestTypeId")]
        [Bindable(true)]
        public int? TestTypeId
        {
            get { return GetColumnValue<int?>(Columns.TestTypeId); }
            set { SetColumnValue(Columns.TestTypeId, value); }
        }

        [XmlAttribute("Sophieu")]
        [Bindable(true)]
        public string Sophieu
        {
            get { return GetColumnValue<string>(Columns.Sophieu); }
            set { SetColumnValue(Columns.Sophieu, value); }
        }

        [XmlAttribute("TestDate")]
        [Bindable(true)]
        public DateTime? TestDate
        {
            get { return GetColumnValue<DateTime?>(Columns.TestDate); }
            set { SetColumnValue(Columns.TestDate, value); }
        }

        [XmlAttribute("IsTestName")]
        [Bindable(true)]
        public bool? IsTestName
        {
            get { return GetColumnValue<bool?>(Columns.IsTestName); }
            set { SetColumnValue(Columns.IsTestName, value); }
        }

        [XmlAttribute("SendStatus")]
        [Bindable(true)]
        public bool? SendStatus
        {
            get { return GetColumnValue<bool?>(Columns.SendStatus); }
            set { SetColumnValue(Columns.SendStatus, value); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(short? varIdCanLamSangThucHien, short? varThucHienCho, short? varTrangThaiThucHien,
            short? varYeuCauXetNghiemId, long? varId, string varMaBenhNhan, string varBarcode, int? varTestTypeId,
            string varSophieu, DateTime? varTestDate, bool? varIsTestName, bool? varSendStatus)
        {
            var item = new TblYeucauXetnghiemVnio();

            item.IdCanLamSangThucHien = varIdCanLamSangThucHien;

            item.ThucHienCho = varThucHienCho;

            item.TrangThaiThucHien = varTrangThaiThucHien;

            item.YeuCauXetNghiemId = varYeuCauXetNghiemId;

            item.Id = varId;

            item.MaBenhNhan = varMaBenhNhan;

            item.Barcode = varBarcode;

            item.TestTypeId = varTestTypeId;

            item.Sophieu = varSophieu;

            item.TestDate = varTestDate;

            item.IsTestName = varIsTestName;

            item.SendStatus = varSendStatus;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(long varIdXetnghiem, short? varIdCanLamSangThucHien, short? varThucHienCho,
            short? varTrangThaiThucHien, short? varYeuCauXetNghiemId, long? varId, string varMaBenhNhan,
            string varBarcode, int? varTestTypeId, string varSophieu, DateTime? varTestDate, bool? varIsTestName,
            bool? varSendStatus)
        {
            var item = new TblYeucauXetnghiemVnio();

            item.IdXetnghiem = varIdXetnghiem;

            item.IdCanLamSangThucHien = varIdCanLamSangThucHien;

            item.ThucHienCho = varThucHienCho;

            item.TrangThaiThucHien = varTrangThaiThucHien;

            item.YeuCauXetNghiemId = varYeuCauXetNghiemId;

            item.Id = varId;

            item.MaBenhNhan = varMaBenhNhan;

            item.Barcode = varBarcode;

            item.TestTypeId = varTestTypeId;

            item.Sophieu = varSophieu;

            item.TestDate = varTestDate;

            item.IsTestName = varIsTestName;

            item.SendStatus = varSendStatus;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn IdXetnghiemColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn IdCanLamSangThucHienColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn ThucHienChoColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn TrangThaiThucHienColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn YeuCauXetNghiemIdColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[5]; }
        }


        public static TableSchema.TableColumn MaBenhNhanColumn
        {
            get { return Schema.Columns[6]; }
        }


        public static TableSchema.TableColumn BarcodeColumn
        {
            get { return Schema.Columns[7]; }
        }


        public static TableSchema.TableColumn TestTypeIdColumn
        {
            get { return Schema.Columns[8]; }
        }


        public static TableSchema.TableColumn SophieuColumn
        {
            get { return Schema.Columns[9]; }
        }


        public static TableSchema.TableColumn TestDateColumn
        {
            get { return Schema.Columns[10]; }
        }


        public static TableSchema.TableColumn IsTestNameColumn
        {
            get { return Schema.Columns[11]; }
        }


        public static TableSchema.TableColumn SendStatusColumn
        {
            get { return Schema.Columns[12]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string IdXetnghiem = @"Id_Xetnghiem";
            public static string IdCanLamSangThucHien = @"idCanLamSangThucHien";
            public static string ThucHienCho = @"thucHienCho";
            public static string TrangThaiThucHien = @"trangThaiThucHien";
            public static string YeuCauXetNghiemId = @"yeuCauXetNghiem_Id";
            public static string Id = @"Id";
            public static string MaBenhNhan = @"maBenhNhan";
            public static string Barcode = @"Barcode";
            public static string TestTypeId = @"TestType_ID";
            public static string Sophieu = @"sophieu";
            public static string TestDate = @"test_date";
            public static string IsTestName = @"IsTestName";
            public static string SendStatus = @"SendStatus";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no foreign key tables defined (0)


        //no ManyToMany tables defined (0)
    }
}