using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Strongly-typed collection for the TblRegService class.
    /// </summary>
    [Serializable]
    public class TblRegServiceCollection : ActiveList<TblRegService, TblRegServiceCollection>
    {
        /// <summary>
        ///     Filters an existing collection based on the set criteria. This is an in-memory filter
        ///     Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblRegServiceCollection</returns>
        public TblRegServiceCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                TblRegService o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    ///     This is an ActiveRecord class which wraps the tbl_RegService table.
    /// </summary>
    [Serializable]
    public class TblRegService : ActiveRecord<TblRegService>, IActiveRecord
    {
        #region .ctors and Default Settings

        public TblRegService()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public TblRegService(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public TblRegService(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public TblRegService(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("tbl_RegService", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarRegID = new TableSchema.TableColumn(schema);
                colvarRegID.ColumnName = "RegID";
                colvarRegID.DataType = DbType.Int64;
                colvarRegID.MaxLength = 0;
                colvarRegID.AutoIncrement = true;
                colvarRegID.IsNullable = false;
                colvarRegID.IsPrimaryKey = true;
                colvarRegID.IsForeignKey = false;
                colvarRegID.IsReadOnly = false;
                colvarRegID.DefaultSetting = @"";
                colvarRegID.ForeignKeyTableName = "";
                schema.Columns.Add(colvarRegID);

                var colvarPatientID = new TableSchema.TableColumn(schema);
                colvarPatientID.ColumnName = "PatientID";
                colvarPatientID.DataType = DbType.Int64;
                colvarPatientID.MaxLength = 0;
                colvarPatientID.AutoIncrement = false;
                colvarPatientID.IsNullable = false;
                colvarPatientID.IsPrimaryKey = false;
                colvarPatientID.IsForeignKey = false;
                colvarPatientID.IsReadOnly = false;
                colvarPatientID.DefaultSetting = @"";
                colvarPatientID.ForeignKeyTableName = "";
                schema.Columns.Add(colvarPatientID);

                var colvarTestDate = new TableSchema.TableColumn(schema);
                colvarTestDate.ColumnName = "TestDate";
                colvarTestDate.DataType = DbType.DateTime;
                colvarTestDate.MaxLength = 0;
                colvarTestDate.AutoIncrement = false;
                colvarTestDate.IsNullable = false;
                colvarTestDate.IsPrimaryKey = false;
                colvarTestDate.IsForeignKey = false;
                colvarTestDate.IsReadOnly = false;
                colvarTestDate.DefaultSetting = @"";
                colvarTestDate.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTestDate);

                var colvarRegNo = new TableSchema.TableColumn(schema);
                colvarRegNo.ColumnName = "RegNo";
                colvarRegNo.DataType = DbType.String;
                colvarRegNo.MaxLength = 10;
                colvarRegNo.AutoIncrement = false;
                colvarRegNo.IsNullable = false;
                colvarRegNo.IsPrimaryKey = false;
                colvarRegNo.IsForeignKey = false;
                colvarRegNo.IsReadOnly = false;
                colvarRegNo.DefaultSetting = @"";
                colvarRegNo.ForeignKeyTableName = "";
                schema.Columns.Add(colvarRegNo);

                var colvarServiceType = new TableSchema.TableColumn(schema);
                colvarServiceType.ColumnName = "ServiceType";
                colvarServiceType.DataType = DbType.Int16;
                colvarServiceType.MaxLength = 0;
                colvarServiceType.AutoIncrement = false;
                colvarServiceType.IsNullable = false;
                colvarServiceType.IsPrimaryKey = false;
                colvarServiceType.IsForeignKey = false;
                colvarServiceType.IsReadOnly = false;
                colvarServiceType.DefaultSetting = @"";
                colvarServiceType.ForeignKeyTableName = "";
                schema.Columns.Add(colvarServiceType);

                var colvarRegType = new TableSchema.TableColumn(schema);
                colvarRegType.ColumnName = "RegType";
                colvarRegType.DataType = DbType.Int16;
                colvarRegType.MaxLength = 0;
                colvarRegType.AutoIncrement = false;
                colvarRegType.IsNullable = false;
                colvarRegType.IsPrimaryKey = false;
                colvarRegType.IsForeignKey = false;
                colvarRegType.IsReadOnly = false;
                colvarRegType.DefaultSetting = @"";
                colvarRegType.ForeignKeyTableName = "";
                schema.Columns.Add(colvarRegType);

                var colvarNTime = new TableSchema.TableColumn(schema);
                colvarNTime.ColumnName = "nTime";
                colvarNTime.DataType = DbType.Int16;
                colvarNTime.MaxLength = 0;
                colvarNTime.AutoIncrement = false;
                colvarNTime.IsNullable = true;
                colvarNTime.IsPrimaryKey = false;
                colvarNTime.IsForeignKey = false;
                colvarNTime.IsReadOnly = false;
                colvarNTime.DefaultSetting = @"";
                colvarNTime.ForeignKeyTableName = "";
                schema.Columns.Add(colvarNTime);

                var colvarTotalMoney = new TableSchema.TableColumn(schema);
                colvarTotalMoney.ColumnName = "TotalMoney";
                colvarTotalMoney.DataType = DbType.Currency;
                colvarTotalMoney.MaxLength = 0;
                colvarTotalMoney.AutoIncrement = false;
                colvarTotalMoney.IsNullable = true;
                colvarTotalMoney.IsPrimaryKey = false;
                colvarTotalMoney.IsForeignKey = false;
                colvarTotalMoney.IsReadOnly = false;
                colvarTotalMoney.DefaultSetting = @"";
                colvarTotalMoney.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTotalMoney);

                var colvarSDesc = new TableSchema.TableColumn(schema);
                colvarSDesc.ColumnName = "sDesc";
                colvarSDesc.DataType = DbType.String;
                colvarSDesc.MaxLength = 100;
                colvarSDesc.AutoIncrement = false;
                colvarSDesc.IsNullable = true;
                colvarSDesc.IsPrimaryKey = false;
                colvarSDesc.IsForeignKey = false;
                colvarSDesc.IsReadOnly = false;
                colvarSDesc.DefaultSetting = @"";
                colvarSDesc.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSDesc);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("tbl_RegService", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("RegID")]
        [Bindable(true)]
        public long RegID
        {
            get { return GetColumnValue<long>(Columns.RegID); }
            set { SetColumnValue(Columns.RegID, value); }
        }

        [XmlAttribute("PatientID")]
        [Bindable(true)]
        public long PatientID
        {
            get { return GetColumnValue<long>(Columns.PatientID); }
            set { SetColumnValue(Columns.PatientID, value); }
        }

        [XmlAttribute("TestDate")]
        [Bindable(true)]
        public DateTime TestDate
        {
            get { return GetColumnValue<DateTime>(Columns.TestDate); }
            set { SetColumnValue(Columns.TestDate, value); }
        }

        [XmlAttribute("RegNo")]
        [Bindable(true)]
        public string RegNo
        {
            get { return GetColumnValue<string>(Columns.RegNo); }
            set { SetColumnValue(Columns.RegNo, value); }
        }

        [XmlAttribute("ServiceType")]
        [Bindable(true)]
        public short ServiceType
        {
            get { return GetColumnValue<short>(Columns.ServiceType); }
            set { SetColumnValue(Columns.ServiceType, value); }
        }

        [XmlAttribute("RegType")]
        [Bindable(true)]
        public short RegType
        {
            get { return GetColumnValue<short>(Columns.RegType); }
            set { SetColumnValue(Columns.RegType, value); }
        }

        [XmlAttribute("NTime")]
        [Bindable(true)]
        public short? NTime
        {
            get { return GetColumnValue<short?>(Columns.NTime); }
            set { SetColumnValue(Columns.NTime, value); }
        }

        [XmlAttribute("TotalMoney")]
        [Bindable(true)]
        public decimal? TotalMoney
        {
            get { return GetColumnValue<decimal?>(Columns.TotalMoney); }
            set { SetColumnValue(Columns.TotalMoney, value); }
        }

        [XmlAttribute("SDesc")]
        [Bindable(true)]
        public string SDesc
        {
            get { return GetColumnValue<string>(Columns.SDesc); }
            set { SetColumnValue(Columns.SDesc, value); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(long varPatientID, DateTime varTestDate, string varRegNo, short varServiceType,
            short varRegType, short? varNTime, decimal? varTotalMoney, string varSDesc)
        {
            var item = new TblRegService();

            item.PatientID = varPatientID;

            item.TestDate = varTestDate;

            item.RegNo = varRegNo;

            item.ServiceType = varServiceType;

            item.RegType = varRegType;

            item.NTime = varNTime;

            item.TotalMoney = varTotalMoney;

            item.SDesc = varSDesc;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(long varRegID, long varPatientID, DateTime varTestDate, string varRegNo,
            short varServiceType, short varRegType, short? varNTime, decimal? varTotalMoney, string varSDesc)
        {
            var item = new TblRegService();

            item.RegID = varRegID;

            item.PatientID = varPatientID;

            item.TestDate = varTestDate;

            item.RegNo = varRegNo;

            item.ServiceType = varServiceType;

            item.RegType = varRegType;

            item.NTime = varNTime;

            item.TotalMoney = varTotalMoney;

            item.SDesc = varSDesc;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn RegIDColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn PatientIDColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn TestDateColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn RegNoColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn ServiceTypeColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn RegTypeColumn
        {
            get { return Schema.Columns[5]; }
        }


        public static TableSchema.TableColumn NTimeColumn
        {
            get { return Schema.Columns[6]; }
        }


        public static TableSchema.TableColumn TotalMoneyColumn
        {
            get { return Schema.Columns[7]; }
        }


        public static TableSchema.TableColumn SDescColumn
        {
            get { return Schema.Columns[8]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string RegID = @"RegID";
            public static string PatientID = @"PatientID";
            public static string TestDate = @"TestDate";
            public static string RegNo = @"RegNo";
            public static string ServiceType = @"ServiceType";
            public static string RegType = @"RegType";
            public static string NTime = @"nTime";
            public static string TotalMoney = @"TotalMoney";
            public static string SDesc = @"sDesc";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no foreign key tables defined (0)


        //no ManyToMany tables defined (0)
    }
}