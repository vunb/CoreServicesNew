using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Vietbait.Lablink.Model
{
	/// <summary>
	/// Strongly-typed collection for the LPort class.
	/// </summary>
    [Serializable]
	public partial class LPortCollection : ActiveList<LPort, LPortCollection>
	{	   
		public LPortCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LPortCollection</returns>
		public LPortCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LPort o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the L_PORT table.
	/// </summary>
	[Serializable]
	public partial class LPort : ActiveRecord<LPort>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LPort()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LPort(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LPort(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LPort(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("L_PORT", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarPortId = new TableSchema.TableColumn(schema);
				colvarPortId.ColumnName = "Port_ID";
				colvarPortId.DataType = DbType.Int32;
				colvarPortId.MaxLength = 0;
				colvarPortId.AutoIncrement = true;
				colvarPortId.IsNullable = false;
				colvarPortId.IsPrimaryKey = true;
				colvarPortId.IsForeignKey = false;
				colvarPortId.IsReadOnly = false;
				colvarPortId.DefaultSetting = @"";
				colvarPortId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPortId);
				
				TableSchema.TableColumn colvarPortName = new TableSchema.TableColumn(schema);
				colvarPortName.ColumnName = "Port_Name";
				colvarPortName.DataType = DbType.String;
				colvarPortName.MaxLength = 20;
				colvarPortName.AutoIncrement = false;
				colvarPortName.IsNullable = false;
				colvarPortName.IsPrimaryKey = false;
				colvarPortName.IsForeignKey = false;
				colvarPortName.IsReadOnly = false;
				colvarPortName.DefaultSetting = @"";
				colvarPortName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPortName);
				
				TableSchema.TableColumn colvarBaudRate = new TableSchema.TableColumn(schema);
				colvarBaudRate.ColumnName = "BaudRate";
				colvarBaudRate.DataType = DbType.String;
				colvarBaudRate.MaxLength = 20;
				colvarBaudRate.AutoIncrement = false;
				colvarBaudRate.IsNullable = false;
				colvarBaudRate.IsPrimaryKey = false;
				colvarBaudRate.IsForeignKey = false;
				colvarBaudRate.IsReadOnly = false;
				colvarBaudRate.DefaultSetting = @"";
				colvarBaudRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBaudRate);
				
				TableSchema.TableColumn colvarDataBits = new TableSchema.TableColumn(schema);
				colvarDataBits.ColumnName = "DataBits";
				colvarDataBits.DataType = DbType.Int32;
				colvarDataBits.MaxLength = 0;
				colvarDataBits.AutoIncrement = false;
				colvarDataBits.IsNullable = false;
				colvarDataBits.IsPrimaryKey = false;
				colvarDataBits.IsForeignKey = false;
				colvarDataBits.IsReadOnly = false;
				colvarDataBits.DefaultSetting = @"";
				colvarDataBits.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDataBits);
				
				TableSchema.TableColumn colvarStopBits = new TableSchema.TableColumn(schema);
				colvarStopBits.ColumnName = "StopBits";
				colvarStopBits.DataType = DbType.String;
				colvarStopBits.MaxLength = 20;
				colvarStopBits.AutoIncrement = false;
				colvarStopBits.IsNullable = false;
				colvarStopBits.IsPrimaryKey = false;
				colvarStopBits.IsForeignKey = false;
				colvarStopBits.IsReadOnly = false;
				colvarStopBits.DefaultSetting = @"";
				colvarStopBits.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStopBits);
				
				TableSchema.TableColumn colvarParity = new TableSchema.TableColumn(schema);
				colvarParity.ColumnName = "Parity";
				colvarParity.DataType = DbType.String;
				colvarParity.MaxLength = 20;
				colvarParity.AutoIncrement = false;
				colvarParity.IsNullable = false;
				colvarParity.IsPrimaryKey = false;
				colvarParity.IsForeignKey = false;
				colvarParity.IsReadOnly = false;
				colvarParity.DefaultSetting = @"";
				colvarParity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParity);
				
				TableSchema.TableColumn colvarStatus = new TableSchema.TableColumn(schema);
				colvarStatus.ColumnName = "Status";
				colvarStatus.DataType = DbType.Int16;
				colvarStatus.MaxLength = 0;
				colvarStatus.AutoIncrement = false;
				colvarStatus.IsNullable = true;
				colvarStatus.IsPrimaryKey = false;
				colvarStatus.IsForeignKey = false;
				colvarStatus.IsReadOnly = false;
				colvarStatus.DefaultSetting = @"";
				colvarStatus.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatus);
				
				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.String;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);
				
				TableSchema.TableColumn colvarDtr = new TableSchema.TableColumn(schema);
				colvarDtr.ColumnName = "DTR";
				colvarDtr.DataType = DbType.Int32;
				colvarDtr.MaxLength = 0;
				colvarDtr.AutoIncrement = false;
				colvarDtr.IsNullable = false;
				colvarDtr.IsPrimaryKey = false;
				colvarDtr.IsForeignKey = false;
				colvarDtr.IsReadOnly = false;
				colvarDtr.DefaultSetting = @"";
				colvarDtr.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDtr);
				
				TableSchema.TableColumn colvarRts = new TableSchema.TableColumn(schema);
				colvarRts.ColumnName = "RTS";
				colvarRts.DataType = DbType.Int32;
				colvarRts.MaxLength = 0;
				colvarRts.AutoIncrement = false;
				colvarRts.IsNullable = false;
				colvarRts.IsPrimaryKey = false;
				colvarRts.IsForeignKey = false;
				colvarRts.IsReadOnly = false;
				colvarRts.DefaultSetting = @"";
				colvarRts.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRts);
				
				TableSchema.TableColumn colvarLocalAlias = new TableSchema.TableColumn(schema);
				colvarLocalAlias.ColumnName = "LocalAlias";
				colvarLocalAlias.DataType = DbType.String;
				colvarLocalAlias.MaxLength = 50;
				colvarLocalAlias.AutoIncrement = false;
				colvarLocalAlias.IsNullable = true;
				colvarLocalAlias.IsPrimaryKey = false;
				colvarLocalAlias.IsForeignKey = false;
				colvarLocalAlias.IsReadOnly = false;
				colvarLocalAlias.DefaultSetting = @"";
				colvarLocalAlias.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocalAlias);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("L_PORT",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("PortId")]
		[Bindable(true)]
		public int PortId 
		{
			get { return GetColumnValue<int>(Columns.PortId); }
			set { SetColumnValue(Columns.PortId, value); }
		}
		  
		[XmlAttribute("PortName")]
		[Bindable(true)]
		public string PortName 
		{
			get { return GetColumnValue<string>(Columns.PortName); }
			set { SetColumnValue(Columns.PortName, value); }
		}
		  
		[XmlAttribute("BaudRate")]
		[Bindable(true)]
		public string BaudRate 
		{
			get { return GetColumnValue<string>(Columns.BaudRate); }
			set { SetColumnValue(Columns.BaudRate, value); }
		}
		  
		[XmlAttribute("DataBits")]
		[Bindable(true)]
		public int DataBits 
		{
			get { return GetColumnValue<int>(Columns.DataBits); }
			set { SetColumnValue(Columns.DataBits, value); }
		}
		  
		[XmlAttribute("StopBits")]
		[Bindable(true)]
		public string StopBits 
		{
			get { return GetColumnValue<string>(Columns.StopBits); }
			set { SetColumnValue(Columns.StopBits, value); }
		}
		  
		[XmlAttribute("Parity")]
		[Bindable(true)]
		public string Parity 
		{
			get { return GetColumnValue<string>(Columns.Parity); }
			set { SetColumnValue(Columns.Parity, value); }
		}
		  
		[XmlAttribute("Status")]
		[Bindable(true)]
		public short? Status 
		{
			get { return GetColumnValue<short?>(Columns.Status); }
			set { SetColumnValue(Columns.Status, value); }
		}
		  
		[XmlAttribute("Description")]
		[Bindable(true)]
		public string Description 
		{
			get { return GetColumnValue<string>(Columns.Description); }
			set { SetColumnValue(Columns.Description, value); }
		}
		  
		[XmlAttribute("Dtr")]
		[Bindable(true)]
		public int Dtr 
		{
			get { return GetColumnValue<int>(Columns.Dtr); }
			set { SetColumnValue(Columns.Dtr, value); }
		}
		  
		[XmlAttribute("Rts")]
		[Bindable(true)]
		public int Rts 
		{
			get { return GetColumnValue<int>(Columns.Rts); }
			set { SetColumnValue(Columns.Rts, value); }
		}
		  
		[XmlAttribute("LocalAlias")]
		[Bindable(true)]
		public string LocalAlias 
		{
			get { return GetColumnValue<string>(Columns.LocalAlias); }
			set { SetColumnValue(Columns.LocalAlias, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varPortName,string varBaudRate,int varDataBits,string varStopBits,string varParity,short? varStatus,string varDescription,int varDtr,int varRts,string varLocalAlias)
		{
			LPort item = new LPort();
			
			item.PortName = varPortName;
			
			item.BaudRate = varBaudRate;
			
			item.DataBits = varDataBits;
			
			item.StopBits = varStopBits;
			
			item.Parity = varParity;
			
			item.Status = varStatus;
			
			item.Description = varDescription;
			
			item.Dtr = varDtr;
			
			item.Rts = varRts;
			
			item.LocalAlias = varLocalAlias;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varPortId,string varPortName,string varBaudRate,int varDataBits,string varStopBits,string varParity,short? varStatus,string varDescription,int varDtr,int varRts,string varLocalAlias)
		{
			LPort item = new LPort();
			
				item.PortId = varPortId;
			
				item.PortName = varPortName;
			
				item.BaudRate = varBaudRate;
			
				item.DataBits = varDataBits;
			
				item.StopBits = varStopBits;
			
				item.Parity = varParity;
			
				item.Status = varStatus;
			
				item.Description = varDescription;
			
				item.Dtr = varDtr;
			
				item.Rts = varRts;
			
				item.LocalAlias = varLocalAlias;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn PortIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PortNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn BaudRateColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DataBitsColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn StopBitsColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ParityColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn StatusColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn DtrColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn RtsColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn LocalAliasColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string PortId = @"Port_ID";
			 public static string PortName = @"Port_Name";
			 public static string BaudRate = @"BaudRate";
			 public static string DataBits = @"DataBits";
			 public static string StopBits = @"StopBits";
			 public static string Parity = @"Parity";
			 public static string Status = @"Status";
			 public static string Description = @"Description";
			 public static string Dtr = @"DTR";
			 public static string Rts = @"RTS";
			 public static string LocalAlias = @"LocalAlias";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
