using System;
using System.ComponentModel;
using System.Threading;
using System.Web;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Controller class for L_USER
    /// </summary>
    [DataObject]
    public class LUserController
    {
        // Preload our schema..
        private LUser thisSchemaLoad = new LUser();
        private string userName = String.Empty;

        protected string UserName
        {
            get
            {
                if (userName.Length == 0)
                {
                    if (HttpContext.Current != null)
                    {
                        userName = HttpContext.Current.User.Identity.Name;
                    }
                    else
                    {
                        userName = Thread.CurrentPrincipal.Identity.Name;
                    }
                }
                return userName;
            }
        }

        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public LUserCollection FetchAll()
        {
            var coll = new LUserCollection();
            var qry = new Query(LUser.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public LUserCollection FetchByID(object UserId)
        {
            LUserCollection coll = new LUserCollection().Where("User_ID", UserId).Load();
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public LUserCollection FetchByQuery(Query qry)
        {
            var coll = new LUserCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object UserId)
        {
            return (LUser.Delete(UserId) == 1);
        }

        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object UserId)
        {
            return (LUser.Destroy(UserId) == 1);
        }


        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public void Insert(string UserName, int? RoleId, string UserCode)
        {
            var item = new LUser();

            item.UserName = UserName;

            item.RoleId = RoleId;

            item.UserCode = UserCode;


            item.Save(UserName);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public void Update(decimal UserId, string UserName, int? RoleId, string UserCode)
        {
            var item = new LUser();
            item.MarkOld();
            item.IsLoaded = true;

            item.UserId = UserId;

            item.UserName = UserName;

            item.RoleId = RoleId;

            item.UserCode = UserCode;

            item.Save(UserName);
        }
    }
}