using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Strongly-typed collection for the LCreen class.
    /// </summary>
    [Serializable]
    public class LCreenCollection : ActiveList<LCreen, LCreenCollection>
    {
        /// <summary>
        ///     Filters an existing collection based on the set criteria. This is an in-memory filter
        ///     Thanks to developingchris for this!
        /// </summary>
        /// <returns>LCreenCollection</returns>
        public LCreenCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                LCreen o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    ///     This is an ActiveRecord class which wraps the L_Creen table.
    /// </summary>
    [Serializable]
    public class LCreen : ActiveRecord<LCreen>, IActiveRecord
    {
        #region .ctors and Default Settings

        public LCreen()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public LCreen(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public LCreen(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public LCreen(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("L_Creen", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarFilterId = new TableSchema.TableColumn(schema);
                colvarFilterId.ColumnName = "Filter_ID";
                colvarFilterId.DataType = DbType.Int32;
                colvarFilterId.MaxLength = 0;
                colvarFilterId.AutoIncrement = true;
                colvarFilterId.IsNullable = false;
                colvarFilterId.IsPrimaryKey = true;
                colvarFilterId.IsForeignKey = false;
                colvarFilterId.IsReadOnly = false;
                colvarFilterId.DefaultSetting = @"";
                colvarFilterId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarFilterId);

                var colvarDataControlId = new TableSchema.TableColumn(schema);
                colvarDataControlId.ColumnName = "DataControl_ID";
                colvarDataControlId.DataType = DbType.Int32;
                colvarDataControlId.MaxLength = 0;
                colvarDataControlId.AutoIncrement = false;
                colvarDataControlId.IsNullable = true;
                colvarDataControlId.IsPrimaryKey = false;
                colvarDataControlId.IsForeignKey = false;
                colvarDataControlId.IsReadOnly = false;
                colvarDataControlId.DefaultSetting = @"";
                colvarDataControlId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDataControlId);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("L_Creen", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("FilterId")]
        [Bindable(true)]
        public int FilterId
        {
            get { return GetColumnValue<int>(Columns.FilterId); }
            set { SetColumnValue(Columns.FilterId, value); }
        }

        [XmlAttribute("DataControlId")]
        [Bindable(true)]
        public int? DataControlId
        {
            get { return GetColumnValue<int?>(Columns.DataControlId); }
            set { SetColumnValue(Columns.DataControlId, value); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(int? varDataControlId)
        {
            var item = new LCreen();

            item.DataControlId = varDataControlId;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(int varFilterId, int? varDataControlId)
        {
            var item = new LCreen();

            item.FilterId = varFilterId;

            item.DataControlId = varDataControlId;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn FilterIdColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn DataControlIdColumn
        {
            get { return Schema.Columns[1]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string FilterId = @"Filter_ID";
            public static string DataControlId = @"DataControl_ID";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no foreign key tables defined (0)


        //no ManyToMany tables defined (0)
    }
}