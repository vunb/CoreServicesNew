using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Strongly-typed collection for the TTestContent class.
    /// </summary>
    [Serializable]
    public class TTestContentCollection : ActiveList<TTestContent, TTestContentCollection>
    {
        /// <summary>
        ///     Filters an existing collection based on the set criteria. This is an in-memory filter
        ///     Thanks to developingchris for this!
        /// </summary>
        /// <returns>TTestContentCollection</returns>
        public TTestContentCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                TTestContent o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    ///     This is an ActiveRecord class which wraps the T_TEST_CONTENT table.
    /// </summary>
    [Serializable]
    public class TTestContent : ActiveRecord<TTestContent>, IActiveRecord
    {
        #region .ctors and Default Settings

        public TTestContent()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public TTestContent(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public TTestContent(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public TTestContent(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("T_TEST_CONTENT", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarTestId = new TableSchema.TableColumn(schema);
                colvarTestId.ColumnName = "Test_ID";
                colvarTestId.DataType = DbType.Decimal;
                colvarTestId.MaxLength = 0;
                colvarTestId.AutoIncrement = false;
                colvarTestId.IsNullable = false;
                colvarTestId.IsPrimaryKey = true;
                colvarTestId.IsForeignKey = false;
                colvarTestId.IsReadOnly = false;
                colvarTestId.DefaultSetting = @"";
                colvarTestId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTestId);

                var colvarPatientId = new TableSchema.TableColumn(schema);
                colvarPatientId.ColumnName = "Patient_ID";
                colvarPatientId.DataType = DbType.String;
                colvarPatientId.MaxLength = 20;
                colvarPatientId.AutoIncrement = false;
                colvarPatientId.IsNullable = false;
                colvarPatientId.IsPrimaryKey = true;
                colvarPatientId.IsForeignKey = false;
                colvarPatientId.IsReadOnly = false;
                colvarPatientId.DefaultSetting = @"";
                colvarPatientId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarPatientId);

                var colvarStatus = new TableSchema.TableColumn(schema);
                colvarStatus.ColumnName = "Status";
                colvarStatus.DataType = DbType.Int16;
                colvarStatus.MaxLength = 0;
                colvarStatus.AutoIncrement = false;
                colvarStatus.IsNullable = true;
                colvarStatus.IsPrimaryKey = false;
                colvarStatus.IsForeignKey = false;
                colvarStatus.IsReadOnly = false;
                colvarStatus.DefaultSetting = @"";
                colvarStatus.ForeignKeyTableName = "";
                schema.Columns.Add(colvarStatus);

                var colvarDataId = new TableSchema.TableColumn(schema);
                colvarDataId.ColumnName = "Data_ID";
                colvarDataId.DataType = DbType.Decimal;
                colvarDataId.MaxLength = 0;
                colvarDataId.AutoIncrement = false;
                colvarDataId.IsNullable = true;
                colvarDataId.IsPrimaryKey = false;
                colvarDataId.IsForeignKey = false;
                colvarDataId.IsReadOnly = false;
                colvarDataId.DefaultSetting = @"";
                colvarDataId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDataId);

                var colvarUpdateUser = new TableSchema.TableColumn(schema);
                colvarUpdateUser.ColumnName = "Update_User";
                colvarUpdateUser.DataType = DbType.Decimal;
                colvarUpdateUser.MaxLength = 0;
                colvarUpdateUser.AutoIncrement = false;
                colvarUpdateUser.IsNullable = true;
                colvarUpdateUser.IsPrimaryKey = false;
                colvarUpdateUser.IsForeignKey = false;
                colvarUpdateUser.IsReadOnly = false;
                colvarUpdateUser.DefaultSetting = @"";
                colvarUpdateUser.ForeignKeyTableName = "";
                schema.Columns.Add(colvarUpdateUser);

                var colvarUpdateDate = new TableSchema.TableColumn(schema);
                colvarUpdateDate.ColumnName = "Update_Date";
                colvarUpdateDate.DataType = DbType.Decimal;
                colvarUpdateDate.MaxLength = 0;
                colvarUpdateDate.AutoIncrement = false;
                colvarUpdateDate.IsNullable = true;
                colvarUpdateDate.IsPrimaryKey = false;
                colvarUpdateDate.IsForeignKey = false;
                colvarUpdateDate.IsReadOnly = false;
                colvarUpdateDate.DefaultSetting = @"";
                colvarUpdateDate.ForeignKeyTableName = "";
                schema.Columns.Add(colvarUpdateDate);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("T_TEST_CONTENT", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("TestId")]
        [Bindable(true)]
        public decimal TestId
        {
            get { return GetColumnValue<decimal>(Columns.TestId); }
            set { SetColumnValue(Columns.TestId, value); }
        }

        [XmlAttribute("PatientId")]
        [Bindable(true)]
        public string PatientId
        {
            get { return GetColumnValue<string>(Columns.PatientId); }
            set { SetColumnValue(Columns.PatientId, value); }
        }

        [XmlAttribute("Status")]
        [Bindable(true)]
        public short? Status
        {
            get { return GetColumnValue<short?>(Columns.Status); }
            set { SetColumnValue(Columns.Status, value); }
        }

        [XmlAttribute("DataId")]
        [Bindable(true)]
        public decimal? DataId
        {
            get { return GetColumnValue<decimal?>(Columns.DataId); }
            set { SetColumnValue(Columns.DataId, value); }
        }

        [XmlAttribute("UpdateUser")]
        [Bindable(true)]
        public decimal? UpdateUser
        {
            get { return GetColumnValue<decimal?>(Columns.UpdateUser); }
            set { SetColumnValue(Columns.UpdateUser, value); }
        }

        [XmlAttribute("UpdateDate")]
        [Bindable(true)]
        public decimal? UpdateDate
        {
            get { return GetColumnValue<decimal?>(Columns.UpdateDate); }
            set { SetColumnValue(Columns.UpdateDate, value); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(decimal varTestId, string varPatientId, short? varStatus, decimal? varDataId,
            decimal? varUpdateUser, decimal? varUpdateDate)
        {
            var item = new TTestContent();

            item.TestId = varTestId;

            item.PatientId = varPatientId;

            item.Status = varStatus;

            item.DataId = varDataId;

            item.UpdateUser = varUpdateUser;

            item.UpdateDate = varUpdateDate;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(decimal varTestId, string varPatientId, short? varStatus, decimal? varDataId,
            decimal? varUpdateUser, decimal? varUpdateDate)
        {
            var item = new TTestContent();

            item.TestId = varTestId;

            item.PatientId = varPatientId;

            item.Status = varStatus;

            item.DataId = varDataId;

            item.UpdateUser = varUpdateUser;

            item.UpdateDate = varUpdateDate;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn TestIdColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn PatientIdColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn StatusColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn DataIdColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn UpdateUserColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn UpdateDateColumn
        {
            get { return Schema.Columns[5]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string TestId = @"Test_ID";
            public static string PatientId = @"Patient_ID";
            public static string Status = @"Status";
            public static string DataId = @"Data_ID";
            public static string UpdateUser = @"Update_User";
            public static string UpdateDate = @"Update_Date";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no foreign key tables defined (0)


        //no ManyToMany tables defined (0)
    }
}