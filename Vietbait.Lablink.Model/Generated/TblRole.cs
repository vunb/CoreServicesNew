using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Web.UI.WebControls;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Strongly-typed collection for the TblRole class.
    /// </summary>
    [Serializable]
    public class TblRoleCollection : ActiveList<TblRole, TblRoleCollection>
    {
        /// <summary>
        ///     Filters an existing collection based on the set criteria. This is an in-memory filter
        ///     Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblRoleCollection</returns>
        public TblRoleCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                TblRole o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    ///     This is an ActiveRecord class which wraps the tbl_Roles table.
    /// </summary>
    [Serializable]
    public class TblRole : ActiveRecord<TblRole>, IActiveRecord
    {
        #region .ctors and Default Settings

        public TblRole()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public TblRole(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public TblRole(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public TblRole(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("tbl_Roles", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarIRole = new TableSchema.TableColumn(schema);
                colvarIRole.ColumnName = "iRole";
                colvarIRole.DataType = DbType.Int64;
                colvarIRole.MaxLength = 0;
                colvarIRole.AutoIncrement = true;
                colvarIRole.IsNullable = false;
                colvarIRole.IsPrimaryKey = true;
                colvarIRole.IsForeignKey = false;
                colvarIRole.IsReadOnly = false;
                colvarIRole.DefaultSetting = @"";
                colvarIRole.ForeignKeyTableName = "";
                schema.Columns.Add(colvarIRole);

                var colvarFpSBranchID = new TableSchema.TableColumn(schema);
                colvarFpSBranchID.ColumnName = "FP_sBranchID";
                colvarFpSBranchID.DataType = DbType.String;
                colvarFpSBranchID.MaxLength = 10;
                colvarFpSBranchID.AutoIncrement = false;
                colvarFpSBranchID.IsNullable = false;
                colvarFpSBranchID.IsPrimaryKey = true;
                colvarFpSBranchID.IsForeignKey = true;
                colvarFpSBranchID.IsReadOnly = false;
                colvarFpSBranchID.DefaultSetting = @"";

                colvarFpSBranchID.ForeignKeyTableName = "tbl_ManagementUnit";
                schema.Columns.Add(colvarFpSBranchID);

                var colvarIParentRole = new TableSchema.TableColumn(schema);
                colvarIParentRole.ColumnName = "iParentRole";
                colvarIParentRole.DataType = DbType.Int64;
                colvarIParentRole.MaxLength = 0;
                colvarIParentRole.AutoIncrement = false;
                colvarIParentRole.IsNullable = false;
                colvarIParentRole.IsPrimaryKey = false;
                colvarIParentRole.IsForeignKey = false;
                colvarIParentRole.IsReadOnly = false;
                colvarIParentRole.DefaultSetting = @"";
                colvarIParentRole.ForeignKeyTableName = "";
                schema.Columns.Add(colvarIParentRole);

                var colvarSRoleName = new TableSchema.TableColumn(schema);
                colvarSRoleName.ColumnName = "sRoleName";
                colvarSRoleName.DataType = DbType.String;
                colvarSRoleName.MaxLength = 100;
                colvarSRoleName.AutoIncrement = false;
                colvarSRoleName.IsNullable = false;
                colvarSRoleName.IsPrimaryKey = false;
                colvarSRoleName.IsForeignKey = false;
                colvarSRoleName.IsReadOnly = false;
                colvarSRoleName.DefaultSetting = @"";
                colvarSRoleName.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSRoleName);

                var colvarSEngRoleName = new TableSchema.TableColumn(schema);
                colvarSEngRoleName.ColumnName = "sEngRoleName";
                colvarSEngRoleName.DataType = DbType.String;
                colvarSEngRoleName.MaxLength = 100;
                colvarSEngRoleName.AutoIncrement = false;
                colvarSEngRoleName.IsNullable = true;
                colvarSEngRoleName.IsPrimaryKey = false;
                colvarSEngRoleName.IsForeignKey = false;
                colvarSEngRoleName.IsReadOnly = false;
                colvarSEngRoleName.DefaultSetting = @"";
                colvarSEngRoleName.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSEngRoleName);

                var colvarIOrder = new TableSchema.TableColumn(schema);
                colvarIOrder.ColumnName = "iOrder";
                colvarIOrder.DataType = DbType.Int32;
                colvarIOrder.MaxLength = 0;
                colvarIOrder.AutoIncrement = false;
                colvarIOrder.IsNullable = true;
                colvarIOrder.IsPrimaryKey = false;
                colvarIOrder.IsForeignKey = false;
                colvarIOrder.IsReadOnly = false;
                colvarIOrder.DefaultSetting = @"";
                colvarIOrder.ForeignKeyTableName = "";
                schema.Columns.Add(colvarIOrder);

                var colvarFkIFunctionID = new TableSchema.TableColumn(schema);
                colvarFkIFunctionID.ColumnName = "FK_iFunctionID";
                colvarFkIFunctionID.DataType = DbType.Int64;
                colvarFkIFunctionID.MaxLength = 0;
                colvarFkIFunctionID.AutoIncrement = false;
                colvarFkIFunctionID.IsNullable = true;
                colvarFkIFunctionID.IsPrimaryKey = false;
                colvarFkIFunctionID.IsForeignKey = false;
                colvarFkIFunctionID.IsReadOnly = false;

                colvarFkIFunctionID.DefaultSetting = @"((-1))";
                colvarFkIFunctionID.ForeignKeyTableName = "";
                schema.Columns.Add(colvarFkIFunctionID);

                var colvarTDateCreated = new TableSchema.TableColumn(schema);
                colvarTDateCreated.ColumnName = "tDateCreated";
                colvarTDateCreated.DataType = DbType.DateTime;
                colvarTDateCreated.MaxLength = 0;
                colvarTDateCreated.AutoIncrement = false;
                colvarTDateCreated.IsNullable = true;
                colvarTDateCreated.IsPrimaryKey = false;
                colvarTDateCreated.IsForeignKey = false;
                colvarTDateCreated.IsReadOnly = false;
                colvarTDateCreated.DefaultSetting = @"";
                colvarTDateCreated.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTDateCreated);

                var colvarSImgPath = new TableSchema.TableColumn(schema);
                colvarSImgPath.ColumnName = "sImgPath";
                colvarSImgPath.DataType = DbType.String;
                colvarSImgPath.MaxLength = 255;
                colvarSImgPath.AutoIncrement = false;
                colvarSImgPath.IsNullable = true;
                colvarSImgPath.IsPrimaryKey = false;
                colvarSImgPath.IsForeignKey = false;
                colvarSImgPath.IsReadOnly = false;
                colvarSImgPath.DefaultSetting = @"";
                colvarSImgPath.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSImgPath);

                var colvarSDesc = new TableSchema.TableColumn(schema);
                colvarSDesc.ColumnName = "sDesc";
                colvarSDesc.DataType = DbType.String;
                colvarSDesc.MaxLength = 255;
                colvarSDesc.AutoIncrement = false;
                colvarSDesc.IsNullable = true;
                colvarSDesc.IsPrimaryKey = false;
                colvarSDesc.IsForeignKey = false;
                colvarSDesc.IsReadOnly = false;
                colvarSDesc.DefaultSetting = @"";
                colvarSDesc.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSDesc);

                var colvarSIconPath = new TableSchema.TableColumn(schema);
                colvarSIconPath.ColumnName = "sIconPath";
                colvarSIconPath.DataType = DbType.String;
                colvarSIconPath.MaxLength = 255;
                colvarSIconPath.AutoIncrement = false;
                colvarSIconPath.IsNullable = true;
                colvarSIconPath.IsPrimaryKey = false;
                colvarSIconPath.IsForeignKey = false;
                colvarSIconPath.IsReadOnly = false;
                colvarSIconPath.DefaultSetting = @"";
                colvarSIconPath.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSIconPath);

                var colvarIntShortCutKey = new TableSchema.TableColumn(schema);
                colvarIntShortCutKey.ColumnName = "intShortCutKey";
                colvarIntShortCutKey.DataType = DbType.Int32;
                colvarIntShortCutKey.MaxLength = 0;
                colvarIntShortCutKey.AutoIncrement = false;
                colvarIntShortCutKey.IsNullable = true;
                colvarIntShortCutKey.IsPrimaryKey = false;
                colvarIntShortCutKey.IsForeignKey = false;
                colvarIntShortCutKey.IsReadOnly = false;
                colvarIntShortCutKey.DefaultSetting = @"";
                colvarIntShortCutKey.ForeignKeyTableName = "";
                schema.Columns.Add(colvarIntShortCutKey);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("tbl_Roles", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("IRole")]
        [Bindable(true)]
        public long IRole
        {
            get { return GetColumnValue<long>(Columns.IRole); }
            set { SetColumnValue(Columns.IRole, value); }
        }

        [XmlAttribute("FpSBranchID")]
        [Bindable(true)]
        public string FpSBranchID
        {
            get { return GetColumnValue<string>(Columns.FpSBranchID); }
            set { SetColumnValue(Columns.FpSBranchID, value); }
        }

        [XmlAttribute("IParentRole")]
        [Bindable(true)]
        public long IParentRole
        {
            get { return GetColumnValue<long>(Columns.IParentRole); }
            set { SetColumnValue(Columns.IParentRole, value); }
        }

        [XmlAttribute("SRoleName")]
        [Bindable(true)]
        public string SRoleName
        {
            get { return GetColumnValue<string>(Columns.SRoleName); }
            set { SetColumnValue(Columns.SRoleName, value); }
        }

        [XmlAttribute("SEngRoleName")]
        [Bindable(true)]
        public string SEngRoleName
        {
            get { return GetColumnValue<string>(Columns.SEngRoleName); }
            set { SetColumnValue(Columns.SEngRoleName, value); }
        }

        [XmlAttribute("IOrder")]
        [Bindable(true)]
        public int? IOrder
        {
            get { return GetColumnValue<int?>(Columns.IOrder); }
            set { SetColumnValue(Columns.IOrder, value); }
        }

        [XmlAttribute("FkIFunctionID")]
        [Bindable(true)]
        public long? FkIFunctionID
        {
            get { return GetColumnValue<long?>(Columns.FkIFunctionID); }
            set { SetColumnValue(Columns.FkIFunctionID, value); }
        }

        [XmlAttribute("TDateCreated")]
        [Bindable(true)]
        public DateTime? TDateCreated
        {
            get { return GetColumnValue<DateTime?>(Columns.TDateCreated); }
            set { SetColumnValue(Columns.TDateCreated, value); }
        }

        [XmlAttribute("SImgPath")]
        [Bindable(true)]
        public string SImgPath
        {
            get { return GetColumnValue<string>(Columns.SImgPath); }
            set { SetColumnValue(Columns.SImgPath, value); }
        }

        [XmlAttribute("SDesc")]
        [Bindable(true)]
        public string SDesc
        {
            get { return GetColumnValue<string>(Columns.SDesc); }
            set { SetColumnValue(Columns.SDesc, value); }
        }

        [XmlAttribute("SIconPath")]
        [Bindable(true)]
        public string SIconPath
        {
            get { return GetColumnValue<string>(Columns.SIconPath); }
            set { SetColumnValue(Columns.SIconPath, value); }
        }

        [XmlAttribute("IntShortCutKey")]
        [Bindable(true)]
        public int? IntShortCutKey
        {
            get { return GetColumnValue<int?>(Columns.IntShortCutKey); }
            set { SetColumnValue(Columns.IntShortCutKey, value); }
        }

        #endregion

        #region PrimaryKey Methods		

        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);

            SetPKValues();
        }


        public TblRolesForUserCollection TblRolesForUsers()
        {
            return new TblRolesForUserCollection().Where(TblRolesForUser.Columns.FpSBranchID, IRole).Load();
        }

        public TblRolesForUserCollection TblRolesForUsersFromTblRole()
        {
            return new TblRolesForUserCollection().Where(TblRolesForUser.Columns.IRoleID, IRole).Load();
        }

        #endregion

        #region ForeignKey Properties

        /// <summary>
        ///     Returns a TblManagementUnit ActiveRecord object related to this TblRole
        /// </summary>
        public TblManagementUnit TblManagementUnit
        {
            get { return TblManagementUnit.FetchByID(FpSBranchID); }
            set { SetColumnValue("FP_sBranchID", value.PkSBranchID); }
        }

        #endregion

        #region Many To Many Helpers

        public TblManagementUnitCollection GetTblManagementUnitCollection()
        {
            return GetTblManagementUnitCollection(IRole);
        }

        public static TblManagementUnitCollection GetTblManagementUnitCollection(long varIRole)
        {
            var cmd =
                new QueryCommand(
                    "SELECT * FROM [dbo].[tbl_ManagementUnit] INNER JOIN [tbl_RolesForUsers] ON [tbl_ManagementUnit].[PK_sBranchID] = [tbl_RolesForUsers].[FP_sBranchID] WHERE [tbl_RolesForUsers].[FP_sBranchID] = @FP_sBranchID",
                    Schema.Provider.Name);
            cmd.AddParameter("@FP_sBranchID", varIRole, DbType.String);
            IDataReader rdr = DataService.GetReader(cmd);
            var coll = new TblManagementUnitCollection();
            coll.LoadAndCloseReader(rdr);
            return coll;
        }

        public static void SaveTblManagementUnitMap(long varIRole, TblManagementUnitCollection items)
        {
            var coll = new QueryCommandCollection();
            //delete out the existing
            var cmdDel =
                new QueryCommand(
                    "DELETE FROM [tbl_RolesForUsers] WHERE [tbl_RolesForUsers].[FP_sBranchID] = @FP_sBranchID",
                    Schema.Provider.Name);
            cmdDel.AddParameter("@FP_sBranchID", varIRole, DbType.String);
            coll.Add(cmdDel);
            DataService.ExecuteTransaction(coll);
            foreach (TblManagementUnit item in items)
            {
                var varTblRolesForUser = new TblRolesForUser();
                varTblRolesForUser.SetColumnValue("FP_sBranchID", varIRole);
                varTblRolesForUser.SetColumnValue("FP_sBranchID", item.GetPrimaryKeyValue());
                varTblRolesForUser.Save();
            }
        }

        public static void SaveTblManagementUnitMap(long varIRole, ListItemCollection itemList)
        {
            var coll = new QueryCommandCollection();
            //delete out the existing
            var cmdDel =
                new QueryCommand(
                    "DELETE FROM [tbl_RolesForUsers] WHERE [tbl_RolesForUsers].[FP_sBranchID] = @FP_sBranchID",
                    Schema.Provider.Name);
            cmdDel.AddParameter("@FP_sBranchID", varIRole, DbType.String);
            coll.Add(cmdDel);
            DataService.ExecuteTransaction(coll);
            foreach (ListItem l in itemList)
            {
                if (l.Selected)
                {
                    var varTblRolesForUser = new TblRolesForUser();
                    varTblRolesForUser.SetColumnValue("FP_sBranchID", varIRole);
                    varTblRolesForUser.SetColumnValue("FP_sBranchID", l.Value);
                    varTblRolesForUser.Save();
                }
            }
        }

        public static void SaveTblManagementUnitMap(long varIRole, string[] itemList)
        {
            var coll = new QueryCommandCollection();
            //delete out the existing
            var cmdDel =
                new QueryCommand(
                    "DELETE FROM [tbl_RolesForUsers] WHERE [tbl_RolesForUsers].[FP_sBranchID] = @FP_sBranchID",
                    Schema.Provider.Name);
            cmdDel.AddParameter("@FP_sBranchID", varIRole, DbType.String);
            coll.Add(cmdDel);
            DataService.ExecuteTransaction(coll);
            foreach (string item in itemList)
            {
                var varTblRolesForUser = new TblRolesForUser();
                varTblRolesForUser.SetColumnValue("FP_sBranchID", varIRole);
                varTblRolesForUser.SetColumnValue("FP_sBranchID", item);
                varTblRolesForUser.Save();
            }
        }

        public static void DeleteTblManagementUnitMap(long varIRole)
        {
            var cmdDel =
                new QueryCommand(
                    "DELETE FROM [tbl_RolesForUsers] WHERE [tbl_RolesForUsers].[FP_sBranchID] = @FP_sBranchID",
                    Schema.Provider.Name);
            cmdDel.AddParameter("@FP_sBranchID", varIRole, DbType.String);
            DataService.ExecuteQuery(cmdDel);
        }


        public TblUserCollection GetTblUserCollection()
        {
            return GetTblUserCollection(IRole);
        }

        public static TblUserCollection GetTblUserCollection(long varIRole)
        {
            var cmd =
                new QueryCommand(
                    "SELECT * FROM [dbo].[tbl_Users] INNER JOIN [tbl_RolesForUsers] ON [tbl_Users].[FP_sBranchID] = [tbl_RolesForUsers].[FP_sBranchID] WHERE [tbl_RolesForUsers].[FP_sBranchID] = @FP_sBranchID",
                    Schema.Provider.Name);
            cmd.AddParameter("@FP_sBranchID", varIRole, DbType.String);
            IDataReader rdr = DataService.GetReader(cmd);
            var coll = new TblUserCollection();
            coll.LoadAndCloseReader(rdr);
            return coll;
        }

        public static void SaveTblUserMap(long varIRole, TblUserCollection items)
        {
            var coll = new QueryCommandCollection();
            //delete out the existing
            var cmdDel =
                new QueryCommand(
                    "DELETE FROM [tbl_RolesForUsers] WHERE [tbl_RolesForUsers].[FP_sBranchID] = @FP_sBranchID",
                    Schema.Provider.Name);
            cmdDel.AddParameter("@FP_sBranchID", varIRole, DbType.String);
            coll.Add(cmdDel);
            DataService.ExecuteTransaction(coll);
            foreach (TblUser item in items)
            {
                var varTblRolesForUser = new TblRolesForUser();
                varTblRolesForUser.SetColumnValue("FP_sBranchID", varIRole);
                varTblRolesForUser.SetColumnValue("FP_sBranchID", item.GetPrimaryKeyValue());
                varTblRolesForUser.Save();
            }
        }

        public static void SaveTblUserMap(long varIRole, ListItemCollection itemList)
        {
            var coll = new QueryCommandCollection();
            //delete out the existing
            var cmdDel =
                new QueryCommand(
                    "DELETE FROM [tbl_RolesForUsers] WHERE [tbl_RolesForUsers].[FP_sBranchID] = @FP_sBranchID",
                    Schema.Provider.Name);
            cmdDel.AddParameter("@FP_sBranchID", varIRole, DbType.String);
            coll.Add(cmdDel);
            DataService.ExecuteTransaction(coll);
            foreach (ListItem l in itemList)
            {
                if (l.Selected)
                {
                    var varTblRolesForUser = new TblRolesForUser();
                    varTblRolesForUser.SetColumnValue("FP_sBranchID", varIRole);
                    varTblRolesForUser.SetColumnValue("FP_sBranchID", l.Value);
                    varTblRolesForUser.Save();
                }
            }
        }

        public static void SaveTblUserMap(long varIRole, string[] itemList)
        {
            var coll = new QueryCommandCollection();
            //delete out the existing
            var cmdDel =
                new QueryCommand(
                    "DELETE FROM [tbl_RolesForUsers] WHERE [tbl_RolesForUsers].[FP_sBranchID] = @FP_sBranchID",
                    Schema.Provider.Name);
            cmdDel.AddParameter("@FP_sBranchID", varIRole, DbType.String);
            coll.Add(cmdDel);
            DataService.ExecuteTransaction(coll);
            foreach (string item in itemList)
            {
                var varTblRolesForUser = new TblRolesForUser();
                varTblRolesForUser.SetColumnValue("FP_sBranchID", varIRole);
                varTblRolesForUser.SetColumnValue("FP_sBranchID", item);
                varTblRolesForUser.Save();
            }
        }

        public static void DeleteTblUserMap(long varIRole)
        {
            var cmdDel =
                new QueryCommand(
                    "DELETE FROM [tbl_RolesForUsers] WHERE [tbl_RolesForUsers].[FP_sBranchID] = @FP_sBranchID",
                    Schema.Provider.Name);
            cmdDel.AddParameter("@FP_sBranchID", varIRole, DbType.String);
            DataService.ExecuteQuery(cmdDel);
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(string varFpSBranchID, long varIParentRole, string varSRoleName,
            string varSEngRoleName, int? varIOrder, long? varFkIFunctionID, DateTime? varTDateCreated,
            string varSImgPath, string varSDesc, string varSIconPath, int? varIntShortCutKey)
        {
            var item = new TblRole();

            item.FpSBranchID = varFpSBranchID;

            item.IParentRole = varIParentRole;

            item.SRoleName = varSRoleName;

            item.SEngRoleName = varSEngRoleName;

            item.IOrder = varIOrder;

            item.FkIFunctionID = varFkIFunctionID;

            item.TDateCreated = varTDateCreated;

            item.SImgPath = varSImgPath;

            item.SDesc = varSDesc;

            item.SIconPath = varSIconPath;

            item.IntShortCutKey = varIntShortCutKey;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(long varIRole, string varFpSBranchID, long varIParentRole, string varSRoleName,
            string varSEngRoleName, int? varIOrder, long? varFkIFunctionID, DateTime? varTDateCreated,
            string varSImgPath, string varSDesc, string varSIconPath, int? varIntShortCutKey)
        {
            var item = new TblRole();

            item.IRole = varIRole;

            item.FpSBranchID = varFpSBranchID;

            item.IParentRole = varIParentRole;

            item.SRoleName = varSRoleName;

            item.SEngRoleName = varSEngRoleName;

            item.IOrder = varIOrder;

            item.FkIFunctionID = varFkIFunctionID;

            item.TDateCreated = varTDateCreated;

            item.SImgPath = varSImgPath;

            item.SDesc = varSDesc;

            item.SIconPath = varSIconPath;

            item.IntShortCutKey = varIntShortCutKey;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn IRoleColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn FpSBranchIDColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn IParentRoleColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn SRoleNameColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn SEngRoleNameColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn IOrderColumn
        {
            get { return Schema.Columns[5]; }
        }


        public static TableSchema.TableColumn FkIFunctionIDColumn
        {
            get { return Schema.Columns[6]; }
        }


        public static TableSchema.TableColumn TDateCreatedColumn
        {
            get { return Schema.Columns[7]; }
        }


        public static TableSchema.TableColumn SImgPathColumn
        {
            get { return Schema.Columns[8]; }
        }


        public static TableSchema.TableColumn SDescColumn
        {
            get { return Schema.Columns[9]; }
        }


        public static TableSchema.TableColumn SIconPathColumn
        {
            get { return Schema.Columns[10]; }
        }


        public static TableSchema.TableColumn IntShortCutKeyColumn
        {
            get { return Schema.Columns[11]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string IRole = @"iRole";
            public static string FpSBranchID = @"FP_sBranchID";
            public static string IParentRole = @"iParentRole";
            public static string SRoleName = @"sRoleName";
            public static string SEngRoleName = @"sEngRoleName";
            public static string IOrder = @"iOrder";
            public static string FkIFunctionID = @"FK_iFunctionID";
            public static string TDateCreated = @"tDateCreated";
            public static string SImgPath = @"sImgPath";
            public static string SDesc = @"sDesc";
            public static string SIconPath = @"sIconPath";
            public static string IntShortCutKey = @"intShortCutKey";
        }

        #endregion

        #region Update PK Collections

        public void SetPKValues()
        {
        }

        #endregion

        #region Deep Save

        public void DeepSave()
        {
            Save();
        }

        #endregion
    }
}