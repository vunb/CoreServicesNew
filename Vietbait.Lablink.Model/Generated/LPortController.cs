using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Vietbait.Lablink.Model
{
    /// <summary>
    /// Controller class for L_PORT
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class LPortController
    {
        // Preload our schema..
        LPort thisSchemaLoad = new LPort();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public LPortCollection FetchAll()
        {
            LPortCollection coll = new LPortCollection();
            Query qry = new Query(LPort.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public LPortCollection FetchByID(object PortId)
        {
            LPortCollection coll = new LPortCollection().Where("Port_ID", PortId).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public LPortCollection FetchByQuery(Query qry)
        {
            LPortCollection coll = new LPortCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object PortId)
        {
            return (LPort.Delete(PortId) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object PortId)
        {
            return (LPort.Destroy(PortId) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(string PortName,string BaudRate,int DataBits,string StopBits,string Parity,short? Status,string Description,int Dtr,int Rts,string LocalAlias)
	    {
		    LPort item = new LPort();
		    
            item.PortName = PortName;
            
            item.BaudRate = BaudRate;
            
            item.DataBits = DataBits;
            
            item.StopBits = StopBits;
            
            item.Parity = Parity;
            
            item.Status = Status;
            
            item.Description = Description;
            
            item.Dtr = Dtr;
            
            item.Rts = Rts;
            
            item.LocalAlias = LocalAlias;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int PortId,string PortName,string BaudRate,int DataBits,string StopBits,string Parity,short? Status,string Description,int Dtr,int Rts,string LocalAlias)
	    {
		    LPort item = new LPort();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.PortId = PortId;
				
			item.PortName = PortName;
				
			item.BaudRate = BaudRate;
				
			item.DataBits = DataBits;
				
			item.StopBits = StopBits;
				
			item.Parity = Parity;
				
			item.Status = Status;
				
			item.Description = Description;
				
			item.Dtr = Dtr;
				
			item.Rts = Rts;
				
			item.LocalAlias = LocalAlias;
				
	        item.Save(UserName);
	    }
    }
}
