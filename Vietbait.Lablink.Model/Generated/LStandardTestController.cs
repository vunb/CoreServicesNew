using System;
using System.ComponentModel;
using System.Threading;
using System.Web;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Controller class for L_Standard_Test
    /// </summary>
    [DataObject]
    public class LStandardTestController
    {
        // Preload our schema..
        private LStandardTest thisSchemaLoad = new LStandardTest();
        private string userName = String.Empty;

        protected string UserName
        {
            get
            {
                if (userName.Length == 0)
                {
                    if (HttpContext.Current != null)
                    {
                        userName = HttpContext.Current.User.Identity.Name;
                    }
                    else
                    {
                        userName = Thread.CurrentPrincipal.Identity.Name;
                    }
                }
                return userName;
            }
        }

        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public LStandardTestCollection FetchAll()
        {
            var coll = new LStandardTestCollection();
            var qry = new Query(LStandardTest.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public LStandardTestCollection FetchByID(object TestDataId)
        {
            LStandardTestCollection coll = new LStandardTestCollection().Where("TestData_ID", TestDataId).Load();
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public LStandardTestCollection FetchByQuery(Query qry)
        {
            var coll = new LStandardTestCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object TestDataId)
        {
            return (LStandardTest.Delete(TestDataId) == 1);
        }

        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object TestDataId)
        {
            return (LStandardTest.Destroy(TestDataId) == 1);
        }


        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public void Insert(string TestDataId, int TestTypeId, int? DataSequence, string DataName, string MeasureUnit,
            short DataPoint, string NormalLevel, string NormalLevelW, bool? DataView, bool? DataPrint,
            string Description)
        {
            var item = new LStandardTest();

            item.TestDataId = TestDataId;

            item.TestTypeId = TestTypeId;

            item.DataSequence = DataSequence;

            item.DataName = DataName;

            item.MeasureUnit = MeasureUnit;

            item.DataPoint = DataPoint;

            item.NormalLevel = NormalLevel;

            item.NormalLevelW = NormalLevelW;

            item.DataView = DataView;

            item.DataPrint = DataPrint;

            item.Description = Description;


            item.Save(UserName);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public void Update(string TestDataId, int TestTypeId, int? DataSequence, string DataName, string MeasureUnit,
            short DataPoint, string NormalLevel, string NormalLevelW, bool? DataView, bool? DataPrint,
            string Description)
        {
            var item = new LStandardTest();
            item.MarkOld();
            item.IsLoaded = true;

            item.TestDataId = TestDataId;

            item.TestTypeId = TestTypeId;

            item.DataSequence = DataSequence;

            item.DataName = DataName;

            item.MeasureUnit = MeasureUnit;

            item.DataPoint = DataPoint;

            item.NormalLevel = NormalLevel;

            item.NormalLevelW = NormalLevelW;

            item.DataView = DataView;

            item.DataPrint = DataPrint;

            item.Description = Description;

            item.Save(UserName);
        }
    }
}