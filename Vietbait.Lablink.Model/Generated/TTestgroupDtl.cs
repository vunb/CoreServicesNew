using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Strongly-typed collection for the TTestgroupDtl class.
    /// </summary>
    [Serializable]
    public class TTestgroupDtlCollection : ActiveList<TTestgroupDtl, TTestgroupDtlCollection>
    {
        /// <summary>
        ///     Filters an existing collection based on the set criteria. This is an in-memory filter
        ///     Thanks to developingchris for this!
        /// </summary>
        /// <returns>TTestgroupDtlCollection</returns>
        public TTestgroupDtlCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                TTestgroupDtl o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    ///     This is an ActiveRecord class which wraps the T_TESTGROUP_DTL table.
    /// </summary>
    [Serializable]
    public class TTestgroupDtl : ActiveRecord<TTestgroupDtl>, IActiveRecord
    {
        #region .ctors and Default Settings

        public TTestgroupDtl()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public TTestgroupDtl(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public TTestgroupDtl(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public TTestgroupDtl(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("T_TESTGROUP_DTL", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarTestGroupId = new TableSchema.TableColumn(schema);
                colvarTestGroupId.ColumnName = "TestGroup_ID";
                colvarTestGroupId.DataType = DbType.Int32;
                colvarTestGroupId.MaxLength = 0;
                colvarTestGroupId.AutoIncrement = false;
                colvarTestGroupId.IsNullable = false;
                colvarTestGroupId.IsPrimaryKey = true;
                colvarTestGroupId.IsForeignKey = false;
                colvarTestGroupId.IsReadOnly = false;
                colvarTestGroupId.DefaultSetting = @"";
                colvarTestGroupId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTestGroupId);

                var colvarTestDataId = new TableSchema.TableColumn(schema);
                colvarTestDataId.ColumnName = "TestData_ID";
                colvarTestDataId.DataType = DbType.String;
                colvarTestDataId.MaxLength = 50;
                colvarTestDataId.AutoIncrement = false;
                colvarTestDataId.IsNullable = false;
                colvarTestDataId.IsPrimaryKey = true;
                colvarTestDataId.IsForeignKey = false;
                colvarTestDataId.IsReadOnly = false;
                colvarTestDataId.DefaultSetting = @"";
                colvarTestDataId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTestDataId);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("T_TESTGROUP_DTL", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("TestGroupId")]
        [Bindable(true)]
        public int TestGroupId
        {
            get { return GetColumnValue<int>(Columns.TestGroupId); }
            set { SetColumnValue(Columns.TestGroupId, value); }
        }

        [XmlAttribute("TestDataId")]
        [Bindable(true)]
        public string TestDataId
        {
            get { return GetColumnValue<string>(Columns.TestDataId); }
            set { SetColumnValue(Columns.TestDataId, value); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(int varTestGroupId, string varTestDataId)
        {
            var item = new TTestgroupDtl();

            item.TestGroupId = varTestGroupId;

            item.TestDataId = varTestDataId;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(int varTestGroupId, string varTestDataId)
        {
            var item = new TTestgroupDtl();

            item.TestGroupId = varTestGroupId;

            item.TestDataId = varTestDataId;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn TestGroupIdColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn TestDataIdColumn
        {
            get { return Schema.Columns[1]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string TestGroupId = @"TestGroup_ID";
            public static string TestDataId = @"TestData_ID";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no foreign key tables defined (0)


        //no ManyToMany tables defined (0)
    }
}