using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Strongly-typed collection for the TTestReason class.
    /// </summary>
    [Serializable]
    public class TTestReasonCollection : ActiveList<TTestReason, TTestReasonCollection>
    {
        /// <summary>
        ///     Filters an existing collection based on the set criteria. This is an in-memory filter
        ///     Thanks to developingchris for this!
        /// </summary>
        /// <returns>TTestReasonCollection</returns>
        public TTestReasonCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                TTestReason o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    ///     This is an ActiveRecord class which wraps the T_TEST_REASON table.
    /// </summary>
    [Serializable]
    public class TTestReason : ActiveRecord<TTestReason>, IActiveRecord
    {
        #region .ctors and Default Settings

        public TTestReason()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public TTestReason(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public TTestReason(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public TTestReason(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("T_TEST_REASON", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarId = new TableSchema.TableColumn(schema);
                colvarId.ColumnName = "ID";
                colvarId.DataType = DbType.Int32;
                colvarId.MaxLength = 0;
                colvarId.AutoIncrement = false;
                colvarId.IsNullable = false;
                colvarId.IsPrimaryKey = true;
                colvarId.IsForeignKey = false;
                colvarId.IsReadOnly = false;
                colvarId.DefaultSetting = @"";
                colvarId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarId);

                var colvarFullName = new TableSchema.TableColumn(schema);
                colvarFullName.ColumnName = "FullName";
                colvarFullName.DataType = DbType.String;
                colvarFullName.MaxLength = 200;
                colvarFullName.AutoIncrement = false;
                colvarFullName.IsNullable = true;
                colvarFullName.IsPrimaryKey = false;
                colvarFullName.IsForeignKey = false;
                colvarFullName.IsReadOnly = false;
                colvarFullName.DefaultSetting = @"";
                colvarFullName.ForeignKeyTableName = "";
                schema.Columns.Add(colvarFullName);

                var colvarActiveYn = new TableSchema.TableColumn(schema);
                colvarActiveYn.ColumnName = "Active_YN";
                colvarActiveYn.DataType = DbType.AnsiStringFixedLength;
                colvarActiveYn.MaxLength = 1;
                colvarActiveYn.AutoIncrement = false;
                colvarActiveYn.IsNullable = true;
                colvarActiveYn.IsPrimaryKey = false;
                colvarActiveYn.IsForeignKey = false;
                colvarActiveYn.IsReadOnly = false;

                colvarActiveYn.DefaultSetting = @"('Y')";
                colvarActiveYn.ForeignKeyTableName = "";
                schema.Columns.Add(colvarActiveYn);

                var colvarSortSeq = new TableSchema.TableColumn(schema);
                colvarSortSeq.ColumnName = "Sort_Seq";
                colvarSortSeq.DataType = DbType.Int32;
                colvarSortSeq.MaxLength = 0;
                colvarSortSeq.AutoIncrement = false;
                colvarSortSeq.IsNullable = true;
                colvarSortSeq.IsPrimaryKey = false;
                colvarSortSeq.IsForeignKey = false;
                colvarSortSeq.IsReadOnly = false;
                colvarSortSeq.DefaultSetting = @"";
                colvarSortSeq.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSortSeq);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("T_TEST_REASON", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("Id")]
        [Bindable(true)]
        public int Id
        {
            get { return GetColumnValue<int>(Columns.Id); }
            set { SetColumnValue(Columns.Id, value); }
        }

        [XmlAttribute("FullName")]
        [Bindable(true)]
        public string FullName
        {
            get { return GetColumnValue<string>(Columns.FullName); }
            set { SetColumnValue(Columns.FullName, value); }
        }

        [XmlAttribute("ActiveYn")]
        [Bindable(true)]
        public string ActiveYn
        {
            get { return GetColumnValue<string>(Columns.ActiveYn); }
            set { SetColumnValue(Columns.ActiveYn, value); }
        }

        [XmlAttribute("SortSeq")]
        [Bindable(true)]
        public int? SortSeq
        {
            get { return GetColumnValue<int?>(Columns.SortSeq); }
            set { SetColumnValue(Columns.SortSeq, value); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(int varId, string varFullName, string varActiveYn, int? varSortSeq)
        {
            var item = new TTestReason();

            item.Id = varId;

            item.FullName = varFullName;

            item.ActiveYn = varActiveYn;

            item.SortSeq = varSortSeq;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(int varId, string varFullName, string varActiveYn, int? varSortSeq)
        {
            var item = new TTestReason();

            item.Id = varId;

            item.FullName = varFullName;

            item.ActiveYn = varActiveYn;

            item.SortSeq = varSortSeq;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn FullNameColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn ActiveYnColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn SortSeqColumn
        {
            get { return Schema.Columns[3]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string Id = @"ID";
            public static string FullName = @"FullName";
            public static string ActiveYn = @"Active_YN";
            public static string SortSeq = @"Sort_Seq";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no foreign key tables defined (0)


        //no ManyToMany tables defined (0)
    }
}