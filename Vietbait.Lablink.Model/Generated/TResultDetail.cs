using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Strongly-typed collection for the TResultDetail class.
    /// </summary>
    [Serializable]
    public class TResultDetailCollection : ActiveList<TResultDetail, TResultDetailCollection>
    {
        /// <summary>
        ///     Filters an existing collection based on the set criteria. This is an in-memory filter
        ///     Thanks to developingchris for this!
        /// </summary>
        /// <returns>TResultDetailCollection</returns>
        public TResultDetailCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                TResultDetail o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    ///     This is an ActiveRecord class which wraps the T_RESULT_DETAIL table.
    /// </summary>
    [Serializable]
    public class TResultDetail : ActiveRecord<TResultDetail>, IActiveRecord
    {
        #region .ctors and Default Settings

        public TResultDetail()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public TResultDetail(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public TResultDetail(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public TResultDetail(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("T_RESULT_DETAIL", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarTestDetailId = new TableSchema.TableColumn(schema);
                colvarTestDetailId.ColumnName = "TestDetail_ID";
                colvarTestDetailId.DataType = DbType.Decimal;
                colvarTestDetailId.MaxLength = 0;
                colvarTestDetailId.AutoIncrement = true;
                colvarTestDetailId.IsNullable = false;
                colvarTestDetailId.IsPrimaryKey = true;
                colvarTestDetailId.IsForeignKey = false;
                colvarTestDetailId.IsReadOnly = false;
                colvarTestDetailId.DefaultSetting = @"";
                colvarTestDetailId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTestDetailId);

                var colvarTestId = new TableSchema.TableColumn(schema);
                colvarTestId.ColumnName = "Test_ID";
                colvarTestId.DataType = DbType.Decimal;
                colvarTestId.MaxLength = 0;
                colvarTestId.AutoIncrement = false;
                colvarTestId.IsNullable = true;
                colvarTestId.IsPrimaryKey = false;
                colvarTestId.IsForeignKey = false;
                colvarTestId.IsReadOnly = false;
                colvarTestId.DefaultSetting = @"";
                colvarTestId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTestId);

                var colvarPatientId = new TableSchema.TableColumn(schema);
                colvarPatientId.ColumnName = "Patient_ID";
                colvarPatientId.DataType = DbType.Decimal;
                colvarPatientId.MaxLength = 0;
                colvarPatientId.AutoIncrement = false;
                colvarPatientId.IsNullable = true;
                colvarPatientId.IsPrimaryKey = false;
                colvarPatientId.IsForeignKey = false;
                colvarPatientId.IsReadOnly = false;
                colvarPatientId.DefaultSetting = @"";
                colvarPatientId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarPatientId);

                var colvarTestTypeId = new TableSchema.TableColumn(schema);
                colvarTestTypeId.ColumnName = "TestType_ID";
                colvarTestTypeId.DataType = DbType.Int32;
                colvarTestTypeId.MaxLength = 0;
                colvarTestTypeId.AutoIncrement = false;
                colvarTestTypeId.IsNullable = true;
                colvarTestTypeId.IsPrimaryKey = false;
                colvarTestTypeId.IsForeignKey = false;
                colvarTestTypeId.IsReadOnly = false;
                colvarTestTypeId.DefaultSetting = @"";
                colvarTestTypeId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTestTypeId);

                var colvarTestDate = new TableSchema.TableColumn(schema);
                colvarTestDate.ColumnName = "Test_Date";
                colvarTestDate.DataType = DbType.DateTime;
                colvarTestDate.MaxLength = 0;
                colvarTestDate.AutoIncrement = false;
                colvarTestDate.IsNullable = true;
                colvarTestDate.IsPrimaryKey = false;
                colvarTestDate.IsForeignKey = false;
                colvarTestDate.IsReadOnly = false;
                colvarTestDate.DefaultSetting = @"";
                colvarTestDate.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTestDate);

                var colvarTestSequence = new TableSchema.TableColumn(schema);
                colvarTestSequence.ColumnName = "Test_Sequence";
                colvarTestSequence.DataType = DbType.String;
                colvarTestSequence.MaxLength = 50;
                colvarTestSequence.AutoIncrement = false;
                colvarTestSequence.IsNullable = true;
                colvarTestSequence.IsPrimaryKey = false;
                colvarTestSequence.IsForeignKey = false;
                colvarTestSequence.IsReadOnly = false;
                colvarTestSequence.DefaultSetting = @"";
                colvarTestSequence.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTestSequence);

                var colvarDataSequence = new TableSchema.TableColumn(schema);
                colvarDataSequence.ColumnName = "Data_Sequence";
                colvarDataSequence.DataType = DbType.Int32;
                colvarDataSequence.MaxLength = 0;
                colvarDataSequence.AutoIncrement = false;
                colvarDataSequence.IsNullable = true;
                colvarDataSequence.IsPrimaryKey = false;
                colvarDataSequence.IsForeignKey = false;
                colvarDataSequence.IsReadOnly = false;
                colvarDataSequence.DefaultSetting = @"";
                colvarDataSequence.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDataSequence);

                var colvarTestResult = new TableSchema.TableColumn(schema);
                colvarTestResult.ColumnName = "Test_Result";
                colvarTestResult.DataType = DbType.String;
                colvarTestResult.MaxLength = 4000;
                colvarTestResult.AutoIncrement = false;
                colvarTestResult.IsNullable = true;
                colvarTestResult.IsPrimaryKey = false;
                colvarTestResult.IsForeignKey = false;
                colvarTestResult.IsReadOnly = false;
                colvarTestResult.DefaultSetting = @"";
                colvarTestResult.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTestResult);

                var colvarNormalLevelW = new TableSchema.TableColumn(schema);
                colvarNormalLevelW.ColumnName = "Normal_levelW";
                colvarNormalLevelW.DataType = DbType.String;
                colvarNormalLevelW.MaxLength = 100;
                colvarNormalLevelW.AutoIncrement = false;
                colvarNormalLevelW.IsNullable = true;
                colvarNormalLevelW.IsPrimaryKey = false;
                colvarNormalLevelW.IsForeignKey = false;
                colvarNormalLevelW.IsReadOnly = false;
                colvarNormalLevelW.DefaultSetting = @"";
                colvarNormalLevelW.ForeignKeyTableName = "";
                schema.Columns.Add(colvarNormalLevelW);

                var colvarNormalLevel = new TableSchema.TableColumn(schema);
                colvarNormalLevel.ColumnName = "Normal_Level";
                colvarNormalLevel.DataType = DbType.String;
                colvarNormalLevel.MaxLength = 100;
                colvarNormalLevel.AutoIncrement = false;
                colvarNormalLevel.IsNullable = true;
                colvarNormalLevel.IsPrimaryKey = false;
                colvarNormalLevel.IsForeignKey = false;
                colvarNormalLevel.IsReadOnly = false;
                colvarNormalLevel.DefaultSetting = @"";
                colvarNormalLevel.ForeignKeyTableName = "";
                schema.Columns.Add(colvarNormalLevel);

                var colvarMeasureUnit = new TableSchema.TableColumn(schema);
                colvarMeasureUnit.ColumnName = "Measure_Unit";
                colvarMeasureUnit.DataType = DbType.String;
                colvarMeasureUnit.MaxLength = 50;
                colvarMeasureUnit.AutoIncrement = false;
                colvarMeasureUnit.IsNullable = true;
                colvarMeasureUnit.IsPrimaryKey = false;
                colvarMeasureUnit.IsForeignKey = false;
                colvarMeasureUnit.IsReadOnly = false;
                colvarMeasureUnit.DefaultSetting = @"";
                colvarMeasureUnit.ForeignKeyTableName = "";
                schema.Columns.Add(colvarMeasureUnit);

                var colvarParaName = new TableSchema.TableColumn(schema);
                colvarParaName.ColumnName = "Para_Name";
                colvarParaName.DataType = DbType.String;
                colvarParaName.MaxLength = 100;
                colvarParaName.AutoIncrement = false;
                colvarParaName.IsNullable = true;
                colvarParaName.IsPrimaryKey = false;
                colvarParaName.IsForeignKey = false;
                colvarParaName.IsReadOnly = false;
                colvarParaName.DefaultSetting = @"";
                colvarParaName.ForeignKeyTableName = "";
                schema.Columns.Add(colvarParaName);

                var colvarParaStatus = new TableSchema.TableColumn(schema);
                colvarParaStatus.ColumnName = "Para_Status";
                colvarParaStatus.DataType = DbType.Int16;
                colvarParaStatus.MaxLength = 0;
                colvarParaStatus.AutoIncrement = false;
                colvarParaStatus.IsNullable = false;
                colvarParaStatus.IsPrimaryKey = false;
                colvarParaStatus.IsForeignKey = false;
                colvarParaStatus.IsReadOnly = false;

                colvarParaStatus.DefaultSetting = @"((0))";
                colvarParaStatus.ForeignKeyTableName = "";
                schema.Columns.Add(colvarParaStatus);

                var colvarNote = new TableSchema.TableColumn(schema);
                colvarNote.ColumnName = "Note";
                colvarNote.DataType = DbType.String;
                colvarNote.MaxLength = 100;
                colvarNote.AutoIncrement = false;
                colvarNote.IsNullable = true;
                colvarNote.IsPrimaryKey = false;
                colvarNote.IsForeignKey = false;
                colvarNote.IsReadOnly = false;
                colvarNote.DefaultSetting = @"";
                colvarNote.ForeignKeyTableName = "";
                schema.Columns.Add(colvarNote);

                var colvarPrintData = new TableSchema.TableColumn(schema);
                colvarPrintData.ColumnName = "PrintData";
                colvarPrintData.DataType = DbType.Boolean;
                colvarPrintData.MaxLength = 0;
                colvarPrintData.AutoIncrement = false;
                colvarPrintData.IsNullable = true;
                colvarPrintData.IsPrimaryKey = false;
                colvarPrintData.IsForeignKey = false;
                colvarPrintData.IsReadOnly = false;

                colvarPrintData.DefaultSetting = @"((1))";
                colvarPrintData.ForeignKeyTableName = "";
                schema.Columns.Add(colvarPrintData);

                var colvarBarcode = new TableSchema.TableColumn(schema);
                colvarBarcode.ColumnName = "Barcode";
                colvarBarcode.DataType = DbType.String;
                colvarBarcode.MaxLength = 50;
                colvarBarcode.AutoIncrement = false;
                colvarBarcode.IsNullable = true;
                colvarBarcode.IsPrimaryKey = false;
                colvarBarcode.IsForeignKey = false;
                colvarBarcode.IsReadOnly = false;
                colvarBarcode.DefaultSetting = @"";
                colvarBarcode.ForeignKeyTableName = "";
                schema.Columns.Add(colvarBarcode);

                var colvarUpdateNum = new TableSchema.TableColumn(schema);
                colvarUpdateNum.ColumnName = "UpdateNum";
                colvarUpdateNum.DataType = DbType.Int32;
                colvarUpdateNum.MaxLength = 0;
                colvarUpdateNum.AutoIncrement = false;
                colvarUpdateNum.IsNullable = true;
                colvarUpdateNum.IsPrimaryKey = false;
                colvarUpdateNum.IsForeignKey = false;
                colvarUpdateNum.IsReadOnly = false;
                colvarUpdateNum.DefaultSetting = @"";
                colvarUpdateNum.ForeignKeyTableName = "";
                schema.Columns.Add(colvarUpdateNum);

                var colvarTestDataId = new TableSchema.TableColumn(schema);
                colvarTestDataId.ColumnName = "TestData_ID";
                colvarTestDataId.DataType = DbType.String;
                colvarTestDataId.MaxLength = 100;
                colvarTestDataId.AutoIncrement = false;
                colvarTestDataId.IsNullable = true;
                colvarTestDataId.IsPrimaryKey = false;
                colvarTestDataId.IsForeignKey = false;
                colvarTestDataId.IsReadOnly = false;
                colvarTestDataId.DefaultSetting = @"";
                colvarTestDataId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTestDataId);

                var colvarDeviceId = new TableSchema.TableColumn(schema);
                colvarDeviceId.ColumnName = "Device_ID";
                colvarDeviceId.DataType = DbType.Decimal;
                colvarDeviceId.MaxLength = 0;
                colvarDeviceId.AutoIncrement = false;
                colvarDeviceId.IsNullable = true;
                colvarDeviceId.IsPrimaryKey = false;
                colvarDeviceId.IsForeignKey = false;
                colvarDeviceId.IsReadOnly = false;
                colvarDeviceId.DefaultSetting = @"";
                colvarDeviceId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDeviceId);

                var colvarIsNormal = new TableSchema.TableColumn(schema);
                colvarIsNormal.ColumnName = "IsNormal";
                colvarIsNormal.DataType = DbType.Int16;
                colvarIsNormal.MaxLength = 0;
                colvarIsNormal.AutoIncrement = false;
                colvarIsNormal.IsNullable = true;
                colvarIsNormal.IsPrimaryKey = false;
                colvarIsNormal.IsForeignKey = false;
                colvarIsNormal.IsReadOnly = false;
                colvarIsNormal.DefaultSetting = @"";
                colvarIsNormal.ForeignKeyTableName = "";
                schema.Columns.Add(colvarIsNormal);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("T_RESULT_DETAIL", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("TestDetailId")]
        [Bindable(true)]
        public decimal TestDetailId
        {
            get { return GetColumnValue<decimal>(Columns.TestDetailId); }
            set { SetColumnValue(Columns.TestDetailId, value); }
        }

        [XmlAttribute("TestId")]
        [Bindable(true)]
        public decimal? TestId
        {
            get { return GetColumnValue<decimal?>(Columns.TestId); }
            set { SetColumnValue(Columns.TestId, value); }
        }

        [XmlAttribute("PatientId")]
        [Bindable(true)]
        public decimal? PatientId
        {
            get { return GetColumnValue<decimal?>(Columns.PatientId); }
            set { SetColumnValue(Columns.PatientId, value); }
        }

        [XmlAttribute("TestTypeId")]
        [Bindable(true)]
        public int? TestTypeId
        {
            get { return GetColumnValue<int?>(Columns.TestTypeId); }
            set { SetColumnValue(Columns.TestTypeId, value); }
        }

        [XmlAttribute("TestDate")]
        [Bindable(true)]
        public DateTime? TestDate
        {
            get { return GetColumnValue<DateTime?>(Columns.TestDate); }
            set { SetColumnValue(Columns.TestDate, value); }
        }

        [XmlAttribute("TestSequence")]
        [Bindable(true)]
        public string TestSequence
        {
            get { return GetColumnValue<string>(Columns.TestSequence); }
            set { SetColumnValue(Columns.TestSequence, value); }
        }

        [XmlAttribute("DataSequence")]
        [Bindable(true)]
        public int? DataSequence
        {
            get { return GetColumnValue<int?>(Columns.DataSequence); }
            set { SetColumnValue(Columns.DataSequence, value); }
        }

        [XmlAttribute("TestResult")]
        [Bindable(true)]
        public string TestResult
        {
            get { return GetColumnValue<string>(Columns.TestResult); }
            set { SetColumnValue(Columns.TestResult, value); }
        }

        [XmlAttribute("NormalLevelW")]
        [Bindable(true)]
        public string NormalLevelW
        {
            get { return GetColumnValue<string>(Columns.NormalLevelW); }
            set { SetColumnValue(Columns.NormalLevelW, value); }
        }

        [XmlAttribute("NormalLevel")]
        [Bindable(true)]
        public string NormalLevel
        {
            get { return GetColumnValue<string>(Columns.NormalLevel); }
            set { SetColumnValue(Columns.NormalLevel, value); }
        }

        [XmlAttribute("MeasureUnit")]
        [Bindable(true)]
        public string MeasureUnit
        {
            get { return GetColumnValue<string>(Columns.MeasureUnit); }
            set { SetColumnValue(Columns.MeasureUnit, value); }
        }

        [XmlAttribute("ParaName")]
        [Bindable(true)]
        public string ParaName
        {
            get { return GetColumnValue<string>(Columns.ParaName); }
            set { SetColumnValue(Columns.ParaName, value); }
        }

        [XmlAttribute("ParaStatus")]
        [Bindable(true)]
        public short ParaStatus
        {
            get { return GetColumnValue<short>(Columns.ParaStatus); }
            set { SetColumnValue(Columns.ParaStatus, value); }
        }

        [XmlAttribute("Note")]
        [Bindable(true)]
        public string Note
        {
            get { return GetColumnValue<string>(Columns.Note); }
            set { SetColumnValue(Columns.Note, value); }
        }

        [XmlAttribute("PrintData")]
        [Bindable(true)]
        public bool? PrintData
        {
            get { return GetColumnValue<bool?>(Columns.PrintData); }
            set { SetColumnValue(Columns.PrintData, value); }
        }

        [XmlAttribute("Barcode")]
        [Bindable(true)]
        public string Barcode
        {
            get { return GetColumnValue<string>(Columns.Barcode); }
            set { SetColumnValue(Columns.Barcode, value); }
        }

        [XmlAttribute("UpdateNum")]
        [Bindable(true)]
        public int? UpdateNum
        {
            get { return GetColumnValue<int?>(Columns.UpdateNum); }
            set { SetColumnValue(Columns.UpdateNum, value); }
        }

        [XmlAttribute("TestDataId")]
        [Bindable(true)]
        public string TestDataId
        {
            get { return GetColumnValue<string>(Columns.TestDataId); }
            set { SetColumnValue(Columns.TestDataId, value); }
        }

        [XmlAttribute("DeviceId")]
        [Bindable(true)]
        public decimal? DeviceId
        {
            get { return GetColumnValue<decimal?>(Columns.DeviceId); }
            set { SetColumnValue(Columns.DeviceId, value); }
        }

        [XmlAttribute("IsNormal")]
        [Bindable(true)]
        public short? IsNormal
        {
            get { return GetColumnValue<short?>(Columns.IsNormal); }
            set { SetColumnValue(Columns.IsNormal, value); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(decimal? varTestId, decimal? varPatientId, int? varTestTypeId, DateTime? varTestDate,
            string varTestSequence, int? varDataSequence, string varTestResult, string varNormalLevelW,
            string varNormalLevel, string varMeasureUnit, string varParaName, short varParaStatus, string varNote,
            bool? varPrintData, string varBarcode, int? varUpdateNum, string varTestDataId, decimal? varDeviceId,
            short? varIsNormal)
        {
            var item = new TResultDetail();

            item.TestId = varTestId;

            item.PatientId = varPatientId;

            item.TestTypeId = varTestTypeId;

            item.TestDate = varTestDate;

            item.TestSequence = varTestSequence;

            item.DataSequence = varDataSequence;

            item.TestResult = varTestResult;

            item.NormalLevelW = varNormalLevelW;

            item.NormalLevel = varNormalLevel;

            item.MeasureUnit = varMeasureUnit;

            item.ParaName = varParaName;

            item.ParaStatus = varParaStatus;

            item.Note = varNote;

            item.PrintData = varPrintData;

            item.Barcode = varBarcode;

            item.UpdateNum = varUpdateNum;

            item.TestDataId = varTestDataId;

            item.DeviceId = varDeviceId;

            item.IsNormal = varIsNormal;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(decimal varTestDetailId, decimal? varTestId, decimal? varPatientId, int? varTestTypeId,
            DateTime? varTestDate, string varTestSequence, int? varDataSequence, string varTestResult,
            string varNormalLevelW, string varNormalLevel, string varMeasureUnit, string varParaName,
            short varParaStatus, string varNote, bool? varPrintData, string varBarcode, int? varUpdateNum,
            string varTestDataId, decimal? varDeviceId, short? varIsNormal)
        {
            var item = new TResultDetail();

            item.TestDetailId = varTestDetailId;

            item.TestId = varTestId;

            item.PatientId = varPatientId;

            item.TestTypeId = varTestTypeId;

            item.TestDate = varTestDate;

            item.TestSequence = varTestSequence;

            item.DataSequence = varDataSequence;

            item.TestResult = varTestResult;

            item.NormalLevelW = varNormalLevelW;

            item.NormalLevel = varNormalLevel;

            item.MeasureUnit = varMeasureUnit;

            item.ParaName = varParaName;

            item.ParaStatus = varParaStatus;

            item.Note = varNote;

            item.PrintData = varPrintData;

            item.Barcode = varBarcode;

            item.UpdateNum = varUpdateNum;

            item.TestDataId = varTestDataId;

            item.DeviceId = varDeviceId;

            item.IsNormal = varIsNormal;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn TestDetailIdColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn TestIdColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn PatientIdColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn TestTypeIdColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn TestDateColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn TestSequenceColumn
        {
            get { return Schema.Columns[5]; }
        }


        public static TableSchema.TableColumn DataSequenceColumn
        {
            get { return Schema.Columns[6]; }
        }


        public static TableSchema.TableColumn TestResultColumn
        {
            get { return Schema.Columns[7]; }
        }


        public static TableSchema.TableColumn NormalLevelWColumn
        {
            get { return Schema.Columns[8]; }
        }


        public static TableSchema.TableColumn NormalLevelColumn
        {
            get { return Schema.Columns[9]; }
        }


        public static TableSchema.TableColumn MeasureUnitColumn
        {
            get { return Schema.Columns[10]; }
        }


        public static TableSchema.TableColumn ParaNameColumn
        {
            get { return Schema.Columns[11]; }
        }


        public static TableSchema.TableColumn ParaStatusColumn
        {
            get { return Schema.Columns[12]; }
        }


        public static TableSchema.TableColumn NoteColumn
        {
            get { return Schema.Columns[13]; }
        }


        public static TableSchema.TableColumn PrintDataColumn
        {
            get { return Schema.Columns[14]; }
        }


        public static TableSchema.TableColumn BarcodeColumn
        {
            get { return Schema.Columns[15]; }
        }


        public static TableSchema.TableColumn UpdateNumColumn
        {
            get { return Schema.Columns[16]; }
        }


        public static TableSchema.TableColumn TestDataIdColumn
        {
            get { return Schema.Columns[17]; }
        }


        public static TableSchema.TableColumn DeviceIdColumn
        {
            get { return Schema.Columns[18]; }
        }


        public static TableSchema.TableColumn IsNormalColumn
        {
            get { return Schema.Columns[19]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string TestDetailId = @"TestDetail_ID";
            public static string TestId = @"Test_ID";
            public static string PatientId = @"Patient_ID";
            public static string TestTypeId = @"TestType_ID";
            public static string TestDate = @"Test_Date";
            public static string TestSequence = @"Test_Sequence";
            public static string DataSequence = @"Data_Sequence";
            public static string TestResult = @"Test_Result";
            public static string NormalLevelW = @"Normal_levelW";
            public static string NormalLevel = @"Normal_Level";
            public static string MeasureUnit = @"Measure_Unit";
            public static string ParaName = @"Para_Name";
            public static string ParaStatus = @"Para_Status";
            public static string Note = @"Note";
            public static string PrintData = @"PrintData";
            public static string Barcode = @"Barcode";
            public static string UpdateNum = @"UpdateNum";
            public static string TestDataId = @"TestData_ID";
            public static string DeviceId = @"Device_ID";
            public static string IsNormal = @"IsNormal";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no foreign key tables defined (0)


        //no ManyToMany tables defined (0)
    }
}