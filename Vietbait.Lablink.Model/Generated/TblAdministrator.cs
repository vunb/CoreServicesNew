using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Strongly-typed collection for the TblAdministrator class.
    /// </summary>
    [Serializable]
    public class TblAdministratorCollection : ActiveList<TblAdministrator, TblAdministratorCollection>
    {
        /// <summary>
        ///     Filters an existing collection based on the set criteria. This is an in-memory filter
        ///     Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblAdministratorCollection</returns>
        public TblAdministratorCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                TblAdministrator o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    ///     This is an ActiveRecord class which wraps the tbl_Administrator table.
    /// </summary>
    [Serializable]
    public class TblAdministrator : ActiveRecord<TblAdministrator>, IActiveRecord
    {
        #region .ctors and Default Settings

        public TblAdministrator()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public TblAdministrator(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public TblAdministrator(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public TblAdministrator(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("tbl_Administrator", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarPkSAdminID = new TableSchema.TableColumn(schema);
                colvarPkSAdminID.ColumnName = "PK_sAdminID";
                colvarPkSAdminID.DataType = DbType.String;
                colvarPkSAdminID.MaxLength = 50;
                colvarPkSAdminID.AutoIncrement = false;
                colvarPkSAdminID.IsNullable = false;
                colvarPkSAdminID.IsPrimaryKey = true;
                colvarPkSAdminID.IsForeignKey = false;
                colvarPkSAdminID.IsReadOnly = false;
                colvarPkSAdminID.DefaultSetting = @"";
                colvarPkSAdminID.ForeignKeyTableName = "";
                schema.Columns.Add(colvarPkSAdminID);

                var colvarFpSBranchID = new TableSchema.TableColumn(schema);
                colvarFpSBranchID.ColumnName = "FP_sBranchID";
                colvarFpSBranchID.DataType = DbType.String;
                colvarFpSBranchID.MaxLength = 10;
                colvarFpSBranchID.AutoIncrement = false;
                colvarFpSBranchID.IsNullable = false;
                colvarFpSBranchID.IsPrimaryKey = true;
                colvarFpSBranchID.IsForeignKey = true;
                colvarFpSBranchID.IsReadOnly = false;
                colvarFpSBranchID.DefaultSetting = @"";

                colvarFpSBranchID.ForeignKeyTableName = "tbl_ManagementUnit";
                schema.Columns.Add(colvarFpSBranchID);

                var colvarPkSCreator = new TableSchema.TableColumn(schema);
                colvarPkSCreator.ColumnName = "PK_sCreator";
                colvarPkSCreator.DataType = DbType.String;
                colvarPkSCreator.MaxLength = 50;
                colvarPkSCreator.AutoIncrement = false;
                colvarPkSCreator.IsNullable = true;
                colvarPkSCreator.IsPrimaryKey = false;
                colvarPkSCreator.IsForeignKey = false;
                colvarPkSCreator.IsReadOnly = false;
                colvarPkSCreator.DefaultSetting = @"";
                colvarPkSCreator.ForeignKeyTableName = "";
                schema.Columns.Add(colvarPkSCreator);

                var colvarSPWD = new TableSchema.TableColumn(schema);
                colvarSPWD.ColumnName = "sPWD";
                colvarSPWD.DataType = DbType.String;
                colvarSPWD.MaxLength = 100;
                colvarSPWD.AutoIncrement = false;
                colvarSPWD.IsNullable = true;
                colvarSPWD.IsPrimaryKey = false;
                colvarSPWD.IsForeignKey = false;
                colvarSPWD.IsReadOnly = false;
                colvarSPWD.DefaultSetting = @"";
                colvarSPWD.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSPWD);

                var colvarIMonth = new TableSchema.TableColumn(schema);
                colvarIMonth.ColumnName = "iMonth";
                colvarIMonth.DataType = DbType.Int32;
                colvarIMonth.MaxLength = 0;
                colvarIMonth.AutoIncrement = false;
                colvarIMonth.IsNullable = true;
                colvarIMonth.IsPrimaryKey = false;
                colvarIMonth.IsForeignKey = false;
                colvarIMonth.IsReadOnly = false;
                colvarIMonth.DefaultSetting = @"";
                colvarIMonth.ForeignKeyTableName = "";
                schema.Columns.Add(colvarIMonth);

                var colvarIYear = new TableSchema.TableColumn(schema);
                colvarIYear.ColumnName = "iYear";
                colvarIYear.DataType = DbType.Int32;
                colvarIYear.MaxLength = 0;
                colvarIYear.AutoIncrement = false;
                colvarIYear.IsNullable = true;
                colvarIYear.IsPrimaryKey = false;
                colvarIYear.IsForeignKey = false;
                colvarIYear.IsReadOnly = false;
                colvarIYear.DefaultSetting = @"";
                colvarIYear.ForeignKeyTableName = "";
                schema.Columns.Add(colvarIYear);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("tbl_Administrator", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("PkSAdminID")]
        [Bindable(true)]
        public string PkSAdminID
        {
            get { return GetColumnValue<string>(Columns.PkSAdminID); }
            set { SetColumnValue(Columns.PkSAdminID, value); }
        }

        [XmlAttribute("FpSBranchID")]
        [Bindable(true)]
        public string FpSBranchID
        {
            get { return GetColumnValue<string>(Columns.FpSBranchID); }
            set { SetColumnValue(Columns.FpSBranchID, value); }
        }

        [XmlAttribute("PkSCreator")]
        [Bindable(true)]
        public string PkSCreator
        {
            get { return GetColumnValue<string>(Columns.PkSCreator); }
            set { SetColumnValue(Columns.PkSCreator, value); }
        }

        [XmlAttribute("SPWD")]
        [Bindable(true)]
        public string SPWD
        {
            get { return GetColumnValue<string>(Columns.SPWD); }
            set { SetColumnValue(Columns.SPWD, value); }
        }

        [XmlAttribute("IMonth")]
        [Bindable(true)]
        public int? IMonth
        {
            get { return GetColumnValue<int?>(Columns.IMonth); }
            set { SetColumnValue(Columns.IMonth, value); }
        }

        [XmlAttribute("IYear")]
        [Bindable(true)]
        public int? IYear
        {
            get { return GetColumnValue<int?>(Columns.IYear); }
            set { SetColumnValue(Columns.IYear, value); }
        }

        #endregion

        #region ForeignKey Properties

        /// <summary>
        ///     Returns a TblManagementUnit ActiveRecord object related to this TblAdministrator
        /// </summary>
        public TblManagementUnit TblManagementUnit
        {
            get { return TblManagementUnit.FetchByID(FpSBranchID); }
            set { SetColumnValue("FP_sBranchID", value.PkSBranchID); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(string varPkSAdminID, string varFpSBranchID, string varPkSCreator, string varSPWD,
            int? varIMonth, int? varIYear)
        {
            var item = new TblAdministrator();

            item.PkSAdminID = varPkSAdminID;

            item.FpSBranchID = varFpSBranchID;

            item.PkSCreator = varPkSCreator;

            item.SPWD = varSPWD;

            item.IMonth = varIMonth;

            item.IYear = varIYear;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(string varPkSAdminID, string varFpSBranchID, string varPkSCreator, string varSPWD,
            int? varIMonth, int? varIYear)
        {
            var item = new TblAdministrator();

            item.PkSAdminID = varPkSAdminID;

            item.FpSBranchID = varFpSBranchID;

            item.PkSCreator = varPkSCreator;

            item.SPWD = varSPWD;

            item.IMonth = varIMonth;

            item.IYear = varIYear;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn PkSAdminIDColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn FpSBranchIDColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn PkSCreatorColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn SPWDColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn IMonthColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn IYearColumn
        {
            get { return Schema.Columns[5]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string PkSAdminID = @"PK_sAdminID";
            public static string FpSBranchID = @"FP_sBranchID";
            public static string PkSCreator = @"PK_sCreator";
            public static string SPWD = @"sPWD";
            public static string IMonth = @"iMonth";
            public static string IYear = @"iYear";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no ManyToMany tables defined (0)
    }
}