using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Vietbait.Lablink.Model
{
    /// <summary>
    /// Controller class for T_Result_Lot
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TResultLotController
    {
        // Preload our schema..
        TResultLot thisSchemaLoad = new TResultLot();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TResultLotCollection FetchAll()
        {
            TResultLotCollection coll = new TResultLotCollection();
            Query qry = new Query(TResultLot.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TResultLotCollection FetchByID(object LotId)
        {
            TResultLotCollection coll = new TResultLotCollection().Where("LotId", LotId).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TResultLotCollection FetchByQuery(Query qry)
        {
            TResultLotCollection coll = new TResultLotCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object LotId)
        {
            return (TResultLot.Delete(LotId) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object LotId)
        {
            return (TResultLot.Destroy(LotId) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(string OperatorX,DateTime? BeginTime,string LotNumber,DateTime? ExpirationDate,string AssayName,string Description)
	    {
		    TResultLot item = new TResultLot();
		    
            item.OperatorX = OperatorX;
            
            item.BeginTime = BeginTime;
            
            item.LotNumber = LotNumber;
            
            item.ExpirationDate = ExpirationDate;
            
            item.AssayName = AssayName;
            
            item.Description = Description;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(long LotId,string OperatorX,DateTime? BeginTime,string LotNumber,DateTime? ExpirationDate,string AssayName,string Description)
	    {
		    TResultLot item = new TResultLot();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.LotId = LotId;
				
			item.OperatorX = OperatorX;
				
			item.BeginTime = BeginTime;
				
			item.LotNumber = LotNumber;
				
			item.ExpirationDate = ExpirationDate;
				
			item.AssayName = AssayName;
				
			item.Description = Description;
				
	        item.Save(UserName);
	    }
    }
}
