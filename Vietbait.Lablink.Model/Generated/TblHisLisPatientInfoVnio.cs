using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Strongly-typed collection for the TblHisLisPatientInfoVnio class.
    /// </summary>
    [Serializable]
    public class TblHisLisPatientInfoVnioCollection :
        ActiveList<TblHisLisPatientInfoVnio, TblHisLisPatientInfoVnioCollection>
    {
        /// <summary>
        ///     Filters an existing collection based on the set criteria. This is an in-memory filter
        ///     Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblHisLisPatientInfoVnioCollection</returns>
        public TblHisLisPatientInfoVnioCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                TblHisLisPatientInfoVnio o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    ///     This is an ActiveRecord class which wraps the tblHisLis_PatientInfo_VNIO table.
    /// </summary>
    [Serializable]
    public class TblHisLisPatientInfoVnio : ActiveRecord<TblHisLisPatientInfoVnio>, IActiveRecord
    {
        #region .ctors and Default Settings

        public TblHisLisPatientInfoVnio()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public TblHisLisPatientInfoVnio(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public TblHisLisPatientInfoVnio(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public TblHisLisPatientInfoVnio(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("tblHisLis_PatientInfo_VNIO", TableType.Table,
                    DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarId = new TableSchema.TableColumn(schema);
                colvarId.ColumnName = "Id";
                colvarId.DataType = DbType.Int64;
                colvarId.MaxLength = 0;
                colvarId.AutoIncrement = true;
                colvarId.IsNullable = false;
                colvarId.IsPrimaryKey = true;
                colvarId.IsForeignKey = false;
                colvarId.IsReadOnly = false;
                colvarId.DefaultSetting = @"";
                colvarId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarId);

                var colvarBacSyDieuTri = new TableSchema.TableColumn(schema);
                colvarBacSyDieuTri.ColumnName = "bacSyDieuTri";
                colvarBacSyDieuTri.DataType = DbType.String;
                colvarBacSyDieuTri.MaxLength = 200;
                colvarBacSyDieuTri.AutoIncrement = false;
                colvarBacSyDieuTri.IsNullable = true;
                colvarBacSyDieuTri.IsPrimaryKey = false;
                colvarBacSyDieuTri.IsForeignKey = false;
                colvarBacSyDieuTri.IsReadOnly = false;
                colvarBacSyDieuTri.DefaultSetting = @"";
                colvarBacSyDieuTri.ForeignKeyTableName = "";
                schema.Columns.Add(colvarBacSyDieuTri);

                var colvarBuong = new TableSchema.TableColumn(schema);
                colvarBuong.ColumnName = "buong";
                colvarBuong.DataType = DbType.String;
                colvarBuong.MaxLength = 100;
                colvarBuong.AutoIncrement = false;
                colvarBuong.IsNullable = true;
                colvarBuong.IsPrimaryKey = false;
                colvarBuong.IsForeignKey = false;
                colvarBuong.IsReadOnly = false;
                colvarBuong.DefaultSetting = @"";
                colvarBuong.ForeignKeyTableName = "";
                schema.Columns.Add(colvarBuong);

                var colvarDiaChi = new TableSchema.TableColumn(schema);
                colvarDiaChi.ColumnName = "diaChi";
                colvarDiaChi.DataType = DbType.String;
                colvarDiaChi.MaxLength = 200;
                colvarDiaChi.AutoIncrement = false;
                colvarDiaChi.IsNullable = true;
                colvarDiaChi.IsPrimaryKey = false;
                colvarDiaChi.IsForeignKey = false;
                colvarDiaChi.IsReadOnly = false;
                colvarDiaChi.DefaultSetting = @"";
                colvarDiaChi.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDiaChi);

                var colvarGioiTinh = new TableSchema.TableColumn(schema);
                colvarGioiTinh.ColumnName = "gioiTinh";
                colvarGioiTinh.DataType = DbType.Boolean;
                colvarGioiTinh.MaxLength = 0;
                colvarGioiTinh.AutoIncrement = false;
                colvarGioiTinh.IsNullable = true;
                colvarGioiTinh.IsPrimaryKey = false;
                colvarGioiTinh.IsForeignKey = false;
                colvarGioiTinh.IsReadOnly = false;
                colvarGioiTinh.DefaultSetting = @"";
                colvarGioiTinh.ForeignKeyTableName = "";
                schema.Columns.Add(colvarGioiTinh);

                var colvarGiuong = new TableSchema.TableColumn(schema);
                colvarGiuong.ColumnName = "giuong";
                colvarGiuong.DataType = DbType.String;
                colvarGiuong.MaxLength = 50;
                colvarGiuong.AutoIncrement = false;
                colvarGiuong.IsNullable = true;
                colvarGiuong.IsPrimaryKey = false;
                colvarGiuong.IsForeignKey = false;
                colvarGiuong.IsReadOnly = false;
                colvarGiuong.DefaultSetting = @"";
                colvarGiuong.ForeignKeyTableName = "";
                schema.Columns.Add(colvarGiuong);

                var colvarIdBacSyDieuTri = new TableSchema.TableColumn(schema);
                colvarIdBacSyDieuTri.ColumnName = "idBacSyDieuTri";
                colvarIdBacSyDieuTri.DataType = DbType.String;
                colvarIdBacSyDieuTri.MaxLength = 150;
                colvarIdBacSyDieuTri.AutoIncrement = false;
                colvarIdBacSyDieuTri.IsNullable = true;
                colvarIdBacSyDieuTri.IsPrimaryKey = false;
                colvarIdBacSyDieuTri.IsForeignKey = false;
                colvarIdBacSyDieuTri.IsReadOnly = false;
                colvarIdBacSyDieuTri.DefaultSetting = @"";
                colvarIdBacSyDieuTri.ForeignKeyTableName = "";
                schema.Columns.Add(colvarIdBacSyDieuTri);

                var colvarIdKhoa = new TableSchema.TableColumn(schema);
                colvarIdKhoa.ColumnName = "idKhoa";
                colvarIdKhoa.DataType = DbType.Int16;
                colvarIdKhoa.MaxLength = 0;
                colvarIdKhoa.AutoIncrement = false;
                colvarIdKhoa.IsNullable = true;
                colvarIdKhoa.IsPrimaryKey = false;
                colvarIdKhoa.IsForeignKey = false;
                colvarIdKhoa.IsReadOnly = false;
                colvarIdKhoa.DefaultSetting = @"";
                colvarIdKhoa.ForeignKeyTableName = "";
                schema.Columns.Add(colvarIdKhoa);

                var colvarKhoa = new TableSchema.TableColumn(schema);
                colvarKhoa.ColumnName = "khoa";
                colvarKhoa.DataType = DbType.String;
                colvarKhoa.MaxLength = 100;
                colvarKhoa.AutoIncrement = false;
                colvarKhoa.IsNullable = true;
                colvarKhoa.IsPrimaryKey = false;
                colvarKhoa.IsForeignKey = false;
                colvarKhoa.IsReadOnly = false;
                colvarKhoa.DefaultSetting = @"";
                colvarKhoa.ForeignKeyTableName = "";
                schema.Columns.Add(colvarKhoa);

                var colvarMaBenhNhan = new TableSchema.TableColumn(schema);
                colvarMaBenhNhan.ColumnName = "maBenhNhan";
                colvarMaBenhNhan.DataType = DbType.String;
                colvarMaBenhNhan.MaxLength = 50;
                colvarMaBenhNhan.AutoIncrement = false;
                colvarMaBenhNhan.IsNullable = true;
                colvarMaBenhNhan.IsPrimaryKey = false;
                colvarMaBenhNhan.IsForeignKey = false;
                colvarMaBenhNhan.IsReadOnly = false;
                colvarMaBenhNhan.DefaultSetting = @"";
                colvarMaBenhNhan.ForeignKeyTableName = "";
                schema.Columns.Add(colvarMaBenhNhan);

                var colvarNoiTru = new TableSchema.TableColumn(schema);
                colvarNoiTru.ColumnName = "noiTru";
                colvarNoiTru.DataType = DbType.Boolean;
                colvarNoiTru.MaxLength = 0;
                colvarNoiTru.AutoIncrement = false;
                colvarNoiTru.IsNullable = true;
                colvarNoiTru.IsPrimaryKey = false;
                colvarNoiTru.IsForeignKey = false;
                colvarNoiTru.IsReadOnly = false;
                colvarNoiTru.DefaultSetting = @"";
                colvarNoiTru.ForeignKeyTableName = "";
                schema.Columns.Add(colvarNoiTru);

                var colvarPhong = new TableSchema.TableColumn(schema);
                colvarPhong.ColumnName = "phong";
                colvarPhong.DataType = DbType.String;
                colvarPhong.MaxLength = 50;
                colvarPhong.AutoIncrement = false;
                colvarPhong.IsNullable = true;
                colvarPhong.IsPrimaryKey = false;
                colvarPhong.IsForeignKey = false;
                colvarPhong.IsReadOnly = false;
                colvarPhong.DefaultSetting = @"";
                colvarPhong.ForeignKeyTableName = "";
                schema.Columns.Add(colvarPhong);

                var colvarTenBenhNhan = new TableSchema.TableColumn(schema);
                colvarTenBenhNhan.ColumnName = "tenBenhNhan";
                colvarTenBenhNhan.DataType = DbType.String;
                colvarTenBenhNhan.MaxLength = 200;
                colvarTenBenhNhan.AutoIncrement = false;
                colvarTenBenhNhan.IsNullable = true;
                colvarTenBenhNhan.IsPrimaryKey = false;
                colvarTenBenhNhan.IsForeignKey = false;
                colvarTenBenhNhan.IsReadOnly = false;
                colvarTenBenhNhan.DefaultSetting = @"";
                colvarTenBenhNhan.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTenBenhNhan);

                var colvarTuoi = new TableSchema.TableColumn(schema);
                colvarTuoi.ColumnName = "tuoi";
                colvarTuoi.DataType = DbType.Int16;
                colvarTuoi.MaxLength = 0;
                colvarTuoi.AutoIncrement = false;
                colvarTuoi.IsNullable = true;
                colvarTuoi.IsPrimaryKey = false;
                colvarTuoi.IsForeignKey = false;
                colvarTuoi.IsReadOnly = false;
                colvarTuoi.DefaultSetting = @"";
                colvarTuoi.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTuoi);

                var colvarSophieu = new TableSchema.TableColumn(schema);
                colvarSophieu.ColumnName = "sophieu";
                colvarSophieu.DataType = DbType.String;
                colvarSophieu.MaxLength = 50;
                colvarSophieu.AutoIncrement = false;
                colvarSophieu.IsNullable = true;
                colvarSophieu.IsPrimaryKey = false;
                colvarSophieu.IsForeignKey = false;
                colvarSophieu.IsReadOnly = false;
                colvarSophieu.DefaultSetting = @"";
                colvarSophieu.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSophieu);

                var colvarTestDate = new TableSchema.TableColumn(schema);
                colvarTestDate.ColumnName = "test_date";
                colvarTestDate.DataType = DbType.DateTime;
                colvarTestDate.MaxLength = 0;
                colvarTestDate.AutoIncrement = false;
                colvarTestDate.IsNullable = true;
                colvarTestDate.IsPrimaryKey = false;
                colvarTestDate.IsForeignKey = false;
                colvarTestDate.IsReadOnly = false;
                colvarTestDate.DefaultSetting = @"";
                colvarTestDate.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTestDate);

                var colvarDatra = new TableSchema.TableColumn(schema);
                colvarDatra.ColumnName = "datra";
                colvarDatra.DataType = DbType.String;
                colvarDatra.MaxLength = 50;
                colvarDatra.AutoIncrement = false;
                colvarDatra.IsNullable = true;
                colvarDatra.IsPrimaryKey = false;
                colvarDatra.IsForeignKey = false;
                colvarDatra.IsReadOnly = false;
                colvarDatra.DefaultSetting = @"";
                colvarDatra.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDatra);

                var colvarDichVu = new TableSchema.TableColumn(schema);
                colvarDichVu.ColumnName = "dichVu";
                colvarDichVu.DataType = DbType.Boolean;
                colvarDichVu.MaxLength = 0;
                colvarDichVu.AutoIncrement = false;
                colvarDichVu.IsNullable = true;
                colvarDichVu.IsPrimaryKey = false;
                colvarDichVu.IsForeignKey = false;
                colvarDichVu.IsReadOnly = false;
                colvarDichVu.DefaultSetting = @"";
                colvarDichVu.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDichVu);

                var colvarIdDoiTuongBenhNhan = new TableSchema.TableColumn(schema);
                colvarIdDoiTuongBenhNhan.ColumnName = "idDoiTuongBenhNhan";
                colvarIdDoiTuongBenhNhan.DataType = DbType.Int32;
                colvarIdDoiTuongBenhNhan.MaxLength = 0;
                colvarIdDoiTuongBenhNhan.AutoIncrement = false;
                colvarIdDoiTuongBenhNhan.IsNullable = true;
                colvarIdDoiTuongBenhNhan.IsPrimaryKey = false;
                colvarIdDoiTuongBenhNhan.IsForeignKey = false;
                colvarIdDoiTuongBenhNhan.IsReadOnly = false;
                colvarIdDoiTuongBenhNhan.DefaultSetting = @"";
                colvarIdDoiTuongBenhNhan.ForeignKeyTableName = "";
                schema.Columns.Add(colvarIdDoiTuongBenhNhan);

                var colvarMaLanKham = new TableSchema.TableColumn(schema);
                colvarMaLanKham.ColumnName = "MaLanKham";
                colvarMaLanKham.DataType = DbType.String;
                colvarMaLanKham.MaxLength = 50;
                colvarMaLanKham.AutoIncrement = false;
                colvarMaLanKham.IsNullable = true;
                colvarMaLanKham.IsPrimaryKey = false;
                colvarMaLanKham.IsForeignKey = false;
                colvarMaLanKham.IsReadOnly = false;
                colvarMaLanKham.DefaultSetting = @"";
                colvarMaLanKham.ForeignKeyTableName = "";
                schema.Columns.Add(colvarMaLanKham);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("tblHisLis_PatientInfo_VNIO", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("Id")]
        [Bindable(true)]
        public long Id
        {
            get { return GetColumnValue<long>(Columns.Id); }
            set { SetColumnValue(Columns.Id, value); }
        }

        [XmlAttribute("BacSyDieuTri")]
        [Bindable(true)]
        public string BacSyDieuTri
        {
            get { return GetColumnValue<string>(Columns.BacSyDieuTri); }
            set { SetColumnValue(Columns.BacSyDieuTri, value); }
        }

        [XmlAttribute("Buong")]
        [Bindable(true)]
        public string Buong
        {
            get { return GetColumnValue<string>(Columns.Buong); }
            set { SetColumnValue(Columns.Buong, value); }
        }

        [XmlAttribute("DiaChi")]
        [Bindable(true)]
        public string DiaChi
        {
            get { return GetColumnValue<string>(Columns.DiaChi); }
            set { SetColumnValue(Columns.DiaChi, value); }
        }

        [XmlAttribute("GioiTinh")]
        [Bindable(true)]
        public bool? GioiTinh
        {
            get { return GetColumnValue<bool?>(Columns.GioiTinh); }
            set { SetColumnValue(Columns.GioiTinh, value); }
        }

        [XmlAttribute("Giuong")]
        [Bindable(true)]
        public string Giuong
        {
            get { return GetColumnValue<string>(Columns.Giuong); }
            set { SetColumnValue(Columns.Giuong, value); }
        }

        [XmlAttribute("IdBacSyDieuTri")]
        [Bindable(true)]
        public string IdBacSyDieuTri
        {
            get { return GetColumnValue<string>(Columns.IdBacSyDieuTri); }
            set { SetColumnValue(Columns.IdBacSyDieuTri, value); }
        }

        [XmlAttribute("IdKhoa")]
        [Bindable(true)]
        public short? IdKhoa
        {
            get { return GetColumnValue<short?>(Columns.IdKhoa); }
            set { SetColumnValue(Columns.IdKhoa, value); }
        }

        [XmlAttribute("Khoa")]
        [Bindable(true)]
        public string Khoa
        {
            get { return GetColumnValue<string>(Columns.Khoa); }
            set { SetColumnValue(Columns.Khoa, value); }
        }

        [XmlAttribute("MaBenhNhan")]
        [Bindable(true)]
        public string MaBenhNhan
        {
            get { return GetColumnValue<string>(Columns.MaBenhNhan); }
            set { SetColumnValue(Columns.MaBenhNhan, value); }
        }

        [XmlAttribute("NoiTru")]
        [Bindable(true)]
        public bool? NoiTru
        {
            get { return GetColumnValue<bool?>(Columns.NoiTru); }
            set { SetColumnValue(Columns.NoiTru, value); }
        }

        [XmlAttribute("Phong")]
        [Bindable(true)]
        public string Phong
        {
            get { return GetColumnValue<string>(Columns.Phong); }
            set { SetColumnValue(Columns.Phong, value); }
        }

        [XmlAttribute("TenBenhNhan")]
        [Bindable(true)]
        public string TenBenhNhan
        {
            get { return GetColumnValue<string>(Columns.TenBenhNhan); }
            set { SetColumnValue(Columns.TenBenhNhan, value); }
        }

        [XmlAttribute("Tuoi")]
        [Bindable(true)]
        public short? Tuoi
        {
            get { return GetColumnValue<short?>(Columns.Tuoi); }
            set { SetColumnValue(Columns.Tuoi, value); }
        }

        [XmlAttribute("Sophieu")]
        [Bindable(true)]
        public string Sophieu
        {
            get { return GetColumnValue<string>(Columns.Sophieu); }
            set { SetColumnValue(Columns.Sophieu, value); }
        }

        [XmlAttribute("TestDate")]
        [Bindable(true)]
        public DateTime? TestDate
        {
            get { return GetColumnValue<DateTime?>(Columns.TestDate); }
            set { SetColumnValue(Columns.TestDate, value); }
        }

        [XmlAttribute("Datra")]
        [Bindable(true)]
        public string Datra
        {
            get { return GetColumnValue<string>(Columns.Datra); }
            set { SetColumnValue(Columns.Datra, value); }
        }

        [XmlAttribute("DichVu")]
        [Bindable(true)]
        public bool? DichVu
        {
            get { return GetColumnValue<bool?>(Columns.DichVu); }
            set { SetColumnValue(Columns.DichVu, value); }
        }

        [XmlAttribute("IdDoiTuongBenhNhan")]
        [Bindable(true)]
        public int? IdDoiTuongBenhNhan
        {
            get { return GetColumnValue<int?>(Columns.IdDoiTuongBenhNhan); }
            set { SetColumnValue(Columns.IdDoiTuongBenhNhan, value); }
        }

        [XmlAttribute("MaLanKham")]
        [Bindable(true)]
        public string MaLanKham
        {
            get { return GetColumnValue<string>(Columns.MaLanKham); }
            set { SetColumnValue(Columns.MaLanKham, value); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(string varBacSyDieuTri, string varBuong, string varDiaChi, bool? varGioiTinh,
            string varGiuong, string varIdBacSyDieuTri, short? varIdKhoa, string varKhoa, string varMaBenhNhan,
            bool? varNoiTru, string varPhong, string varTenBenhNhan, short? varTuoi, string varSophieu,
            DateTime? varTestDate, string varDatra, bool? varDichVu, int? varIdDoiTuongBenhNhan, string varMaLanKham)
        {
            var item = new TblHisLisPatientInfoVnio();

            item.BacSyDieuTri = varBacSyDieuTri;

            item.Buong = varBuong;

            item.DiaChi = varDiaChi;

            item.GioiTinh = varGioiTinh;

            item.Giuong = varGiuong;

            item.IdBacSyDieuTri = varIdBacSyDieuTri;

            item.IdKhoa = varIdKhoa;

            item.Khoa = varKhoa;

            item.MaBenhNhan = varMaBenhNhan;

            item.NoiTru = varNoiTru;

            item.Phong = varPhong;

            item.TenBenhNhan = varTenBenhNhan;

            item.Tuoi = varTuoi;

            item.Sophieu = varSophieu;

            item.TestDate = varTestDate;

            item.Datra = varDatra;

            item.DichVu = varDichVu;

            item.IdDoiTuongBenhNhan = varIdDoiTuongBenhNhan;

            item.MaLanKham = varMaLanKham;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(long varId, string varBacSyDieuTri, string varBuong, string varDiaChi,
            bool? varGioiTinh, string varGiuong, string varIdBacSyDieuTri, short? varIdKhoa, string varKhoa,
            string varMaBenhNhan, bool? varNoiTru, string varPhong, string varTenBenhNhan, short? varTuoi,
            string varSophieu, DateTime? varTestDate, string varDatra, bool? varDichVu, int? varIdDoiTuongBenhNhan,
            string varMaLanKham)
        {
            var item = new TblHisLisPatientInfoVnio();

            item.Id = varId;

            item.BacSyDieuTri = varBacSyDieuTri;

            item.Buong = varBuong;

            item.DiaChi = varDiaChi;

            item.GioiTinh = varGioiTinh;

            item.Giuong = varGiuong;

            item.IdBacSyDieuTri = varIdBacSyDieuTri;

            item.IdKhoa = varIdKhoa;

            item.Khoa = varKhoa;

            item.MaBenhNhan = varMaBenhNhan;

            item.NoiTru = varNoiTru;

            item.Phong = varPhong;

            item.TenBenhNhan = varTenBenhNhan;

            item.Tuoi = varTuoi;

            item.Sophieu = varSophieu;

            item.TestDate = varTestDate;

            item.Datra = varDatra;

            item.DichVu = varDichVu;

            item.IdDoiTuongBenhNhan = varIdDoiTuongBenhNhan;

            item.MaLanKham = varMaLanKham;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn BacSyDieuTriColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn BuongColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn DiaChiColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn GioiTinhColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn GiuongColumn
        {
            get { return Schema.Columns[5]; }
        }


        public static TableSchema.TableColumn IdBacSyDieuTriColumn
        {
            get { return Schema.Columns[6]; }
        }


        public static TableSchema.TableColumn IdKhoaColumn
        {
            get { return Schema.Columns[7]; }
        }


        public static TableSchema.TableColumn KhoaColumn
        {
            get { return Schema.Columns[8]; }
        }


        public static TableSchema.TableColumn MaBenhNhanColumn
        {
            get { return Schema.Columns[9]; }
        }


        public static TableSchema.TableColumn NoiTruColumn
        {
            get { return Schema.Columns[10]; }
        }


        public static TableSchema.TableColumn PhongColumn
        {
            get { return Schema.Columns[11]; }
        }


        public static TableSchema.TableColumn TenBenhNhanColumn
        {
            get { return Schema.Columns[12]; }
        }


        public static TableSchema.TableColumn TuoiColumn
        {
            get { return Schema.Columns[13]; }
        }


        public static TableSchema.TableColumn SophieuColumn
        {
            get { return Schema.Columns[14]; }
        }


        public static TableSchema.TableColumn TestDateColumn
        {
            get { return Schema.Columns[15]; }
        }


        public static TableSchema.TableColumn DatraColumn
        {
            get { return Schema.Columns[16]; }
        }


        public static TableSchema.TableColumn DichVuColumn
        {
            get { return Schema.Columns[17]; }
        }


        public static TableSchema.TableColumn IdDoiTuongBenhNhanColumn
        {
            get { return Schema.Columns[18]; }
        }


        public static TableSchema.TableColumn MaLanKhamColumn
        {
            get { return Schema.Columns[19]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string Id = @"Id";
            public static string BacSyDieuTri = @"bacSyDieuTri";
            public static string Buong = @"buong";
            public static string DiaChi = @"diaChi";
            public static string GioiTinh = @"gioiTinh";
            public static string Giuong = @"giuong";
            public static string IdBacSyDieuTri = @"idBacSyDieuTri";
            public static string IdKhoa = @"idKhoa";
            public static string Khoa = @"khoa";
            public static string MaBenhNhan = @"maBenhNhan";
            public static string NoiTru = @"noiTru";
            public static string Phong = @"phong";
            public static string TenBenhNhan = @"tenBenhNhan";
            public static string Tuoi = @"tuoi";
            public static string Sophieu = @"sophieu";
            public static string TestDate = @"test_date";
            public static string Datra = @"datra";
            public static string DichVu = @"dichVu";
            public static string IdDoiTuongBenhNhan = @"idDoiTuongBenhNhan";
            public static string MaLanKham = @"MaLanKham";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no foreign key tables defined (0)


        //no ManyToMany tables defined (0)
    }
}