using System;
using System.ComponentModel;
using System.Threading;
using System.Web;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Controller class for T_REG_LIST
    /// </summary>
    [DataObject]
    public class TRegListController
    {
        // Preload our schema..
        private TRegList thisSchemaLoad = new TRegList();
        private string userName = String.Empty;

        protected string UserName
        {
            get
            {
                if (userName.Length == 0)
                {
                    if (HttpContext.Current != null)
                    {
                        userName = HttpContext.Current.User.Identity.Name;
                    }
                    else
                    {
                        userName = Thread.CurrentPrincipal.Identity.Name;
                    }
                }
                return userName;
            }
        }

        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TRegListCollection FetchAll()
        {
            var coll = new TRegListCollection();
            var qry = new Query(TRegList.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TRegListCollection FetchByID(object TestRegDetailId)
        {
            TRegListCollection coll = new TRegListCollection().Where("TestRegDetail_ID", TestRegDetailId).Load();
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TRegListCollection FetchByQuery(Query qry)
        {
            var coll = new TRegListCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object TestRegDetailId)
        {
            return (TRegList.Delete(TestRegDetailId) == 1);
        }

        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object TestRegDetailId)
        {
            return (TRegList.Destroy(TestRegDetailId) == 1);
        }


        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public void Insert(decimal TestId, string AliasName, string Barcode, string ParaName, short Status, int DeviceId,
            string TestDataId, byte? HasResult, string HisIdXn)
        {
            var item = new TRegList();

            item.TestId = TestId;

            item.AliasName = AliasName;

            item.Barcode = Barcode;

            item.ParaName = ParaName;

            item.Status = Status;

            item.DeviceId = DeviceId;

            item.TestDataId = TestDataId;

            item.HasResult = HasResult;

            item.HisIdXn = HisIdXn;


            item.Save(UserName);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public void Update(long TestRegDetailId, decimal TestId, string AliasName, string Barcode, string ParaName,
            short Status, int DeviceId, string TestDataId, byte? HasResult, string HisIdXn)
        {
            var item = new TRegList();
            item.MarkOld();
            item.IsLoaded = true;

            item.TestRegDetailId = TestRegDetailId;

            item.TestId = TestId;

            item.AliasName = AliasName;

            item.Barcode = Barcode;

            item.ParaName = ParaName;

            item.Status = Status;

            item.DeviceId = DeviceId;

            item.TestDataId = TestDataId;

            item.HasResult = HasResult;

            item.HisIdXn = HisIdXn;

            item.Save(UserName);
        }
    }
}