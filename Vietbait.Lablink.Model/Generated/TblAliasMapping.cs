using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Strongly-typed collection for the TblAliasMapping class.
    /// </summary>
    [Serializable]
    public class TblAliasMappingCollection : ActiveList<TblAliasMapping, TblAliasMappingCollection>
    {
        /// <summary>
        ///     Filters an existing collection based on the set criteria. This is an in-memory filter
        ///     Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblAliasMappingCollection</returns>
        public TblAliasMappingCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                TblAliasMapping o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    ///     This is an ActiveRecord class which wraps the tblAliasMapping table.
    /// </summary>
    [Serializable]
    public class TblAliasMapping : ActiveRecord<TblAliasMapping>, IActiveRecord
    {
        #region .ctors and Default Settings

        public TblAliasMapping()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public TblAliasMapping(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public TblAliasMapping(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public TblAliasMapping(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("tblAliasMapping", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarId = new TableSchema.TableColumn(schema);
                colvarId.ColumnName = "Id";
                colvarId.DataType = DbType.Int64;
                colvarId.MaxLength = 0;
                colvarId.AutoIncrement = true;
                colvarId.IsNullable = false;
                colvarId.IsPrimaryKey = true;
                colvarId.IsForeignKey = false;
                colvarId.IsReadOnly = false;
                colvarId.DefaultSetting = @"";
                colvarId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarId);

                var colvarLocalAlias = new TableSchema.TableColumn(schema);
                colvarLocalAlias.ColumnName = "LocalAlias";
                colvarLocalAlias.DataType = DbType.String;
                colvarLocalAlias.MaxLength = 50;
                colvarLocalAlias.AutoIncrement = false;
                colvarLocalAlias.IsNullable = true;
                colvarLocalAlias.IsPrimaryKey = false;
                colvarLocalAlias.IsForeignKey = false;
                colvarLocalAlias.IsReadOnly = false;
                colvarLocalAlias.DefaultSetting = @"";
                colvarLocalAlias.ForeignKeyTableName = "";
                schema.Columns.Add(colvarLocalAlias);

                var colvarTestTypeId = new TableSchema.TableColumn(schema);
                colvarTestTypeId.ColumnName = "TestType_ID";
                colvarTestTypeId.DataType = DbType.Int32;
                colvarTestTypeId.MaxLength = 0;
                colvarTestTypeId.AutoIncrement = false;
                colvarTestTypeId.IsNullable = true;
                colvarTestTypeId.IsPrimaryKey = false;
                colvarTestTypeId.IsForeignKey = false;
                colvarTestTypeId.IsReadOnly = false;
                colvarTestTypeId.DefaultSetting = @"";
                colvarTestTypeId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTestTypeId);

                var colvarIdHisXn = new TableSchema.TableColumn(schema);
                colvarIdHisXn.ColumnName = "id_his_xn";
                colvarIdHisXn.DataType = DbType.Int32;
                colvarIdHisXn.MaxLength = 0;
                colvarIdHisXn.AutoIncrement = false;
                colvarIdHisXn.IsNullable = true;
                colvarIdHisXn.IsPrimaryKey = false;
                colvarIdHisXn.IsForeignKey = false;
                colvarIdHisXn.IsReadOnly = false;
                colvarIdHisXn.DefaultSetting = @"";
                colvarIdHisXn.ForeignKeyTableName = "";
                schema.Columns.Add(colvarIdHisXn);

                var colvarDisplayParamLevel = new TableSchema.TableColumn(schema);
                colvarDisplayParamLevel.ColumnName = "Display_ParamLevel";
                colvarDisplayParamLevel.DataType = DbType.Int16;
                colvarDisplayParamLevel.MaxLength = 0;
                colvarDisplayParamLevel.AutoIncrement = false;
                colvarDisplayParamLevel.IsNullable = true;
                colvarDisplayParamLevel.IsPrimaryKey = false;
                colvarDisplayParamLevel.IsForeignKey = false;
                colvarDisplayParamLevel.IsReadOnly = false;
                colvarDisplayParamLevel.DefaultSetting = @"";
                colvarDisplayParamLevel.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDisplayParamLevel);

                var colvarTagName = new TableSchema.TableColumn(schema);
                colvarTagName.ColumnName = "Tag_Name";
                colvarTagName.DataType = DbType.String;
                colvarTagName.MaxLength = 100;
                colvarTagName.AutoIncrement = false;
                colvarTagName.IsNullable = true;
                colvarTagName.IsPrimaryKey = false;
                colvarTagName.IsForeignKey = false;
                colvarTagName.IsReadOnly = false;
                colvarTagName.DefaultSetting = @"";
                colvarTagName.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTagName);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("tblAliasMapping", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("Id")]
        [Bindable(true)]
        public long Id
        {
            get { return GetColumnValue<long>(Columns.Id); }
            set { SetColumnValue(Columns.Id, value); }
        }

        [XmlAttribute("LocalAlias")]
        [Bindable(true)]
        public string LocalAlias
        {
            get { return GetColumnValue<string>(Columns.LocalAlias); }
            set { SetColumnValue(Columns.LocalAlias, value); }
        }

        [XmlAttribute("TestTypeId")]
        [Bindable(true)]
        public int? TestTypeId
        {
            get { return GetColumnValue<int?>(Columns.TestTypeId); }
            set { SetColumnValue(Columns.TestTypeId, value); }
        }

        [XmlAttribute("IdHisXn")]
        [Bindable(true)]
        public int? IdHisXn
        {
            get { return GetColumnValue<int?>(Columns.IdHisXn); }
            set { SetColumnValue(Columns.IdHisXn, value); }
        }

        [XmlAttribute("DisplayParamLevel")]
        [Bindable(true)]
        public short? DisplayParamLevel
        {
            get { return GetColumnValue<short?>(Columns.DisplayParamLevel); }
            set { SetColumnValue(Columns.DisplayParamLevel, value); }
        }

        [XmlAttribute("TagName")]
        [Bindable(true)]
        public string TagName
        {
            get { return GetColumnValue<string>(Columns.TagName); }
            set { SetColumnValue(Columns.TagName, value); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(string varLocalAlias, int? varTestTypeId, int? varIdHisXn, short? varDisplayParamLevel,
            string varTagName)
        {
            var item = new TblAliasMapping();

            item.LocalAlias = varLocalAlias;

            item.TestTypeId = varTestTypeId;

            item.IdHisXn = varIdHisXn;

            item.DisplayParamLevel = varDisplayParamLevel;

            item.TagName = varTagName;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(long varId, string varLocalAlias, int? varTestTypeId, int? varIdHisXn,
            short? varDisplayParamLevel, string varTagName)
        {
            var item = new TblAliasMapping();

            item.Id = varId;

            item.LocalAlias = varLocalAlias;

            item.TestTypeId = varTestTypeId;

            item.IdHisXn = varIdHisXn;

            item.DisplayParamLevel = varDisplayParamLevel;

            item.TagName = varTagName;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn LocalAliasColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn TestTypeIdColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn IdHisXnColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn DisplayParamLevelColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn TagNameColumn
        {
            get { return Schema.Columns[5]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string Id = @"Id";
            public static string LocalAlias = @"LocalAlias";
            public static string TestTypeId = @"TestType_ID";
            public static string IdHisXn = @"id_his_xn";
            public static string DisplayParamLevel = @"Display_ParamLevel";
            public static string TagName = @"Tag_Name";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no foreign key tables defined (0)


        //no ManyToMany tables defined (0)
    }
}