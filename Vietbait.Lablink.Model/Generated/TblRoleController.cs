using System;
using System.ComponentModel;
using System.Threading;
using System.Web;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Controller class for tbl_Roles
    /// </summary>
    [DataObject]
    public class TblRoleController
    {
        // Preload our schema..
        private TblRole thisSchemaLoad = new TblRole();
        private string userName = String.Empty;

        protected string UserName
        {
            get
            {
                if (userName.Length == 0)
                {
                    if (HttpContext.Current != null)
                    {
                        userName = HttpContext.Current.User.Identity.Name;
                    }
                    else
                    {
                        userName = Thread.CurrentPrincipal.Identity.Name;
                    }
                }
                return userName;
            }
        }

        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TblRoleCollection FetchAll()
        {
            var coll = new TblRoleCollection();
            var qry = new Query(TblRole.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblRoleCollection FetchByID(object IRole)
        {
            TblRoleCollection coll = new TblRoleCollection().Where("iRole", IRole).Load();
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblRoleCollection FetchByQuery(Query qry)
        {
            var coll = new TblRoleCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object IRole)
        {
            return (TblRole.Delete(IRole) == 1);
        }

        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object IRole)
        {
            return (TblRole.Destroy(IRole) == 1);
        }


        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(long IRole, string FpSBranchID)
        {
            var qry = new Query(TblRole.Schema);
            qry.QueryType = QueryType.Delete;
            qry.AddWhere("IRole", IRole).AND("FpSBranchID", FpSBranchID);
            qry.Execute();
            return (true);
        }


        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public void Insert(string FpSBranchID, long IParentRole, string SRoleName, string SEngRoleName, int? IOrder,
            long? FkIFunctionID, DateTime? TDateCreated, string SImgPath, string SDesc, string SIconPath,
            int? IntShortCutKey)
        {
            var item = new TblRole();

            item.FpSBranchID = FpSBranchID;

            item.IParentRole = IParentRole;

            item.SRoleName = SRoleName;

            item.SEngRoleName = SEngRoleName;

            item.IOrder = IOrder;

            item.FkIFunctionID = FkIFunctionID;

            item.TDateCreated = TDateCreated;

            item.SImgPath = SImgPath;

            item.SDesc = SDesc;

            item.SIconPath = SIconPath;

            item.IntShortCutKey = IntShortCutKey;


            item.Save(UserName);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public void Update(long IRole, string FpSBranchID, long IParentRole, string SRoleName, string SEngRoleName,
            int? IOrder, long? FkIFunctionID, DateTime? TDateCreated, string SImgPath, string SDesc, string SIconPath,
            int? IntShortCutKey)
        {
            var item = new TblRole();
            item.MarkOld();
            item.IsLoaded = true;

            item.IRole = IRole;

            item.FpSBranchID = FpSBranchID;

            item.IParentRole = IParentRole;

            item.SRoleName = SRoleName;

            item.SEngRoleName = SEngRoleName;

            item.IOrder = IOrder;

            item.FkIFunctionID = FkIFunctionID;

            item.TDateCreated = TDateCreated;

            item.SImgPath = SImgPath;

            item.SDesc = SDesc;

            item.SIconPath = SIconPath;

            item.IntShortCutKey = IntShortCutKey;

            item.Save(UserName);
        }
    }
}