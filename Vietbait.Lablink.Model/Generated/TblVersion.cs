using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Strongly-typed collection for the TblVersion class.
    /// </summary>
    [Serializable]
    public class TblVersionCollection : ActiveList<TblVersion, TblVersionCollection>
    {
        /// <summary>
        ///     Filters an existing collection based on the set criteria. This is an in-memory filter
        ///     Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblVersionCollection</returns>
        public TblVersionCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                TblVersion o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    ///     This is an ActiveRecord class which wraps the tbl_Version table.
    /// </summary>
    [Serializable]
    public class TblVersion : ActiveRecord<TblVersion>, IActiveRecord
    {
        #region .ctors and Default Settings

        public TblVersion()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public TblVersion(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public TblVersion(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public TblVersion(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("tbl_Version", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarPkIntID = new TableSchema.TableColumn(schema);
                colvarPkIntID.ColumnName = "PK_intID";
                colvarPkIntID.DataType = DbType.Int32;
                colvarPkIntID.MaxLength = 0;
                colvarPkIntID.AutoIncrement = true;
                colvarPkIntID.IsNullable = false;
                colvarPkIntID.IsPrimaryKey = true;
                colvarPkIntID.IsForeignKey = false;
                colvarPkIntID.IsReadOnly = false;
                colvarPkIntID.DefaultSetting = @"";
                colvarPkIntID.ForeignKeyTableName = "";
                schema.Columns.Add(colvarPkIntID);

                var colvarSFileName = new TableSchema.TableColumn(schema);
                colvarSFileName.ColumnName = "sFileName";
                colvarSFileName.DataType = DbType.String;
                colvarSFileName.MaxLength = 50;
                colvarSFileName.AutoIncrement = false;
                colvarSFileName.IsNullable = false;
                colvarSFileName.IsPrimaryKey = false;
                colvarSFileName.IsForeignKey = false;
                colvarSFileName.IsReadOnly = false;
                colvarSFileName.DefaultSetting = @"";
                colvarSFileName.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSFileName);

                var colvarSRarFileName = new TableSchema.TableColumn(schema);
                colvarSRarFileName.ColumnName = "sRarFileName";
                colvarSRarFileName.DataType = DbType.String;
                colvarSRarFileName.MaxLength = 50;
                colvarSRarFileName.AutoIncrement = false;
                colvarSRarFileName.IsNullable = true;
                colvarSRarFileName.IsPrimaryKey = false;
                colvarSRarFileName.IsForeignKey = false;
                colvarSRarFileName.IsReadOnly = false;
                colvarSRarFileName.DefaultSetting = @"";
                colvarSRarFileName.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSRarFileName);

                var colvarObjData = new TableSchema.TableColumn(schema);
                colvarObjData.ColumnName = "objData";
                colvarObjData.DataType = DbType.Binary;
                colvarObjData.MaxLength = 2147483647;
                colvarObjData.AutoIncrement = false;
                colvarObjData.IsNullable = false;
                colvarObjData.IsPrimaryKey = false;
                colvarObjData.IsForeignKey = false;
                colvarObjData.IsReadOnly = false;
                colvarObjData.DefaultSetting = @"";
                colvarObjData.ForeignKeyTableName = "";
                schema.Columns.Add(colvarObjData);

                var colvarSVersion = new TableSchema.TableColumn(schema);
                colvarSVersion.ColumnName = "sVersion";
                colvarSVersion.DataType = DbType.String;
                colvarSVersion.MaxLength = 30;
                colvarSVersion.AutoIncrement = false;
                colvarSVersion.IsNullable = true;
                colvarSVersion.IsPrimaryKey = false;
                colvarSVersion.IsForeignKey = false;
                colvarSVersion.IsReadOnly = false;
                colvarSVersion.DefaultSetting = @"";
                colvarSVersion.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSVersion);

                var colvarIntRar = new TableSchema.TableColumn(schema);
                colvarIntRar.ColumnName = "intRar";
                colvarIntRar.DataType = DbType.Int16;
                colvarIntRar.MaxLength = 0;
                colvarIntRar.AutoIncrement = false;
                colvarIntRar.IsNullable = true;
                colvarIntRar.IsPrimaryKey = false;
                colvarIntRar.IsForeignKey = false;
                colvarIntRar.IsReadOnly = false;
                colvarIntRar.DefaultSetting = @"";
                colvarIntRar.ForeignKeyTableName = "";
                schema.Columns.Add(colvarIntRar);

                var colvarIntPatch = new TableSchema.TableColumn(schema);
                colvarIntPatch.ColumnName = "intPatch";
                colvarIntPatch.DataType = DbType.Int16;
                colvarIntPatch.MaxLength = 0;
                colvarIntPatch.AutoIncrement = false;
                colvarIntPatch.IsNullable = true;
                colvarIntPatch.IsPrimaryKey = false;
                colvarIntPatch.IsForeignKey = false;
                colvarIntPatch.IsReadOnly = false;
                colvarIntPatch.DefaultSetting = @"";
                colvarIntPatch.ForeignKeyTableName = "";
                schema.Columns.Add(colvarIntPatch);

                var colvarTUpdatedDate = new TableSchema.TableColumn(schema);
                colvarTUpdatedDate.ColumnName = "tUpdatedDate";
                colvarTUpdatedDate.DataType = DbType.DateTime;
                colvarTUpdatedDate.MaxLength = 0;
                colvarTUpdatedDate.AutoIncrement = false;
                colvarTUpdatedDate.IsNullable = true;
                colvarTUpdatedDate.IsPrimaryKey = false;
                colvarTUpdatedDate.IsForeignKey = false;
                colvarTUpdatedDate.IsReadOnly = false;
                colvarTUpdatedDate.DefaultSetting = @"";
                colvarTUpdatedDate.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTUpdatedDate);

                var colvarDblCapacity = new TableSchema.TableColumn(schema);
                colvarDblCapacity.ColumnName = "dblCapacity";
                colvarDblCapacity.DataType = DbType.Int32;
                colvarDblCapacity.MaxLength = 0;
                colvarDblCapacity.AutoIncrement = false;
                colvarDblCapacity.IsNullable = true;
                colvarDblCapacity.IsPrimaryKey = false;
                colvarDblCapacity.IsForeignKey = false;
                colvarDblCapacity.IsReadOnly = false;
                colvarDblCapacity.DefaultSetting = @"";
                colvarDblCapacity.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDblCapacity);

                var colvarSDesc = new TableSchema.TableColumn(schema);
                colvarSDesc.ColumnName = "sDesc";
                colvarSDesc.DataType = DbType.String;
                colvarSDesc.MaxLength = 255;
                colvarSDesc.AutoIncrement = false;
                colvarSDesc.IsNullable = true;
                colvarSDesc.IsPrimaryKey = false;
                colvarSDesc.IsForeignKey = false;
                colvarSDesc.IsReadOnly = false;
                colvarSDesc.DefaultSetting = @"";
                colvarSDesc.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSDesc);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("tbl_Version", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("PkIntID")]
        [Bindable(true)]
        public int PkIntID
        {
            get { return GetColumnValue<int>(Columns.PkIntID); }
            set { SetColumnValue(Columns.PkIntID, value); }
        }

        [XmlAttribute("SFileName")]
        [Bindable(true)]
        public string SFileName
        {
            get { return GetColumnValue<string>(Columns.SFileName); }
            set { SetColumnValue(Columns.SFileName, value); }
        }

        [XmlAttribute("SRarFileName")]
        [Bindable(true)]
        public string SRarFileName
        {
            get { return GetColumnValue<string>(Columns.SRarFileName); }
            set { SetColumnValue(Columns.SRarFileName, value); }
        }

        [XmlAttribute("ObjData")]
        [Bindable(true)]
        public byte[] ObjData
        {
            get { return GetColumnValue<byte[]>(Columns.ObjData); }
            set { SetColumnValue(Columns.ObjData, value); }
        }

        [XmlAttribute("SVersion")]
        [Bindable(true)]
        public string SVersion
        {
            get { return GetColumnValue<string>(Columns.SVersion); }
            set { SetColumnValue(Columns.SVersion, value); }
        }

        [XmlAttribute("IntRar")]
        [Bindable(true)]
        public short? IntRar
        {
            get { return GetColumnValue<short?>(Columns.IntRar); }
            set { SetColumnValue(Columns.IntRar, value); }
        }

        [XmlAttribute("IntPatch")]
        [Bindable(true)]
        public short? IntPatch
        {
            get { return GetColumnValue<short?>(Columns.IntPatch); }
            set { SetColumnValue(Columns.IntPatch, value); }
        }

        [XmlAttribute("TUpdatedDate")]
        [Bindable(true)]
        public DateTime? TUpdatedDate
        {
            get { return GetColumnValue<DateTime?>(Columns.TUpdatedDate); }
            set { SetColumnValue(Columns.TUpdatedDate, value); }
        }

        [XmlAttribute("DblCapacity")]
        [Bindable(true)]
        public int? DblCapacity
        {
            get { return GetColumnValue<int?>(Columns.DblCapacity); }
            set { SetColumnValue(Columns.DblCapacity, value); }
        }

        [XmlAttribute("SDesc")]
        [Bindable(true)]
        public string SDesc
        {
            get { return GetColumnValue<string>(Columns.SDesc); }
            set { SetColumnValue(Columns.SDesc, value); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(string varSFileName, string varSRarFileName, byte[] varObjData, string varSVersion,
            short? varIntRar, short? varIntPatch, DateTime? varTUpdatedDate, int? varDblCapacity, string varSDesc)
        {
            var item = new TblVersion();

            item.SFileName = varSFileName;

            item.SRarFileName = varSRarFileName;

            item.ObjData = varObjData;

            item.SVersion = varSVersion;

            item.IntRar = varIntRar;

            item.IntPatch = varIntPatch;

            item.TUpdatedDate = varTUpdatedDate;

            item.DblCapacity = varDblCapacity;

            item.SDesc = varSDesc;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(int varPkIntID, string varSFileName, string varSRarFileName, byte[] varObjData,
            string varSVersion, short? varIntRar, short? varIntPatch, DateTime? varTUpdatedDate, int? varDblCapacity,
            string varSDesc)
        {
            var item = new TblVersion();

            item.PkIntID = varPkIntID;

            item.SFileName = varSFileName;

            item.SRarFileName = varSRarFileName;

            item.ObjData = varObjData;

            item.SVersion = varSVersion;

            item.IntRar = varIntRar;

            item.IntPatch = varIntPatch;

            item.TUpdatedDate = varTUpdatedDate;

            item.DblCapacity = varDblCapacity;

            item.SDesc = varSDesc;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn PkIntIDColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn SFileNameColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn SRarFileNameColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn ObjDataColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn SVersionColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn IntRarColumn
        {
            get { return Schema.Columns[5]; }
        }


        public static TableSchema.TableColumn IntPatchColumn
        {
            get { return Schema.Columns[6]; }
        }


        public static TableSchema.TableColumn TUpdatedDateColumn
        {
            get { return Schema.Columns[7]; }
        }


        public static TableSchema.TableColumn DblCapacityColumn
        {
            get { return Schema.Columns[8]; }
        }


        public static TableSchema.TableColumn SDescColumn
        {
            get { return Schema.Columns[9]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string PkIntID = @"PK_intID";
            public static string SFileName = @"sFileName";
            public static string SRarFileName = @"sRarFileName";
            public static string ObjData = @"objData";
            public static string SVersion = @"sVersion";
            public static string IntRar = @"intRar";
            public static string IntPatch = @"intPatch";
            public static string TUpdatedDate = @"tUpdatedDate";
            public static string DblCapacity = @"dblCapacity";
            public static string SDesc = @"sDesc";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no foreign key tables defined (0)


        //no ManyToMany tables defined (0)
    }
}