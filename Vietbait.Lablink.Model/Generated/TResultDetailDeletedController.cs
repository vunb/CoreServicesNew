using System;
using System.ComponentModel;
using System.Threading;
using System.Web;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Controller class for T_RESULT_DETAIL_DELETED
    /// </summary>
    [DataObject]
    public class TResultDetailDeletedController
    {
        // Preload our schema..
        private TResultDetailDeleted thisSchemaLoad = new TResultDetailDeleted();
        private string userName = String.Empty;

        protected string UserName
        {
            get
            {
                if (userName.Length == 0)
                {
                    if (HttpContext.Current != null)
                    {
                        userName = HttpContext.Current.User.Identity.Name;
                    }
                    else
                    {
                        userName = Thread.CurrentPrincipal.Identity.Name;
                    }
                }
                return userName;
            }
        }

        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TResultDetailDeletedCollection FetchAll()
        {
            var coll = new TResultDetailDeletedCollection();
            var qry = new Query(TResultDetailDeleted.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TResultDetailDeletedCollection FetchByID(object Id)
        {
            TResultDetailDeletedCollection coll = new TResultDetailDeletedCollection().Where("Id", Id).Load();
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TResultDetailDeletedCollection FetchByQuery(Query qry)
        {
            var coll = new TResultDetailDeletedCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object Id)
        {
            return (TResultDetailDeleted.Delete(Id) == 1);
        }

        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object Id)
        {
            return (TResultDetailDeleted.Destroy(Id) == 1);
        }


        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public void Insert(decimal? TestDetailId, decimal? TestId, decimal? PatientId, int? TestTypeId,
            DateTime? TestDate, string TestSequence, int? DataSequence, string TestResult, string NormalLevelW,
            string NormalLevel, string MeasureUnit, string ParaName, short? ParaStatus, string Note, bool? PrintData,
            string Barcode, int? UpdateNum)
        {
            var item = new TResultDetailDeleted();

            item.TestDetailId = TestDetailId;

            item.TestId = TestId;

            item.PatientId = PatientId;

            item.TestTypeId = TestTypeId;

            item.TestDate = TestDate;

            item.TestSequence = TestSequence;

            item.DataSequence = DataSequence;

            item.TestResult = TestResult;

            item.NormalLevelW = NormalLevelW;

            item.NormalLevel = NormalLevel;

            item.MeasureUnit = MeasureUnit;

            item.ParaName = ParaName;

            item.ParaStatus = ParaStatus;

            item.Note = Note;

            item.PrintData = PrintData;

            item.Barcode = Barcode;

            item.UpdateNum = UpdateNum;


            item.Save(UserName);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public void Update(decimal Id, decimal? TestDetailId, decimal? TestId, decimal? PatientId, int? TestTypeId,
            DateTime? TestDate, string TestSequence, int? DataSequence, string TestResult, string NormalLevelW,
            string NormalLevel, string MeasureUnit, string ParaName, short? ParaStatus, string Note, bool? PrintData,
            string Barcode, int? UpdateNum)
        {
            var item = new TResultDetailDeleted();
            item.MarkOld();
            item.IsLoaded = true;

            item.Id = Id;

            item.TestDetailId = TestDetailId;

            item.TestId = TestId;

            item.PatientId = PatientId;

            item.TestTypeId = TestTypeId;

            item.TestDate = TestDate;

            item.TestSequence = TestSequence;

            item.DataSequence = DataSequence;

            item.TestResult = TestResult;

            item.NormalLevelW = NormalLevelW;

            item.NormalLevel = NormalLevel;

            item.MeasureUnit = MeasureUnit;

            item.ParaName = ParaName;

            item.ParaStatus = ParaStatus;

            item.Note = Note;

            item.PrintData = PrintData;

            item.Barcode = Barcode;

            item.UpdateNum = UpdateNum;

            item.Save(UserName);
        }
    }
}