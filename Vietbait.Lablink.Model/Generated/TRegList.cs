using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Strongly-typed collection for the TRegList class.
    /// </summary>
    [Serializable]
    public class TRegListCollection : ActiveList<TRegList, TRegListCollection>
    {
        /// <summary>
        ///     Filters an existing collection based on the set criteria. This is an in-memory filter
        ///     Thanks to developingchris for this!
        /// </summary>
        /// <returns>TRegListCollection</returns>
        public TRegListCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                TRegList o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    ///     This is an ActiveRecord class which wraps the T_REG_LIST table.
    /// </summary>
    [Serializable]
    public class TRegList : ActiveRecord<TRegList>, IActiveRecord
    {
        #region .ctors and Default Settings

        public TRegList()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public TRegList(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public TRegList(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public TRegList(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("T_REG_LIST", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarTestRegDetailId = new TableSchema.TableColumn(schema);
                colvarTestRegDetailId.ColumnName = "TestRegDetail_ID";
                colvarTestRegDetailId.DataType = DbType.Int64;
                colvarTestRegDetailId.MaxLength = 0;
                colvarTestRegDetailId.AutoIncrement = true;
                colvarTestRegDetailId.IsNullable = false;
                colvarTestRegDetailId.IsPrimaryKey = true;
                colvarTestRegDetailId.IsForeignKey = false;
                colvarTestRegDetailId.IsReadOnly = false;
                colvarTestRegDetailId.DefaultSetting = @"";
                colvarTestRegDetailId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTestRegDetailId);

                var colvarTestId = new TableSchema.TableColumn(schema);
                colvarTestId.ColumnName = "Test_ID";
                colvarTestId.DataType = DbType.Decimal;
                colvarTestId.MaxLength = 0;
                colvarTestId.AutoIncrement = false;
                colvarTestId.IsNullable = false;
                colvarTestId.IsPrimaryKey = false;
                colvarTestId.IsForeignKey = false;
                colvarTestId.IsReadOnly = false;
                colvarTestId.DefaultSetting = @"";
                colvarTestId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTestId);

                var colvarAliasName = new TableSchema.TableColumn(schema);
                colvarAliasName.ColumnName = "Alias_Name";
                colvarAliasName.DataType = DbType.String;
                colvarAliasName.MaxLength = 150;
                colvarAliasName.AutoIncrement = false;
                colvarAliasName.IsNullable = false;
                colvarAliasName.IsPrimaryKey = false;
                colvarAliasName.IsForeignKey = false;
                colvarAliasName.IsReadOnly = false;
                colvarAliasName.DefaultSetting = @"";
                colvarAliasName.ForeignKeyTableName = "";
                schema.Columns.Add(colvarAliasName);

                var colvarBarcode = new TableSchema.TableColumn(schema);
                colvarBarcode.ColumnName = "Barcode";
                colvarBarcode.DataType = DbType.AnsiString;
                colvarBarcode.MaxLength = 15;
                colvarBarcode.AutoIncrement = false;
                colvarBarcode.IsNullable = false;
                colvarBarcode.IsPrimaryKey = false;
                colvarBarcode.IsForeignKey = false;
                colvarBarcode.IsReadOnly = false;
                colvarBarcode.DefaultSetting = @"";
                colvarBarcode.ForeignKeyTableName = "";
                schema.Columns.Add(colvarBarcode);

                var colvarParaName = new TableSchema.TableColumn(schema);
                colvarParaName.ColumnName = "Para_Name";
                colvarParaName.DataType = DbType.String;
                colvarParaName.MaxLength = 100;
                colvarParaName.AutoIncrement = false;
                colvarParaName.IsNullable = false;
                colvarParaName.IsPrimaryKey = false;
                colvarParaName.IsForeignKey = false;
                colvarParaName.IsReadOnly = false;
                colvarParaName.DefaultSetting = @"";
                colvarParaName.ForeignKeyTableName = "";
                schema.Columns.Add(colvarParaName);

                var colvarStatus = new TableSchema.TableColumn(schema);
                colvarStatus.ColumnName = "Status";
                colvarStatus.DataType = DbType.Int16;
                colvarStatus.MaxLength = 0;
                colvarStatus.AutoIncrement = false;
                colvarStatus.IsNullable = false;
                colvarStatus.IsPrimaryKey = false;
                colvarStatus.IsForeignKey = false;
                colvarStatus.IsReadOnly = false;
                colvarStatus.DefaultSetting = @"";
                colvarStatus.ForeignKeyTableName = "";
                schema.Columns.Add(colvarStatus);

                var colvarDeviceId = new TableSchema.TableColumn(schema);
                colvarDeviceId.ColumnName = "Device_ID";
                colvarDeviceId.DataType = DbType.Int32;
                colvarDeviceId.MaxLength = 0;
                colvarDeviceId.AutoIncrement = false;
                colvarDeviceId.IsNullable = false;
                colvarDeviceId.IsPrimaryKey = false;
                colvarDeviceId.IsForeignKey = false;
                colvarDeviceId.IsReadOnly = false;

                colvarDeviceId.DefaultSetting = @"((12))";
                colvarDeviceId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDeviceId);

                var colvarTestDataId = new TableSchema.TableColumn(schema);
                colvarTestDataId.ColumnName = "TestData_ID";
                colvarTestDataId.DataType = DbType.String;
                colvarTestDataId.MaxLength = 100;
                colvarTestDataId.AutoIncrement = false;
                colvarTestDataId.IsNullable = true;
                colvarTestDataId.IsPrimaryKey = false;
                colvarTestDataId.IsForeignKey = false;
                colvarTestDataId.IsReadOnly = false;
                colvarTestDataId.DefaultSetting = @"";
                colvarTestDataId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTestDataId);

                var colvarHasResult = new TableSchema.TableColumn(schema);
                colvarHasResult.ColumnName = "Has_Result";
                colvarHasResult.DataType = DbType.Byte;
                colvarHasResult.MaxLength = 0;
                colvarHasResult.AutoIncrement = false;
                colvarHasResult.IsNullable = true;
                colvarHasResult.IsPrimaryKey = false;
                colvarHasResult.IsForeignKey = false;
                colvarHasResult.IsReadOnly = false;
                colvarHasResult.DefaultSetting = @"";
                colvarHasResult.ForeignKeyTableName = "";
                schema.Columns.Add(colvarHasResult);

                var colvarHisIdXn = new TableSchema.TableColumn(schema);
                colvarHisIdXn.ColumnName = "HIS_ID_XN";
                colvarHisIdXn.DataType = DbType.String;
                colvarHisIdXn.MaxLength = 50;
                colvarHisIdXn.AutoIncrement = false;
                colvarHisIdXn.IsNullable = true;
                colvarHisIdXn.IsPrimaryKey = false;
                colvarHisIdXn.IsForeignKey = false;
                colvarHisIdXn.IsReadOnly = false;
                colvarHisIdXn.DefaultSetting = @"";
                colvarHisIdXn.ForeignKeyTableName = "";
                schema.Columns.Add(colvarHisIdXn);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("T_REG_LIST", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("TestRegDetailId")]
        [Bindable(true)]
        public long TestRegDetailId
        {
            get { return GetColumnValue<long>(Columns.TestRegDetailId); }
            set { SetColumnValue(Columns.TestRegDetailId, value); }
        }

        [XmlAttribute("TestId")]
        [Bindable(true)]
        public decimal TestId
        {
            get { return GetColumnValue<decimal>(Columns.TestId); }
            set { SetColumnValue(Columns.TestId, value); }
        }

        [XmlAttribute("AliasName")]
        [Bindable(true)]
        public string AliasName
        {
            get { return GetColumnValue<string>(Columns.AliasName); }
            set { SetColumnValue(Columns.AliasName, value); }
        }

        [XmlAttribute("Barcode")]
        [Bindable(true)]
        public string Barcode
        {
            get { return GetColumnValue<string>(Columns.Barcode); }
            set { SetColumnValue(Columns.Barcode, value); }
        }

        [XmlAttribute("ParaName")]
        [Bindable(true)]
        public string ParaName
        {
            get { return GetColumnValue<string>(Columns.ParaName); }
            set { SetColumnValue(Columns.ParaName, value); }
        }

        [XmlAttribute("Status")]
        [Bindable(true)]
        public short Status
        {
            get { return GetColumnValue<short>(Columns.Status); }
            set { SetColumnValue(Columns.Status, value); }
        }

        [XmlAttribute("DeviceId")]
        [Bindable(true)]
        public int DeviceId
        {
            get { return GetColumnValue<int>(Columns.DeviceId); }
            set { SetColumnValue(Columns.DeviceId, value); }
        }

        [XmlAttribute("TestDataId")]
        [Bindable(true)]
        public string TestDataId
        {
            get { return GetColumnValue<string>(Columns.TestDataId); }
            set { SetColumnValue(Columns.TestDataId, value); }
        }

        [XmlAttribute("HasResult")]
        [Bindable(true)]
        public byte? HasResult
        {
            get { return GetColumnValue<byte?>(Columns.HasResult); }
            set { SetColumnValue(Columns.HasResult, value); }
        }

        [XmlAttribute("HisIdXn")]
        [Bindable(true)]
        public string HisIdXn
        {
            get { return GetColumnValue<string>(Columns.HisIdXn); }
            set { SetColumnValue(Columns.HisIdXn, value); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(decimal varTestId, string varAliasName, string varBarcode, string varParaName,
            short varStatus, int varDeviceId, string varTestDataId, byte? varHasResult, string varHisIdXn)
        {
            var item = new TRegList();

            item.TestId = varTestId;

            item.AliasName = varAliasName;

            item.Barcode = varBarcode;

            item.ParaName = varParaName;

            item.Status = varStatus;

            item.DeviceId = varDeviceId;

            item.TestDataId = varTestDataId;

            item.HasResult = varHasResult;

            item.HisIdXn = varHisIdXn;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(long varTestRegDetailId, decimal varTestId, string varAliasName, string varBarcode,
            string varParaName, short varStatus, int varDeviceId, string varTestDataId, byte? varHasResult,
            string varHisIdXn)
        {
            var item = new TRegList();

            item.TestRegDetailId = varTestRegDetailId;

            item.TestId = varTestId;

            item.AliasName = varAliasName;

            item.Barcode = varBarcode;

            item.ParaName = varParaName;

            item.Status = varStatus;

            item.DeviceId = varDeviceId;

            item.TestDataId = varTestDataId;

            item.HasResult = varHasResult;

            item.HisIdXn = varHisIdXn;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn TestRegDetailIdColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn TestIdColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn AliasNameColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn BarcodeColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn ParaNameColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn StatusColumn
        {
            get { return Schema.Columns[5]; }
        }


        public static TableSchema.TableColumn DeviceIdColumn
        {
            get { return Schema.Columns[6]; }
        }


        public static TableSchema.TableColumn TestDataIdColumn
        {
            get { return Schema.Columns[7]; }
        }


        public static TableSchema.TableColumn HasResultColumn
        {
            get { return Schema.Columns[8]; }
        }


        public static TableSchema.TableColumn HisIdXnColumn
        {
            get { return Schema.Columns[9]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string TestRegDetailId = @"TestRegDetail_ID";
            public static string TestId = @"Test_ID";
            public static string AliasName = @"Alias_Name";
            public static string Barcode = @"Barcode";
            public static string ParaName = @"Para_Name";
            public static string Status = @"Status";
            public static string DeviceId = @"Device_ID";
            public static string TestDataId = @"TestData_ID";
            public static string HasResult = @"Has_Result";
            public static string HisIdXn = @"HIS_ID_XN";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no foreign key tables defined (0)


        //no ManyToMany tables defined (0)
    }
}