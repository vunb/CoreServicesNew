using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Strongly-typed collection for the DDeviceList class.
    /// </summary>
    [Serializable]
    public class DDeviceListCollection : ActiveList<DDeviceList, DDeviceListCollection>
    {
        /// <summary>
        ///     Filters an existing collection based on the set criteria. This is an in-memory filter
        ///     Thanks to developingchris for this!
        /// </summary>
        /// <returns>DDeviceListCollection</returns>
        public DDeviceListCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                DDeviceList o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    ///     This is an ActiveRecord class which wraps the D_DEVICE_LIST table.
    /// </summary>
    [Serializable]
    public class DDeviceList : ActiveRecord<DDeviceList>, IActiveRecord
    {
        #region .ctors and Default Settings

        public DDeviceList()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public DDeviceList(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public DDeviceList(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public DDeviceList(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("D_DEVICE_LIST", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarDeviceId = new TableSchema.TableColumn(schema);
                colvarDeviceId.ColumnName = "Device_ID";
                colvarDeviceId.DataType = DbType.Decimal;
                colvarDeviceId.MaxLength = 0;
                colvarDeviceId.AutoIncrement = true;
                colvarDeviceId.IsNullable = false;
                colvarDeviceId.IsPrimaryKey = true;
                colvarDeviceId.IsForeignKey = false;
                colvarDeviceId.IsReadOnly = false;
                colvarDeviceId.DefaultSetting = @"";
                colvarDeviceId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDeviceId);

                var colvarDeviceType = new TableSchema.TableColumn(schema);
                colvarDeviceType.ColumnName = "Device_Type";
                colvarDeviceType.DataType = DbType.Int32;
                colvarDeviceType.MaxLength = 0;
                colvarDeviceType.AutoIncrement = false;
                colvarDeviceType.IsNullable = true;
                colvarDeviceType.IsPrimaryKey = false;
                colvarDeviceType.IsForeignKey = false;
                colvarDeviceType.IsReadOnly = false;
                colvarDeviceType.DefaultSetting = @"";
                colvarDeviceType.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDeviceType);

                var colvarTestTypeId = new TableSchema.TableColumn(schema);
                colvarTestTypeId.ColumnName = "TestType_ID";
                colvarTestTypeId.DataType = DbType.Int32;
                colvarTestTypeId.MaxLength = 0;
                colvarTestTypeId.AutoIncrement = false;
                colvarTestTypeId.IsNullable = true;
                colvarTestTypeId.IsPrimaryKey = false;
                colvarTestTypeId.IsForeignKey = false;
                colvarTestTypeId.IsReadOnly = false;
                colvarTestTypeId.DefaultSetting = @"";
                colvarTestTypeId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTestTypeId);

                var colvarDeviceName = new TableSchema.TableColumn(schema);
                colvarDeviceName.ColumnName = "Device_Name";
                colvarDeviceName.DataType = DbType.String;
                colvarDeviceName.MaxLength = 200;
                colvarDeviceName.AutoIncrement = false;
                colvarDeviceName.IsNullable = false;
                colvarDeviceName.IsPrimaryKey = false;
                colvarDeviceName.IsForeignKey = false;
                colvarDeviceName.IsReadOnly = false;
                colvarDeviceName.DefaultSetting = @"";
                colvarDeviceName.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDeviceName);

                var colvarPortId = new TableSchema.TableColumn(schema);
                colvarPortId.ColumnName = "Port_ID";
                colvarPortId.DataType = DbType.Int32;
                colvarPortId.MaxLength = 0;
                colvarPortId.AutoIncrement = false;
                colvarPortId.IsNullable = true;
                colvarPortId.IsPrimaryKey = false;
                colvarPortId.IsForeignKey = false;
                colvarPortId.IsReadOnly = false;
                colvarPortId.DefaultSetting = @"";
                colvarPortId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarPortId);

                var colvarManufactureId = new TableSchema.TableColumn(schema);
                colvarManufactureId.ColumnName = "Manufacture_ID";
                colvarManufactureId.DataType = DbType.Int16;
                colvarManufactureId.MaxLength = 0;
                colvarManufactureId.AutoIncrement = false;
                colvarManufactureId.IsNullable = true;
                colvarManufactureId.IsPrimaryKey = false;
                colvarManufactureId.IsForeignKey = false;
                colvarManufactureId.IsReadOnly = false;
                colvarManufactureId.DefaultSetting = @"";
                colvarManufactureId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarManufactureId);

                var colvarDeviceControl = new TableSchema.TableColumn(schema);
                colvarDeviceControl.ColumnName = "Device_Control";
                colvarDeviceControl.DataType = DbType.Boolean;
                colvarDeviceControl.MaxLength = 0;
                colvarDeviceControl.AutoIncrement = false;
                colvarDeviceControl.IsNullable = true;
                colvarDeviceControl.IsPrimaryKey = false;
                colvarDeviceControl.IsForeignKey = false;
                colvarDeviceControl.IsReadOnly = false;
                colvarDeviceControl.DefaultSetting = @"";
                colvarDeviceControl.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDeviceControl);

                var colvarValid = new TableSchema.TableColumn(schema);
                colvarValid.ColumnName = "Valid";
                colvarValid.DataType = DbType.Boolean;
                colvarValid.MaxLength = 0;
                colvarValid.AutoIncrement = false;
                colvarValid.IsNullable = true;
                colvarValid.IsPrimaryKey = false;
                colvarValid.IsForeignKey = false;
                colvarValid.IsReadOnly = false;
                colvarValid.DefaultSetting = @"";
                colvarValid.ForeignKeyTableName = "";
                schema.Columns.Add(colvarValid);

                var colvarDescription = new TableSchema.TableColumn(schema);
                colvarDescription.ColumnName = "Description";
                colvarDescription.DataType = DbType.String;
                colvarDescription.MaxLength = 200;
                colvarDescription.AutoIncrement = false;
                colvarDescription.IsNullable = true;
                colvarDescription.IsPrimaryKey = false;
                colvarDescription.IsForeignKey = false;
                colvarDescription.IsReadOnly = false;
                colvarDescription.DefaultSetting = @"";
                colvarDescription.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDescription);

                var colvarBarcodeType = new TableSchema.TableColumn(schema);
                colvarBarcodeType.ColumnName = "BarcodeType";
                colvarBarcodeType.DataType = DbType.AnsiString;
                colvarBarcodeType.MaxLength = 15;
                colvarBarcodeType.AutoIncrement = false;
                colvarBarcodeType.IsNullable = false;
                colvarBarcodeType.IsPrimaryKey = false;
                colvarBarcodeType.IsForeignKey = false;
                colvarBarcodeType.IsReadOnly = false;
                colvarBarcodeType.DefaultSetting = @"";
                colvarBarcodeType.ForeignKeyTableName = "";
                schema.Columns.Add(colvarBarcodeType);

                var colvarSendType = new TableSchema.TableColumn(schema);
                colvarSendType.ColumnName = "SendType";
                colvarSendType.DataType = DbType.Int16;
                colvarSendType.MaxLength = 0;
                colvarSendType.AutoIncrement = false;
                colvarSendType.IsNullable = false;
                colvarSendType.IsPrimaryKey = false;
                colvarSendType.IsForeignKey = false;
                colvarSendType.IsReadOnly = false;
                colvarSendType.DefaultSetting = @"";
                colvarSendType.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSendType);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("D_DEVICE_LIST", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("DeviceId")]
        [Bindable(true)]
        public decimal DeviceId
        {
            get { return GetColumnValue<decimal>(Columns.DeviceId); }
            set { SetColumnValue(Columns.DeviceId, value); }
        }

        [XmlAttribute("DeviceType")]
        [Bindable(true)]
        public int? DeviceType
        {
            get { return GetColumnValue<int?>(Columns.DeviceType); }
            set { SetColumnValue(Columns.DeviceType, value); }
        }

        [XmlAttribute("TestTypeId")]
        [Bindable(true)]
        public int? TestTypeId
        {
            get { return GetColumnValue<int?>(Columns.TestTypeId); }
            set { SetColumnValue(Columns.TestTypeId, value); }
        }

        [XmlAttribute("DeviceName")]
        [Bindable(true)]
        public string DeviceName
        {
            get { return GetColumnValue<string>(Columns.DeviceName); }
            set { SetColumnValue(Columns.DeviceName, value); }
        }

        [XmlAttribute("PortId")]
        [Bindable(true)]
        public int? PortId
        {
            get { return GetColumnValue<int?>(Columns.PortId); }
            set { SetColumnValue(Columns.PortId, value); }
        }

        [XmlAttribute("ManufactureId")]
        [Bindable(true)]
        public short? ManufactureId
        {
            get { return GetColumnValue<short?>(Columns.ManufactureId); }
            set { SetColumnValue(Columns.ManufactureId, value); }
        }

        [XmlAttribute("DeviceControl")]
        [Bindable(true)]
        public bool? DeviceControl
        {
            get { return GetColumnValue<bool?>(Columns.DeviceControl); }
            set { SetColumnValue(Columns.DeviceControl, value); }
        }

        [XmlAttribute("Valid")]
        [Bindable(true)]
        public bool? Valid
        {
            get { return GetColumnValue<bool?>(Columns.Valid); }
            set { SetColumnValue(Columns.Valid, value); }
        }

        [XmlAttribute("Description")]
        [Bindable(true)]
        public string Description
        {
            get { return GetColumnValue<string>(Columns.Description); }
            set { SetColumnValue(Columns.Description, value); }
        }

        [XmlAttribute("BarcodeType")]
        [Bindable(true)]
        public string BarcodeType
        {
            get { return GetColumnValue<string>(Columns.BarcodeType); }
            set { SetColumnValue(Columns.BarcodeType, value); }
        }

        [XmlAttribute("SendType")]
        [Bindable(true)]
        public short SendType
        {
            get { return GetColumnValue<short>(Columns.SendType); }
            set { SetColumnValue(Columns.SendType, value); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(int? varDeviceType, int? varTestTypeId, string varDeviceName, int? varPortId,
            short? varManufactureId, bool? varDeviceControl, bool? varValid, string varDescription,
            string varBarcodeType, short varSendType)
        {
            var item = new DDeviceList();

            item.DeviceType = varDeviceType;

            item.TestTypeId = varTestTypeId;

            item.DeviceName = varDeviceName;

            item.PortId = varPortId;

            item.ManufactureId = varManufactureId;

            item.DeviceControl = varDeviceControl;

            item.Valid = varValid;

            item.Description = varDescription;

            item.BarcodeType = varBarcodeType;

            item.SendType = varSendType;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(decimal varDeviceId, int? varDeviceType, int? varTestTypeId, string varDeviceName,
            int? varPortId, short? varManufactureId, bool? varDeviceControl, bool? varValid, string varDescription,
            string varBarcodeType, short varSendType)
        {
            var item = new DDeviceList();

            item.DeviceId = varDeviceId;

            item.DeviceType = varDeviceType;

            item.TestTypeId = varTestTypeId;

            item.DeviceName = varDeviceName;

            item.PortId = varPortId;

            item.ManufactureId = varManufactureId;

            item.DeviceControl = varDeviceControl;

            item.Valid = varValid;

            item.Description = varDescription;

            item.BarcodeType = varBarcodeType;

            item.SendType = varSendType;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn DeviceIdColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn DeviceTypeColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn TestTypeIdColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn DeviceNameColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn PortIdColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn ManufactureIdColumn
        {
            get { return Schema.Columns[5]; }
        }


        public static TableSchema.TableColumn DeviceControlColumn
        {
            get { return Schema.Columns[6]; }
        }


        public static TableSchema.TableColumn ValidColumn
        {
            get { return Schema.Columns[7]; }
        }


        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[8]; }
        }


        public static TableSchema.TableColumn BarcodeTypeColumn
        {
            get { return Schema.Columns[9]; }
        }


        public static TableSchema.TableColumn SendTypeColumn
        {
            get { return Schema.Columns[10]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string DeviceId = @"Device_ID";
            public static string DeviceType = @"Device_Type";
            public static string TestTypeId = @"TestType_ID";
            public static string DeviceName = @"Device_Name";
            public static string PortId = @"Port_ID";
            public static string ManufactureId = @"Manufacture_ID";
            public static string DeviceControl = @"Device_Control";
            public static string Valid = @"Valid";
            public static string Description = @"Description";
            public static string BarcodeType = @"BarcodeType";
            public static string SendType = @"SendType";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no foreign key tables defined (0)


        //no ManyToMany tables defined (0)
    }
}