using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Vietbait.Lablink.Model
{
	/// <summary>
	/// Strongly-typed collection for the KetnoiHisDanhmucDvu class.
	/// </summary>
    [Serializable]
	public partial class KetnoiHisDanhmucDvuCollection : ActiveList<KetnoiHisDanhmucDvu, KetnoiHisDanhmucDvuCollection>
	{	   
		public KetnoiHisDanhmucDvuCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>KetnoiHisDanhmucDvuCollection</returns>
		public KetnoiHisDanhmucDvuCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                KetnoiHisDanhmucDvu o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the KETNOI_HIS_DANHMUC_DVU table.
	/// </summary>
	[Serializable]
	public partial class KetnoiHisDanhmucDvu : ActiveRecord<KetnoiHisDanhmucDvu>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public KetnoiHisDanhmucDvu()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public KetnoiHisDanhmucDvu(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public KetnoiHisDanhmucDvu(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public KetnoiHisDanhmucDvu(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("KETNOI_HIS_DANHMUC_DVU", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarMaDvu = new TableSchema.TableColumn(schema);
				colvarMaDvu.ColumnName = "MA_DVU";
				colvarMaDvu.DataType = DbType.String;
				colvarMaDvu.MaxLength = 50;
				colvarMaDvu.AutoIncrement = false;
				colvarMaDvu.IsNullable = true;
				colvarMaDvu.IsPrimaryKey = false;
				colvarMaDvu.IsForeignKey = false;
				colvarMaDvu.IsReadOnly = false;
				colvarMaDvu.DefaultSetting = @"";
				colvarMaDvu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaDvu);
				
				TableSchema.TableColumn colvarTenDvu = new TableSchema.TableColumn(schema);
				colvarTenDvu.ColumnName = "TEN_DVU";
				colvarTenDvu.DataType = DbType.String;
				colvarTenDvu.MaxLength = 200;
				colvarTenDvu.AutoIncrement = false;
				colvarTenDvu.IsNullable = true;
				colvarTenDvu.IsPrimaryKey = false;
				colvarTenDvu.IsForeignKey = false;
				colvarTenDvu.IsReadOnly = false;
				colvarTenDvu.DefaultSetting = @"";
				colvarTenDvu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenDvu);
				
				TableSchema.TableColumn colvarMaNhom = new TableSchema.TableColumn(schema);
				colvarMaNhom.ColumnName = "MA_NHOM";
				colvarMaNhom.DataType = DbType.String;
				colvarMaNhom.MaxLength = 50;
				colvarMaNhom.AutoIncrement = false;
				colvarMaNhom.IsNullable = true;
				colvarMaNhom.IsPrimaryKey = false;
				colvarMaNhom.IsForeignKey = false;
				colvarMaNhom.IsReadOnly = false;
				colvarMaNhom.DefaultSetting = @"";
				colvarMaNhom.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaNhom);
				
				TableSchema.TableColumn colvarTenNhom = new TableSchema.TableColumn(schema);
				colvarTenNhom.ColumnName = "TEN_NHOM";
				colvarTenNhom.DataType = DbType.String;
				colvarTenNhom.MaxLength = 200;
				colvarTenNhom.AutoIncrement = false;
				colvarTenNhom.IsNullable = true;
				colvarTenNhom.IsPrimaryKey = false;
				colvarTenNhom.IsForeignKey = false;
				colvarTenNhom.IsReadOnly = false;
				colvarTenNhom.DefaultSetting = @"";
				colvarTenNhom.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenNhom);
				
				TableSchema.TableColumn colvarKieuDvu = new TableSchema.TableColumn(schema);
				colvarKieuDvu.ColumnName = "KIEU_DVU";
				colvarKieuDvu.DataType = DbType.AnsiString;
				colvarKieuDvu.MaxLength = 50;
				colvarKieuDvu.AutoIncrement = false;
				colvarKieuDvu.IsNullable = true;
				colvarKieuDvu.IsPrimaryKey = false;
				colvarKieuDvu.IsForeignKey = false;
				colvarKieuDvu.IsReadOnly = false;
				colvarKieuDvu.DefaultSetting = @"";
				colvarKieuDvu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarKieuDvu);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("KETNOI_HIS_DANHMUC_DVU",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("MaDvu")]
		[Bindable(true)]
		public string MaDvu 
		{
			get { return GetColumnValue<string>(Columns.MaDvu); }
			set { SetColumnValue(Columns.MaDvu, value); }
		}
		  
		[XmlAttribute("TenDvu")]
		[Bindable(true)]
		public string TenDvu 
		{
			get { return GetColumnValue<string>(Columns.TenDvu); }
			set { SetColumnValue(Columns.TenDvu, value); }
		}
		  
		[XmlAttribute("MaNhom")]
		[Bindable(true)]
		public string MaNhom 
		{
			get { return GetColumnValue<string>(Columns.MaNhom); }
			set { SetColumnValue(Columns.MaNhom, value); }
		}
		  
		[XmlAttribute("TenNhom")]
		[Bindable(true)]
		public string TenNhom 
		{
			get { return GetColumnValue<string>(Columns.TenNhom); }
			set { SetColumnValue(Columns.TenNhom, value); }
		}
		  
		[XmlAttribute("KieuDvu")]
		[Bindable(true)]
		public string KieuDvu 
		{
			get { return GetColumnValue<string>(Columns.KieuDvu); }
			set { SetColumnValue(Columns.KieuDvu, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMaDvu,string varTenDvu,string varMaNhom,string varTenNhom,string varKieuDvu)
		{
			KetnoiHisDanhmucDvu item = new KetnoiHisDanhmucDvu();
			
			item.MaDvu = varMaDvu;
			
			item.TenDvu = varTenDvu;
			
			item.MaNhom = varMaNhom;
			
			item.TenNhom = varTenNhom;
			
			item.KieuDvu = varKieuDvu;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varMaDvu,string varTenDvu,string varMaNhom,string varTenNhom,string varKieuDvu)
		{
			KetnoiHisDanhmucDvu item = new KetnoiHisDanhmucDvu();
			
				item.Id = varId;
			
				item.MaDvu = varMaDvu;
			
				item.TenDvu = varTenDvu;
			
				item.MaNhom = varMaNhom;
			
				item.TenNhom = varTenNhom;
			
				item.KieuDvu = varKieuDvu;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MaDvuColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TenDvuColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn MaNhomColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn TenNhomColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn KieuDvuColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string MaDvu = @"MA_DVU";
			 public static string TenDvu = @"TEN_DVU";
			 public static string MaNhom = @"MA_NHOM";
			 public static string TenNhom = @"TEN_NHOM";
			 public static string KieuDvu = @"KIEU_DVU";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
