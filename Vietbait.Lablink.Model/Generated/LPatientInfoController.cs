using System;
using System.ComponentModel;
using System.Threading;
using System.Web;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Controller class for L_PATIENT_INFO
    /// </summary>
    [DataObject]
    public class LPatientInfoController
    {
        // Preload our schema..
        private LPatientInfo thisSchemaLoad = new LPatientInfo();
        private string userName = String.Empty;

        protected string UserName
        {
            get
            {
                if (userName.Length == 0)
                {
                    if (HttpContext.Current != null)
                    {
                        userName = HttpContext.Current.User.Identity.Name;
                    }
                    else
                    {
                        userName = Thread.CurrentPrincipal.Identity.Name;
                    }
                }
                return userName;
            }
        }

        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public LPatientInfoCollection FetchAll()
        {
            var coll = new LPatientInfoCollection();
            var qry = new Query(LPatientInfo.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public LPatientInfoCollection FetchByID(object PatientId)
        {
            LPatientInfoCollection coll = new LPatientInfoCollection().Where("Patient_ID", PatientId).Load();
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public LPatientInfoCollection FetchByQuery(Query qry)
        {
            var coll = new LPatientInfoCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object PatientId)
        {
            return (LPatientInfo.Delete(PatientId) == 1);
        }

        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object PatientId)
        {
            return (LPatientInfo.Destroy(PatientId) == 1);
        }


        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public void Insert(string Pid, string PatientName, string Address, int? YearBirth, bool? Sex,
            string InsuranceNum, DateTime? Dateupdate, string Diagnostic, string IdentifyNum, short? DepartmentID,
            string Room, string Bed, int? ObjectType, int? HosStatus, DateTime? Dob, int? LotID, string CanLamSangId,
            byte? TestCount, byte? TestHasResult, byte? PrintStatus, short? HasAllResult, short? IsFinal)
        {
            var item = new LPatientInfo();

            item.Pid = Pid;

            item.PatientName = PatientName;

            item.Address = Address;

            item.YearBirth = YearBirth;

            item.Sex = Sex;

            item.InsuranceNum = InsuranceNum;

            item.Dateupdate = Dateupdate;

            item.Diagnostic = Diagnostic;

            item.IdentifyNum = IdentifyNum;

            item.DepartmentID = DepartmentID;

            item.Room = Room;

            item.Bed = Bed;

            item.ObjectType = ObjectType;

            item.HosStatus = HosStatus;

            item.Dob = Dob;

            item.LotID = LotID;

            item.CanLamSangId = CanLamSangId;

            item.TestCount = TestCount;

            item.TestHasResult = TestHasResult;

            item.PrintStatus = PrintStatus;

            item.HasAllResult = HasAllResult;

            item.IsFinal = IsFinal;


            item.Save(UserName);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public void Update(decimal PatientId, string Pid, string PatientName, string Address, int? YearBirth, bool? Sex,
            string InsuranceNum, DateTime? Dateupdate, string Diagnostic, string IdentifyNum, short? DepartmentID,
            string Room, string Bed, int? ObjectType, int? HosStatus, DateTime? Dob, int? LotID, string CanLamSangId,
            byte? TestCount, byte? TestHasResult, byte? PrintStatus, short? HasAllResult, short? IsFinal)
        {
            var item = new LPatientInfo();
            item.MarkOld();
            item.IsLoaded = true;

            item.PatientId = PatientId;

            item.Pid = Pid;

            item.PatientName = PatientName;

            item.Address = Address;

            item.YearBirth = YearBirth;

            item.Sex = Sex;

            item.InsuranceNum = InsuranceNum;

            item.Dateupdate = Dateupdate;

            item.Diagnostic = Diagnostic;

            item.IdentifyNum = IdentifyNum;

            item.DepartmentID = DepartmentID;

            item.Room = Room;

            item.Bed = Bed;

            item.ObjectType = ObjectType;

            item.HosStatus = HosStatus;

            item.Dob = Dob;

            item.LotID = LotID;

            item.CanLamSangId = CanLamSangId;

            item.TestCount = TestCount;

            item.TestHasResult = TestHasResult;

            item.PrintStatus = PrintStatus;

            item.HasAllResult = HasAllResult;

            item.IsFinal = IsFinal;

            item.Save(UserName);
        }
    }
}