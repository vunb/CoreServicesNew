using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Vietbait.Lablink.Model
{
	/// <summary>
	/// Strongly-typed collection for the KetnoiMappingHisLi class.
	/// </summary>
    [Serializable]
	public partial class KetnoiMappingHisLiCollection : ActiveList<KetnoiMappingHisLi, KetnoiMappingHisLiCollection>
	{	   
		public KetnoiMappingHisLiCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>KetnoiMappingHisLiCollection</returns>
		public KetnoiMappingHisLiCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                KetnoiMappingHisLi o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the KETNOI_MAPPING_HIS_LIS table.
	/// </summary>
	[Serializable]
	public partial class KetnoiMappingHisLi : ActiveRecord<KetnoiMappingHisLi>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public KetnoiMappingHisLi()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public KetnoiMappingHisLi(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public KetnoiMappingHisLi(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public KetnoiMappingHisLi(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("KETNOI_MAPPING_HIS_LIS", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarHisMaDvu = new TableSchema.TableColumn(schema);
				colvarHisMaDvu.ColumnName = "HIS_MA_DVU";
				colvarHisMaDvu.DataType = DbType.String;
				colvarHisMaDvu.MaxLength = 50;
				colvarHisMaDvu.AutoIncrement = false;
				colvarHisMaDvu.IsNullable = true;
				colvarHisMaDvu.IsPrimaryKey = false;
				colvarHisMaDvu.IsForeignKey = false;
				colvarHisMaDvu.IsReadOnly = false;
				colvarHisMaDvu.DefaultSetting = @"";
				colvarHisMaDvu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHisMaDvu);
				
				TableSchema.TableColumn colvarHisTenDvu = new TableSchema.TableColumn(schema);
				colvarHisTenDvu.ColumnName = "HIS_TEN_DVU";
				colvarHisTenDvu.DataType = DbType.String;
				colvarHisTenDvu.MaxLength = 200;
				colvarHisTenDvu.AutoIncrement = false;
				colvarHisTenDvu.IsNullable = true;
				colvarHisTenDvu.IsPrimaryKey = false;
				colvarHisTenDvu.IsForeignKey = false;
				colvarHisTenDvu.IsReadOnly = false;
				colvarHisTenDvu.DefaultSetting = @"";
				colvarHisTenDvu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHisTenDvu);
				
				TableSchema.TableColumn colvarHisMaNhom = new TableSchema.TableColumn(schema);
				colvarHisMaNhom.ColumnName = "HIS_MA_NHOM";
				colvarHisMaNhom.DataType = DbType.String;
				colvarHisMaNhom.MaxLength = 50;
				colvarHisMaNhom.AutoIncrement = false;
				colvarHisMaNhom.IsNullable = true;
				colvarHisMaNhom.IsPrimaryKey = false;
				colvarHisMaNhom.IsForeignKey = false;
				colvarHisMaNhom.IsReadOnly = false;
				colvarHisMaNhom.DefaultSetting = @"";
				colvarHisMaNhom.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHisMaNhom);
				
				TableSchema.TableColumn colvarHisTenNhom = new TableSchema.TableColumn(schema);
				colvarHisTenNhom.ColumnName = "HIS_TEN_NHOM";
				colvarHisTenNhom.DataType = DbType.String;
				colvarHisTenNhom.MaxLength = 200;
				colvarHisTenNhom.AutoIncrement = false;
				colvarHisTenNhom.IsNullable = true;
				colvarHisTenNhom.IsPrimaryKey = false;
				colvarHisTenNhom.IsForeignKey = false;
				colvarHisTenNhom.IsReadOnly = false;
				colvarHisTenNhom.DefaultSetting = @"";
				colvarHisTenNhom.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHisTenNhom);
				
				TableSchema.TableColumn colvarLisMaVu = new TableSchema.TableColumn(schema);
				colvarLisMaVu.ColumnName = "LIS_MA_VU";
				colvarLisMaVu.DataType = DbType.String;
				colvarLisMaVu.MaxLength = 50;
				colvarLisMaVu.AutoIncrement = false;
				colvarLisMaVu.IsNullable = true;
				colvarLisMaVu.IsPrimaryKey = false;
				colvarLisMaVu.IsForeignKey = false;
				colvarLisMaVu.IsReadOnly = false;
				colvarLisMaVu.DefaultSetting = @"";
				colvarLisMaVu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLisMaVu);
				
				TableSchema.TableColumn colvarLisTenDvu = new TableSchema.TableColumn(schema);
				colvarLisTenDvu.ColumnName = "LIS_TEN_DVU";
				colvarLisTenDvu.DataType = DbType.String;
				colvarLisTenDvu.MaxLength = 100;
				colvarLisTenDvu.AutoIncrement = false;
				colvarLisTenDvu.IsNullable = true;
				colvarLisTenDvu.IsPrimaryKey = false;
				colvarLisTenDvu.IsForeignKey = false;
				colvarLisTenDvu.IsReadOnly = false;
				colvarLisTenDvu.DefaultSetting = @"";
				colvarLisTenDvu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLisTenDvu);
				
				TableSchema.TableColumn colvarLisMaNhom = new TableSchema.TableColumn(schema);
				colvarLisMaNhom.ColumnName = "LIS_MA_NHOM";
				colvarLisMaNhom.DataType = DbType.String;
				colvarLisMaNhom.MaxLength = 50;
				colvarLisMaNhom.AutoIncrement = false;
				colvarLisMaNhom.IsNullable = true;
				colvarLisMaNhom.IsPrimaryKey = false;
				colvarLisMaNhom.IsForeignKey = false;
				colvarLisMaNhom.IsReadOnly = false;
				colvarLisMaNhom.DefaultSetting = @"";
				colvarLisMaNhom.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLisMaNhom);
				
				TableSchema.TableColumn colvarLisTenNhom = new TableSchema.TableColumn(schema);
				colvarLisTenNhom.ColumnName = "LIS_TEN_NHOM";
				colvarLisTenNhom.DataType = DbType.String;
				colvarLisTenNhom.MaxLength = 100;
				colvarLisTenNhom.AutoIncrement = false;
				colvarLisTenNhom.IsNullable = true;
				colvarLisTenNhom.IsPrimaryKey = false;
				colvarLisTenNhom.IsForeignKey = false;
				colvarLisTenNhom.IsReadOnly = false;
				colvarLisTenNhom.DefaultSetting = @"";
				colvarLisTenNhom.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLisTenNhom);
				
				TableSchema.TableColumn colvarLisKieuMap = new TableSchema.TableColumn(schema);
				colvarLisKieuMap.ColumnName = "LIS_KIEU_MAP";
				colvarLisKieuMap.DataType = DbType.String;
				colvarLisKieuMap.MaxLength = 50;
				colvarLisKieuMap.AutoIncrement = false;
				colvarLisKieuMap.IsNullable = true;
				colvarLisKieuMap.IsPrimaryKey = false;
				colvarLisKieuMap.IsForeignKey = false;
				colvarLisKieuMap.IsReadOnly = false;
				colvarLisKieuMap.DefaultSetting = @"";
				colvarLisKieuMap.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLisKieuMap);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("KETNOI_MAPPING_HIS_LIS",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("HisMaDvu")]
		[Bindable(true)]
		public string HisMaDvu 
		{
			get { return GetColumnValue<string>(Columns.HisMaDvu); }
			set { SetColumnValue(Columns.HisMaDvu, value); }
		}
		  
		[XmlAttribute("HisTenDvu")]
		[Bindable(true)]
		public string HisTenDvu 
		{
			get { return GetColumnValue<string>(Columns.HisTenDvu); }
			set { SetColumnValue(Columns.HisTenDvu, value); }
		}
		  
		[XmlAttribute("HisMaNhom")]
		[Bindable(true)]
		public string HisMaNhom 
		{
			get { return GetColumnValue<string>(Columns.HisMaNhom); }
			set { SetColumnValue(Columns.HisMaNhom, value); }
		}
		  
		[XmlAttribute("HisTenNhom")]
		[Bindable(true)]
		public string HisTenNhom 
		{
			get { return GetColumnValue<string>(Columns.HisTenNhom); }
			set { SetColumnValue(Columns.HisTenNhom, value); }
		}
		  
		[XmlAttribute("LisMaVu")]
		[Bindable(true)]
		public string LisMaVu 
		{
			get { return GetColumnValue<string>(Columns.LisMaVu); }
			set { SetColumnValue(Columns.LisMaVu, value); }
		}
		  
		[XmlAttribute("LisTenDvu")]
		[Bindable(true)]
		public string LisTenDvu 
		{
			get { return GetColumnValue<string>(Columns.LisTenDvu); }
			set { SetColumnValue(Columns.LisTenDvu, value); }
		}
		  
		[XmlAttribute("LisMaNhom")]
		[Bindable(true)]
		public string LisMaNhom 
		{
			get { return GetColumnValue<string>(Columns.LisMaNhom); }
			set { SetColumnValue(Columns.LisMaNhom, value); }
		}
		  
		[XmlAttribute("LisTenNhom")]
		[Bindable(true)]
		public string LisTenNhom 
		{
			get { return GetColumnValue<string>(Columns.LisTenNhom); }
			set { SetColumnValue(Columns.LisTenNhom, value); }
		}
		  
		[XmlAttribute("LisKieuMap")]
		[Bindable(true)]
		public string LisKieuMap 
		{
			get { return GetColumnValue<string>(Columns.LisKieuMap); }
			set { SetColumnValue(Columns.LisKieuMap, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varHisMaDvu,string varHisTenDvu,string varHisMaNhom,string varHisTenNhom,string varLisMaVu,string varLisTenDvu,string varLisMaNhom,string varLisTenNhom,string varLisKieuMap)
		{
			KetnoiMappingHisLi item = new KetnoiMappingHisLi();
			
			item.HisMaDvu = varHisMaDvu;
			
			item.HisTenDvu = varHisTenDvu;
			
			item.HisMaNhom = varHisMaNhom;
			
			item.HisTenNhom = varHisTenNhom;
			
			item.LisMaVu = varLisMaVu;
			
			item.LisTenDvu = varLisTenDvu;
			
			item.LisMaNhom = varLisMaNhom;
			
			item.LisTenNhom = varLisTenNhom;
			
			item.LisKieuMap = varLisKieuMap;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varHisMaDvu,string varHisTenDvu,string varHisMaNhom,string varHisTenNhom,string varLisMaVu,string varLisTenDvu,string varLisMaNhom,string varLisTenNhom,string varLisKieuMap)
		{
			KetnoiMappingHisLi item = new KetnoiMappingHisLi();
			
				item.Id = varId;
			
				item.HisMaDvu = varHisMaDvu;
			
				item.HisTenDvu = varHisTenDvu;
			
				item.HisMaNhom = varHisMaNhom;
			
				item.HisTenNhom = varHisTenNhom;
			
				item.LisMaVu = varLisMaVu;
			
				item.LisTenDvu = varLisTenDvu;
			
				item.LisMaNhom = varLisMaNhom;
			
				item.LisTenNhom = varLisTenNhom;
			
				item.LisKieuMap = varLisKieuMap;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn HisMaDvuColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn HisTenDvuColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn HisMaNhomColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn HisTenNhomColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn LisMaVuColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn LisTenDvuColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn LisMaNhomColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn LisTenNhomColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn LisKieuMapColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string HisMaDvu = @"HIS_MA_DVU";
			 public static string HisTenDvu = @"HIS_TEN_DVU";
			 public static string HisMaNhom = @"HIS_MA_NHOM";
			 public static string HisTenNhom = @"HIS_TEN_NHOM";
			 public static string LisMaVu = @"LIS_MA_VU";
			 public static string LisTenDvu = @"LIS_TEN_DVU";
			 public static string LisMaNhom = @"LIS_MA_NHOM";
			 public static string LisTenNhom = @"LIS_TEN_NHOM";
			 public static string LisKieuMap = @"LIS_KIEU_MAP";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
