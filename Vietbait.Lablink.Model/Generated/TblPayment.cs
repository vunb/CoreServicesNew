using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Strongly-typed collection for the TblPayment class.
    /// </summary>
    [Serializable]
    public class TblPaymentCollection : ActiveList<TblPayment, TblPaymentCollection>
    {
        /// <summary>
        ///     Filters an existing collection based on the set criteria. This is an in-memory filter
        ///     Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblPaymentCollection</returns>
        public TblPaymentCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                TblPayment o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    ///     This is an ActiveRecord class which wraps the tbl_Payment table.
    /// </summary>
    [Serializable]
    public class TblPayment : ActiveRecord<TblPayment>, IActiveRecord
    {
        #region .ctors and Default Settings

        public TblPayment()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public TblPayment(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public TblPayment(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public TblPayment(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("tbl_Payment", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarPaymentID = new TableSchema.TableColumn(schema);
                colvarPaymentID.ColumnName = "PaymentID";
                colvarPaymentID.DataType = DbType.Int64;
                colvarPaymentID.MaxLength = 0;
                colvarPaymentID.AutoIncrement = true;
                colvarPaymentID.IsNullable = false;
                colvarPaymentID.IsPrimaryKey = true;
                colvarPaymentID.IsForeignKey = false;
                colvarPaymentID.IsReadOnly = false;
                colvarPaymentID.DefaultSetting = @"";
                colvarPaymentID.ForeignKeyTableName = "";
                schema.Columns.Add(colvarPaymentID);

                var colvarPatientID = new TableSchema.TableColumn(schema);
                colvarPatientID.ColumnName = "PatientID";
                colvarPatientID.DataType = DbType.Int64;
                colvarPatientID.MaxLength = 0;
                colvarPatientID.AutoIncrement = false;
                colvarPatientID.IsNullable = true;
                colvarPatientID.IsPrimaryKey = false;
                colvarPatientID.IsForeignKey = false;
                colvarPatientID.IsReadOnly = false;
                colvarPatientID.DefaultSetting = @"";
                colvarPatientID.ForeignKeyTableName = "";
                schema.Columns.Add(colvarPatientID);

                var colvarRegID = new TableSchema.TableColumn(schema);
                colvarRegID.ColumnName = "RegID";
                colvarRegID.DataType = DbType.Int64;
                colvarRegID.MaxLength = 0;
                colvarRegID.AutoIncrement = false;
                colvarRegID.IsNullable = true;
                colvarRegID.IsPrimaryKey = false;
                colvarRegID.IsForeignKey = false;
                colvarRegID.IsReadOnly = false;
                colvarRegID.DefaultSetting = @"";
                colvarRegID.ForeignKeyTableName = "";
                schema.Columns.Add(colvarRegID);

                var colvarPaymentDate = new TableSchema.TableColumn(schema);
                colvarPaymentDate.ColumnName = "PaymentDate";
                colvarPaymentDate.DataType = DbType.DateTime;
                colvarPaymentDate.MaxLength = 0;
                colvarPaymentDate.AutoIncrement = false;
                colvarPaymentDate.IsNullable = true;
                colvarPaymentDate.IsPrimaryKey = false;
                colvarPaymentDate.IsForeignKey = false;
                colvarPaymentDate.IsReadOnly = false;
                colvarPaymentDate.DefaultSetting = @"";
                colvarPaymentDate.ForeignKeyTableName = "";
                schema.Columns.Add(colvarPaymentDate);

                var colvarTotalPayment = new TableSchema.TableColumn(schema);
                colvarTotalPayment.ColumnName = "TotalPayment";
                colvarTotalPayment.DataType = DbType.Currency;
                colvarTotalPayment.MaxLength = 0;
                colvarTotalPayment.AutoIncrement = false;
                colvarTotalPayment.IsNullable = true;
                colvarTotalPayment.IsPrimaryKey = false;
                colvarTotalPayment.IsForeignKey = false;
                colvarTotalPayment.IsReadOnly = false;
                colvarTotalPayment.DefaultSetting = @"";
                colvarTotalPayment.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTotalPayment);

                var colvarReasonID = new TableSchema.TableColumn(schema);
                colvarReasonID.ColumnName = "ReasonID";
                colvarReasonID.DataType = DbType.Int16;
                colvarReasonID.MaxLength = 0;
                colvarReasonID.AutoIncrement = false;
                colvarReasonID.IsNullable = true;
                colvarReasonID.IsPrimaryKey = false;
                colvarReasonID.IsForeignKey = false;
                colvarReasonID.IsReadOnly = false;
                colvarReasonID.DefaultSetting = @"";
                colvarReasonID.ForeignKeyTableName = "";
                schema.Columns.Add(colvarReasonID);

                var colvarSUser = new TableSchema.TableColumn(schema);
                colvarSUser.ColumnName = "sUser";
                colvarSUser.DataType = DbType.String;
                colvarSUser.MaxLength = 50;
                colvarSUser.AutoIncrement = false;
                colvarSUser.IsNullable = true;
                colvarSUser.IsPrimaryKey = false;
                colvarSUser.IsForeignKey = false;
                colvarSUser.IsReadOnly = false;
                colvarSUser.DefaultSetting = @"";
                colvarSUser.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSUser);

                var colvarSDesc = new TableSchema.TableColumn(schema);
                colvarSDesc.ColumnName = "sDesc";
                colvarSDesc.DataType = DbType.String;
                colvarSDesc.MaxLength = 100;
                colvarSDesc.AutoIncrement = false;
                colvarSDesc.IsNullable = true;
                colvarSDesc.IsPrimaryKey = false;
                colvarSDesc.IsForeignKey = false;
                colvarSDesc.IsReadOnly = false;
                colvarSDesc.DefaultSetting = @"";
                colvarSDesc.ForeignKeyTableName = "";
                schema.Columns.Add(colvarSDesc);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("tbl_Payment", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("PaymentID")]
        [Bindable(true)]
        public long PaymentID
        {
            get { return GetColumnValue<long>(Columns.PaymentID); }
            set { SetColumnValue(Columns.PaymentID, value); }
        }

        [XmlAttribute("PatientID")]
        [Bindable(true)]
        public long? PatientID
        {
            get { return GetColumnValue<long?>(Columns.PatientID); }
            set { SetColumnValue(Columns.PatientID, value); }
        }

        [XmlAttribute("RegID")]
        [Bindable(true)]
        public long? RegID
        {
            get { return GetColumnValue<long?>(Columns.RegID); }
            set { SetColumnValue(Columns.RegID, value); }
        }

        [XmlAttribute("PaymentDate")]
        [Bindable(true)]
        public DateTime? PaymentDate
        {
            get { return GetColumnValue<DateTime?>(Columns.PaymentDate); }
            set { SetColumnValue(Columns.PaymentDate, value); }
        }

        [XmlAttribute("TotalPayment")]
        [Bindable(true)]
        public decimal? TotalPayment
        {
            get { return GetColumnValue<decimal?>(Columns.TotalPayment); }
            set { SetColumnValue(Columns.TotalPayment, value); }
        }

        [XmlAttribute("ReasonID")]
        [Bindable(true)]
        public short? ReasonID
        {
            get { return GetColumnValue<short?>(Columns.ReasonID); }
            set { SetColumnValue(Columns.ReasonID, value); }
        }

        [XmlAttribute("SUser")]
        [Bindable(true)]
        public string SUser
        {
            get { return GetColumnValue<string>(Columns.SUser); }
            set { SetColumnValue(Columns.SUser, value); }
        }

        [XmlAttribute("SDesc")]
        [Bindable(true)]
        public string SDesc
        {
            get { return GetColumnValue<string>(Columns.SDesc); }
            set { SetColumnValue(Columns.SDesc, value); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(long? varPatientID, long? varRegID, DateTime? varPaymentDate, decimal? varTotalPayment,
            short? varReasonID, string varSUser, string varSDesc)
        {
            var item = new TblPayment();

            item.PatientID = varPatientID;

            item.RegID = varRegID;

            item.PaymentDate = varPaymentDate;

            item.TotalPayment = varTotalPayment;

            item.ReasonID = varReasonID;

            item.SUser = varSUser;

            item.SDesc = varSDesc;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(long varPaymentID, long? varPatientID, long? varRegID, DateTime? varPaymentDate,
            decimal? varTotalPayment, short? varReasonID, string varSUser, string varSDesc)
        {
            var item = new TblPayment();

            item.PaymentID = varPaymentID;

            item.PatientID = varPatientID;

            item.RegID = varRegID;

            item.PaymentDate = varPaymentDate;

            item.TotalPayment = varTotalPayment;

            item.ReasonID = varReasonID;

            item.SUser = varSUser;

            item.SDesc = varSDesc;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn PaymentIDColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn PatientIDColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn RegIDColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn PaymentDateColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn TotalPaymentColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn ReasonIDColumn
        {
            get { return Schema.Columns[5]; }
        }


        public static TableSchema.TableColumn SUserColumn
        {
            get { return Schema.Columns[6]; }
        }


        public static TableSchema.TableColumn SDescColumn
        {
            get { return Schema.Columns[7]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string PaymentID = @"PaymentID";
            public static string PatientID = @"PatientID";
            public static string RegID = @"RegID";
            public static string PaymentDate = @"PaymentDate";
            public static string TotalPayment = @"TotalPayment";
            public static string ReasonID = @"ReasonID";
            public static string SUser = @"sUser";
            public static string SDesc = @"sDesc";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no foreign key tables defined (0)


        //no ManyToMany tables defined (0)
    }
}