using System;
using System.ComponentModel;
using System.Threading;
using System.Web;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Controller class for tbl_Version
    /// </summary>
    [DataObject]
    public class TblVersionController
    {
        // Preload our schema..
        private TblVersion thisSchemaLoad = new TblVersion();
        private string userName = String.Empty;

        protected string UserName
        {
            get
            {
                if (userName.Length == 0)
                {
                    if (HttpContext.Current != null)
                    {
                        userName = HttpContext.Current.User.Identity.Name;
                    }
                    else
                    {
                        userName = Thread.CurrentPrincipal.Identity.Name;
                    }
                }
                return userName;
            }
        }

        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TblVersionCollection FetchAll()
        {
            var coll = new TblVersionCollection();
            var qry = new Query(TblVersion.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblVersionCollection FetchByID(object PkIntID)
        {
            TblVersionCollection coll = new TblVersionCollection().Where("PK_intID", PkIntID).Load();
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TblVersionCollection FetchByQuery(Query qry)
        {
            var coll = new TblVersionCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }

        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object PkIntID)
        {
            return (TblVersion.Delete(PkIntID) == 1);
        }

        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object PkIntID)
        {
            return (TblVersion.Destroy(PkIntID) == 1);
        }


        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public void Insert(string SFileName, string SRarFileName, byte[] ObjData, string SVersion, short? IntRar,
            short? IntPatch, DateTime? TUpdatedDate, int? DblCapacity, string SDesc)
        {
            var item = new TblVersion();

            item.SFileName = SFileName;

            item.SRarFileName = SRarFileName;

            item.ObjData = ObjData;

            item.SVersion = SVersion;

            item.IntRar = IntRar;

            item.IntPatch = IntPatch;

            item.TUpdatedDate = TUpdatedDate;

            item.DblCapacity = DblCapacity;

            item.SDesc = SDesc;


            item.Save(UserName);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public void Update(int PkIntID, string SFileName, string SRarFileName, byte[] ObjData, string SVersion,
            short? IntRar, short? IntPatch, DateTime? TUpdatedDate, int? DblCapacity, string SDesc)
        {
            var item = new TblVersion();
            item.MarkOld();
            item.IsLoaded = true;

            item.PkIntID = PkIntID;

            item.SFileName = SFileName;

            item.SRarFileName = SRarFileName;

            item.ObjData = ObjData;

            item.SVersion = SVersion;

            item.IntRar = IntRar;

            item.IntPatch = IntPatch;

            item.TUpdatedDate = TUpdatedDate;

            item.DblCapacity = DblCapacity;

            item.SDesc = SDesc;

            item.Save(UserName);
        }
    }
}