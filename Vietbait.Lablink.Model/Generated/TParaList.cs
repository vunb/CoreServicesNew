using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Strongly-typed collection for the TParaList class.
    /// </summary>
    [Serializable]
    public class TParaListCollection : ActiveList<TParaList, TParaListCollection>
    {
        /// <summary>
        ///     Filters an existing collection based on the set criteria. This is an in-memory filter
        ///     Thanks to developingchris for this!
        /// </summary>
        /// <returns>TParaListCollection</returns>
        public TParaListCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                TParaList o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    ///     This is an ActiveRecord class which wraps the T_PARA_LIST table.
    /// </summary>
    [Serializable]
    public class TParaList : ActiveRecord<TParaList>, IActiveRecord
    {
        #region .ctors and Default Settings

        public TParaList()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public TParaList(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public TParaList(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public TParaList(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("T_PARA_LIST", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarParaId = new TableSchema.TableColumn(schema);
                colvarParaId.ColumnName = "Para_ID";
                colvarParaId.DataType = DbType.String;
                colvarParaId.MaxLength = 50;
                colvarParaId.AutoIncrement = false;
                colvarParaId.IsNullable = false;
                colvarParaId.IsPrimaryKey = true;
                colvarParaId.IsForeignKey = false;
                colvarParaId.IsReadOnly = false;
                colvarParaId.DefaultSetting = @"";
                colvarParaId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarParaId);

                var colvarParaName = new TableSchema.TableColumn(schema);
                colvarParaName.ColumnName = "Para_Name";
                colvarParaName.DataType = DbType.String;
                colvarParaName.MaxLength = 200;
                colvarParaName.AutoIncrement = false;
                colvarParaName.IsNullable = true;
                colvarParaName.IsPrimaryKey = false;
                colvarParaName.IsForeignKey = false;
                colvarParaName.IsReadOnly = false;
                colvarParaName.DefaultSetting = @"";
                colvarParaName.ForeignKeyTableName = "";
                schema.Columns.Add(colvarParaName);

                var colvarMeasureUnit = new TableSchema.TableColumn(schema);
                colvarMeasureUnit.ColumnName = "Measure_Unit";
                colvarMeasureUnit.DataType = DbType.String;
                colvarMeasureUnit.MaxLength = 50;
                colvarMeasureUnit.AutoIncrement = false;
                colvarMeasureUnit.IsNullable = true;
                colvarMeasureUnit.IsPrimaryKey = false;
                colvarMeasureUnit.IsForeignKey = false;
                colvarMeasureUnit.IsReadOnly = false;
                colvarMeasureUnit.DefaultSetting = @"";
                colvarMeasureUnit.ForeignKeyTableName = "";
                schema.Columns.Add(colvarMeasureUnit);

                var colvarDescription = new TableSchema.TableColumn(schema);
                colvarDescription.ColumnName = "Description";
                colvarDescription.DataType = DbType.String;
                colvarDescription.MaxLength = 200;
                colvarDescription.AutoIncrement = false;
                colvarDescription.IsNullable = true;
                colvarDescription.IsPrimaryKey = false;
                colvarDescription.IsForeignKey = false;
                colvarDescription.IsReadOnly = false;
                colvarDescription.DefaultSetting = @"";
                colvarDescription.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDescription);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("T_PARA_LIST", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("ParaId")]
        [Bindable(true)]
        public string ParaId
        {
            get { return GetColumnValue<string>(Columns.ParaId); }
            set { SetColumnValue(Columns.ParaId, value); }
        }

        [XmlAttribute("ParaName")]
        [Bindable(true)]
        public string ParaName
        {
            get { return GetColumnValue<string>(Columns.ParaName); }
            set { SetColumnValue(Columns.ParaName, value); }
        }

        [XmlAttribute("MeasureUnit")]
        [Bindable(true)]
        public string MeasureUnit
        {
            get { return GetColumnValue<string>(Columns.MeasureUnit); }
            set { SetColumnValue(Columns.MeasureUnit, value); }
        }

        [XmlAttribute("Description")]
        [Bindable(true)]
        public string Description
        {
            get { return GetColumnValue<string>(Columns.Description); }
            set { SetColumnValue(Columns.Description, value); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(string varParaId, string varParaName, string varMeasureUnit, string varDescription)
        {
            var item = new TParaList();

            item.ParaId = varParaId;

            item.ParaName = varParaName;

            item.MeasureUnit = varMeasureUnit;

            item.Description = varDescription;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(string varParaId, string varParaName, string varMeasureUnit, string varDescription)
        {
            var item = new TParaList();

            item.ParaId = varParaId;

            item.ParaName = varParaName;

            item.MeasureUnit = varMeasureUnit;

            item.Description = varDescription;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn ParaIdColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn ParaNameColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn MeasureUnitColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[3]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string ParaId = @"Para_ID";
            public static string ParaName = @"Para_Name";
            public static string MeasureUnit = @"Measure_Unit";
            public static string Description = @"Description";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no foreign key tables defined (0)


        //no ManyToMany tables defined (0)
    }
}