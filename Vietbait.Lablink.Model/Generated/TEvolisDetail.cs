using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Strongly-typed collection for the TEvolisDetail class.
    /// </summary>
    [Serializable]
    public class TEvolisDetailCollection : ActiveList<TEvolisDetail, TEvolisDetailCollection>
    {
        /// <summary>
        ///     Filters an existing collection based on the set criteria. This is an in-memory filter
        ///     Thanks to developingchris for this!
        /// </summary>
        /// <returns>TEvolisDetailCollection</returns>
        public TEvolisDetailCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                TEvolisDetail o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    ///     This is an ActiveRecord class which wraps the T_Evolis_detail table.
    /// </summary>
    [Serializable]
    public class TEvolisDetail : ActiveRecord<TEvolisDetail>, IActiveRecord
    {
        #region .ctors and Default Settings

        public TEvolisDetail()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public TEvolisDetail(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public TEvolisDetail(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public TEvolisDetail(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("T_Evolis_detail", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarId = new TableSchema.TableColumn(schema);
                colvarId.ColumnName = "ID";
                colvarId.DataType = DbType.Int64;
                colvarId.MaxLength = 0;
                colvarId.AutoIncrement = true;
                colvarId.IsNullable = false;
                colvarId.IsPrimaryKey = true;
                colvarId.IsForeignKey = false;
                colvarId.IsReadOnly = false;
                colvarId.DefaultSetting = @"";
                colvarId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarId);

                var colvarEventName = new TableSchema.TableColumn(schema);
                colvarEventName.ColumnName = "EventName";
                colvarEventName.DataType = DbType.String;
                colvarEventName.MaxLength = 50;
                colvarEventName.AutoIncrement = false;
                colvarEventName.IsNullable = true;
                colvarEventName.IsPrimaryKey = false;
                colvarEventName.IsForeignKey = false;
                colvarEventName.IsReadOnly = false;
                colvarEventName.DefaultSetting = @"";
                colvarEventName.ForeignKeyTableName = "";
                schema.Columns.Add(colvarEventName);

                var colvarLogFileName = new TableSchema.TableColumn(schema);
                colvarLogFileName.ColumnName = "LogFileName";
                colvarLogFileName.DataType = DbType.String;
                colvarLogFileName.MaxLength = 200;
                colvarLogFileName.AutoIncrement = false;
                colvarLogFileName.IsNullable = true;
                colvarLogFileName.IsPrimaryKey = false;
                colvarLogFileName.IsForeignKey = false;
                colvarLogFileName.IsReadOnly = false;
                colvarLogFileName.DefaultSetting = @"";
                colvarLogFileName.ForeignKeyTableName = "";
                schema.Columns.Add(colvarLogFileName);

                var colvarInstrumentId = new TableSchema.TableColumn(schema);
                colvarInstrumentId.ColumnName = "InstrumentId";
                colvarInstrumentId.DataType = DbType.String;
                colvarInstrumentId.MaxLength = 50;
                colvarInstrumentId.AutoIncrement = false;
                colvarInstrumentId.IsNullable = true;
                colvarInstrumentId.IsPrimaryKey = false;
                colvarInstrumentId.IsForeignKey = false;
                colvarInstrumentId.IsReadOnly = false;
                colvarInstrumentId.DefaultSetting = @"";
                colvarInstrumentId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarInstrumentId);

                var colvarAssayName = new TableSchema.TableColumn(schema);
                colvarAssayName.ColumnName = "AssayName";
                colvarAssayName.DataType = DbType.String;
                colvarAssayName.MaxLength = 50;
                colvarAssayName.AutoIncrement = false;
                colvarAssayName.IsNullable = true;
                colvarAssayName.IsPrimaryKey = false;
                colvarAssayName.IsForeignKey = false;
                colvarAssayName.IsReadOnly = false;
                colvarAssayName.DefaultSetting = @"";
                colvarAssayName.ForeignKeyTableName = "";
                schema.Columns.Add(colvarAssayName);

                var colvarOperatorName = new TableSchema.TableColumn(schema);
                colvarOperatorName.ColumnName = "OperatorName";
                colvarOperatorName.DataType = DbType.String;
                colvarOperatorName.MaxLength = 50;
                colvarOperatorName.AutoIncrement = false;
                colvarOperatorName.IsNullable = true;
                colvarOperatorName.IsPrimaryKey = false;
                colvarOperatorName.IsForeignKey = false;
                colvarOperatorName.IsReadOnly = false;
                colvarOperatorName.DefaultSetting = @"";
                colvarOperatorName.ForeignKeyTableName = "";
                schema.Columns.Add(colvarOperatorName);

                var colvarBeginTime = new TableSchema.TableColumn(schema);
                colvarBeginTime.ColumnName = "BeginTime";
                colvarBeginTime.DataType = DbType.String;
                colvarBeginTime.MaxLength = 50;
                colvarBeginTime.AutoIncrement = false;
                colvarBeginTime.IsNullable = true;
                colvarBeginTime.IsPrimaryKey = false;
                colvarBeginTime.IsForeignKey = false;
                colvarBeginTime.IsReadOnly = false;
                colvarBeginTime.DefaultSetting = @"";
                colvarBeginTime.ForeignKeyTableName = "";
                schema.Columns.Add(colvarBeginTime);

                var colvarLotNumber = new TableSchema.TableColumn(schema);
                colvarLotNumber.ColumnName = "LotNumber";
                colvarLotNumber.DataType = DbType.String;
                colvarLotNumber.MaxLength = 50;
                colvarLotNumber.AutoIncrement = false;
                colvarLotNumber.IsNullable = true;
                colvarLotNumber.IsPrimaryKey = false;
                colvarLotNumber.IsForeignKey = false;
                colvarLotNumber.IsReadOnly = false;
                colvarLotNumber.DefaultSetting = @"";
                colvarLotNumber.ForeignKeyTableName = "";
                schema.Columns.Add(colvarLotNumber);

                var colvarLowerLimit = new TableSchema.TableColumn(schema);
                colvarLowerLimit.ColumnName = "lowerLimit";
                colvarLowerLimit.DataType = DbType.String;
                colvarLowerLimit.MaxLength = 50;
                colvarLowerLimit.AutoIncrement = false;
                colvarLowerLimit.IsNullable = true;
                colvarLowerLimit.IsPrimaryKey = false;
                colvarLowerLimit.IsForeignKey = false;
                colvarLowerLimit.IsReadOnly = false;
                colvarLowerLimit.DefaultSetting = @"";
                colvarLowerLimit.ForeignKeyTableName = "";
                schema.Columns.Add(colvarLowerLimit);

                var colvarExpirationDate = new TableSchema.TableColumn(schema);
                colvarExpirationDate.ColumnName = "ExpirationDate";
                colvarExpirationDate.DataType = DbType.String;
                colvarExpirationDate.MaxLength = 50;
                colvarExpirationDate.AutoIncrement = false;
                colvarExpirationDate.IsNullable = true;
                colvarExpirationDate.IsPrimaryKey = false;
                colvarExpirationDate.IsForeignKey = false;
                colvarExpirationDate.IsReadOnly = false;
                colvarExpirationDate.DefaultSetting = @"";
                colvarExpirationDate.ForeignKeyTableName = "";
                schema.Columns.Add(colvarExpirationDate);

                var colvarDateUpdate = new TableSchema.TableColumn(schema);
                colvarDateUpdate.ColumnName = "DateUpdate";
                colvarDateUpdate.DataType = DbType.DateTime;
                colvarDateUpdate.MaxLength = 0;
                colvarDateUpdate.AutoIncrement = false;
                colvarDateUpdate.IsNullable = false;
                colvarDateUpdate.IsPrimaryKey = false;
                colvarDateUpdate.IsForeignKey = false;
                colvarDateUpdate.IsReadOnly = false;

                colvarDateUpdate.DefaultSetting = @"(getdate())";
                colvarDateUpdate.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDateUpdate);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("T_Evolis_detail", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("Id")]
        [Bindable(true)]
        public long Id
        {
            get { return GetColumnValue<long>(Columns.Id); }
            set { SetColumnValue(Columns.Id, value); }
        }

        [XmlAttribute("EventName")]
        [Bindable(true)]
        public string EventName
        {
            get { return GetColumnValue<string>(Columns.EventName); }
            set { SetColumnValue(Columns.EventName, value); }
        }

        [XmlAttribute("LogFileName")]
        [Bindable(true)]
        public string LogFileName
        {
            get { return GetColumnValue<string>(Columns.LogFileName); }
            set { SetColumnValue(Columns.LogFileName, value); }
        }

        [XmlAttribute("InstrumentId")]
        [Bindable(true)]
        public string InstrumentId
        {
            get { return GetColumnValue<string>(Columns.InstrumentId); }
            set { SetColumnValue(Columns.InstrumentId, value); }
        }

        [XmlAttribute("AssayName")]
        [Bindable(true)]
        public string AssayName
        {
            get { return GetColumnValue<string>(Columns.AssayName); }
            set { SetColumnValue(Columns.AssayName, value); }
        }

        [XmlAttribute("OperatorName")]
        [Bindable(true)]
        public string OperatorName
        {
            get { return GetColumnValue<string>(Columns.OperatorName); }
            set { SetColumnValue(Columns.OperatorName, value); }
        }

        [XmlAttribute("BeginTime")]
        [Bindable(true)]
        public string BeginTime
        {
            get { return GetColumnValue<string>(Columns.BeginTime); }
            set { SetColumnValue(Columns.BeginTime, value); }
        }

        [XmlAttribute("LotNumber")]
        [Bindable(true)]
        public string LotNumber
        {
            get { return GetColumnValue<string>(Columns.LotNumber); }
            set { SetColumnValue(Columns.LotNumber, value); }
        }

        [XmlAttribute("LowerLimit")]
        [Bindable(true)]
        public string LowerLimit
        {
            get { return GetColumnValue<string>(Columns.LowerLimit); }
            set { SetColumnValue(Columns.LowerLimit, value); }
        }

        [XmlAttribute("ExpirationDate")]
        [Bindable(true)]
        public string ExpirationDate
        {
            get { return GetColumnValue<string>(Columns.ExpirationDate); }
            set { SetColumnValue(Columns.ExpirationDate, value); }
        }

        [XmlAttribute("DateUpdate")]
        [Bindable(true)]
        public DateTime DateUpdate
        {
            get { return GetColumnValue<DateTime>(Columns.DateUpdate); }
            set { SetColumnValue(Columns.DateUpdate, value); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(string varEventName, string varLogFileName, string varInstrumentId,
            string varAssayName, string varOperatorName, string varBeginTime, string varLotNumber,
            string varLowerLimit, string varExpirationDate, DateTime varDateUpdate)
        {
            var item = new TEvolisDetail();

            item.EventName = varEventName;

            item.LogFileName = varLogFileName;

            item.InstrumentId = varInstrumentId;

            item.AssayName = varAssayName;

            item.OperatorName = varOperatorName;

            item.BeginTime = varBeginTime;

            item.LotNumber = varLotNumber;

            item.LowerLimit = varLowerLimit;

            item.ExpirationDate = varExpirationDate;

            item.DateUpdate = varDateUpdate;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(long varId, string varEventName, string varLogFileName, string varInstrumentId,
            string varAssayName, string varOperatorName, string varBeginTime, string varLotNumber,
            string varLowerLimit, string varExpirationDate, DateTime varDateUpdate)
        {
            var item = new TEvolisDetail();

            item.Id = varId;

            item.EventName = varEventName;

            item.LogFileName = varLogFileName;

            item.InstrumentId = varInstrumentId;

            item.AssayName = varAssayName;

            item.OperatorName = varOperatorName;

            item.BeginTime = varBeginTime;

            item.LotNumber = varLotNumber;

            item.LowerLimit = varLowerLimit;

            item.ExpirationDate = varExpirationDate;

            item.DateUpdate = varDateUpdate;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn EventNameColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn LogFileNameColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn InstrumentIdColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn AssayNameColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn OperatorNameColumn
        {
            get { return Schema.Columns[5]; }
        }


        public static TableSchema.TableColumn BeginTimeColumn
        {
            get { return Schema.Columns[6]; }
        }


        public static TableSchema.TableColumn LotNumberColumn
        {
            get { return Schema.Columns[7]; }
        }


        public static TableSchema.TableColumn LowerLimitColumn
        {
            get { return Schema.Columns[8]; }
        }


        public static TableSchema.TableColumn ExpirationDateColumn
        {
            get { return Schema.Columns[9]; }
        }


        public static TableSchema.TableColumn DateUpdateColumn
        {
            get { return Schema.Columns[10]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string Id = @"ID";
            public static string EventName = @"EventName";
            public static string LogFileName = @"LogFileName";
            public static string InstrumentId = @"InstrumentId";
            public static string AssayName = @"AssayName";
            public static string OperatorName = @"OperatorName";
            public static string BeginTime = @"BeginTime";
            public static string LotNumber = @"LotNumber";
            public static string LowerLimit = @"lowerLimit";
            public static string ExpirationDate = @"ExpirationDate";
            public static string DateUpdate = @"DateUpdate";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no foreign key tables defined (0)


        //no ManyToMany tables defined (0)
    }
}