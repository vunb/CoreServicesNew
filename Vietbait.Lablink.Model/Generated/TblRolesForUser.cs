using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Strongly-typed collection for the TblRolesForUser class.
    /// </summary>
    [Serializable]
    public class TblRolesForUserCollection : ActiveList<TblRolesForUser, TblRolesForUserCollection>
    {
        /// <summary>
        ///     Filters an existing collection based on the set criteria. This is an in-memory filter
        ///     Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblRolesForUserCollection</returns>
        public TblRolesForUserCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                TblRolesForUser o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    ///     This is an ActiveRecord class which wraps the tbl_RolesForUsers table.
    /// </summary>
    [Serializable]
    public class TblRolesForUser : ActiveRecord<TblRolesForUser>, IActiveRecord
    {
        #region .ctors and Default Settings

        public TblRolesForUser()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public TblRolesForUser(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public TblRolesForUser(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public TblRolesForUser(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("tbl_RolesForUsers", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarSUID = new TableSchema.TableColumn(schema);
                colvarSUID.ColumnName = "sUID";
                colvarSUID.DataType = DbType.String;
                colvarSUID.MaxLength = 50;
                colvarSUID.AutoIncrement = false;
                colvarSUID.IsNullable = false;
                colvarSUID.IsPrimaryKey = true;
                colvarSUID.IsForeignKey = true;
                colvarSUID.IsReadOnly = false;
                colvarSUID.DefaultSetting = @"";

                colvarSUID.ForeignKeyTableName = "tbl_Users";
                schema.Columns.Add(colvarSUID);

                var colvarIRoleID = new TableSchema.TableColumn(schema);
                colvarIRoleID.ColumnName = "iRoleID";
                colvarIRoleID.DataType = DbType.Int64;
                colvarIRoleID.MaxLength = 0;
                colvarIRoleID.AutoIncrement = false;
                colvarIRoleID.IsNullable = false;
                colvarIRoleID.IsPrimaryKey = true;
                colvarIRoleID.IsForeignKey = true;
                colvarIRoleID.IsReadOnly = false;
                colvarIRoleID.DefaultSetting = @"";

                colvarIRoleID.ForeignKeyTableName = "tbl_Roles";
                schema.Columns.Add(colvarIRoleID);

                var colvarIParentRoleID = new TableSchema.TableColumn(schema);
                colvarIParentRoleID.ColumnName = "iParentRoleID";
                colvarIParentRoleID.DataType = DbType.Int64;
                colvarIParentRoleID.MaxLength = 0;
                colvarIParentRoleID.AutoIncrement = false;
                colvarIParentRoleID.IsNullable = false;
                colvarIParentRoleID.IsPrimaryKey = true;
                colvarIParentRoleID.IsForeignKey = false;
                colvarIParentRoleID.IsReadOnly = false;
                colvarIParentRoleID.DefaultSetting = @"";
                colvarIParentRoleID.ForeignKeyTableName = "";
                schema.Columns.Add(colvarIParentRoleID);

                var colvarFpSBranchID = new TableSchema.TableColumn(schema);
                colvarFpSBranchID.ColumnName = "FP_sBranchID";
                colvarFpSBranchID.DataType = DbType.String;
                colvarFpSBranchID.MaxLength = 10;
                colvarFpSBranchID.AutoIncrement = false;
                colvarFpSBranchID.IsNullable = false;
                colvarFpSBranchID.IsPrimaryKey = true;
                colvarFpSBranchID.IsForeignKey = true;
                colvarFpSBranchID.IsReadOnly = false;
                colvarFpSBranchID.DefaultSetting = @"";

                colvarFpSBranchID.ForeignKeyTableName = "tbl_Users";
                schema.Columns.Add(colvarFpSBranchID);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("tbl_RolesForUsers", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("SUID")]
        [Bindable(true)]
        public string SUID
        {
            get { return GetColumnValue<string>(Columns.SUID); }
            set { SetColumnValue(Columns.SUID, value); }
        }

        [XmlAttribute("IRoleID")]
        [Bindable(true)]
        public long IRoleID
        {
            get { return GetColumnValue<long>(Columns.IRoleID); }
            set { SetColumnValue(Columns.IRoleID, value); }
        }

        [XmlAttribute("IParentRoleID")]
        [Bindable(true)]
        public long IParentRoleID
        {
            get { return GetColumnValue<long>(Columns.IParentRoleID); }
            set { SetColumnValue(Columns.IParentRoleID, value); }
        }

        [XmlAttribute("FpSBranchID")]
        [Bindable(true)]
        public string FpSBranchID
        {
            get { return GetColumnValue<string>(Columns.FpSBranchID); }
            set { SetColumnValue(Columns.FpSBranchID, value); }
        }

        #endregion

        #region ForeignKey Properties

        /// <summary>
        ///     Returns a TblRole ActiveRecord object related to this TblRolesForUser
        /// </summary>
        public TblRole TblRole
        {
            get { return TblRole.FetchByID(FpSBranchID); }
            set { SetColumnValue("FP_sBranchID", value.IRole); }
        }


        /// <summary>
        ///     Returns a TblManagementUnit ActiveRecord object related to this TblRolesForUser
        /// </summary>
        public TblManagementUnit TblManagementUnit
        {
            get { return TblManagementUnit.FetchByID(FpSBranchID); }
            set { SetColumnValue("FP_sBranchID", value.PkSBranchID); }
        }


        /// <summary>
        ///     Returns a TblUser ActiveRecord object related to this TblRolesForUser
        /// </summary>
        public TblUser TblUser
        {
            get { return TblUser.FetchByID(FpSBranchID); }
            set { SetColumnValue("FP_sBranchID", value.PkSuid); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(string varSUID, long varIRoleID, long varIParentRoleID, string varFpSBranchID)
        {
            var item = new TblRolesForUser();

            item.SUID = varSUID;

            item.IRoleID = varIRoleID;

            item.IParentRoleID = varIParentRoleID;

            item.FpSBranchID = varFpSBranchID;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(string varSUID, long varIRoleID, long varIParentRoleID, string varFpSBranchID)
        {
            var item = new TblRolesForUser();

            item.SUID = varSUID;

            item.IRoleID = varIRoleID;

            item.IParentRoleID = varIParentRoleID;

            item.FpSBranchID = varFpSBranchID;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn SUIDColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn IRoleIDColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn IParentRoleIDColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn FpSBranchIDColumn
        {
            get { return Schema.Columns[3]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string SUID = @"sUID";
            public static string IRoleID = @"iRoleID";
            public static string IParentRoleID = @"iParentRoleID";
            public static string FpSBranchID = @"FP_sBranchID";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no ManyToMany tables defined (0)
    }
}