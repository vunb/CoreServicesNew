using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Strongly-typed collection for the TDataRaw class.
    /// </summary>
    [Serializable]
    public class TDataRawCollection : ActiveList<TDataRaw, TDataRawCollection>
    {
        /// <summary>
        ///     Filters an existing collection based on the set criteria. This is an in-memory filter
        ///     Thanks to developingchris for this!
        /// </summary>
        /// <returns>TDataRawCollection</returns>
        public TDataRawCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                TDataRaw o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    ///     This is an ActiveRecord class which wraps the T_DATA_RAW table.
    /// </summary>
    [Serializable]
    public class TDataRaw : ActiveRecord<TDataRaw>, IActiveRecord
    {
        #region .ctors and Default Settings

        public TDataRaw()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public TDataRaw(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public TDataRaw(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public TDataRaw(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("T_DATA_RAW", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarDataId = new TableSchema.TableColumn(schema);
                colvarDataId.ColumnName = "Data_ID";
                colvarDataId.DataType = DbType.Decimal;
                colvarDataId.MaxLength = 0;
                colvarDataId.AutoIncrement = true;
                colvarDataId.IsNullable = false;
                colvarDataId.IsPrimaryKey = true;
                colvarDataId.IsForeignKey = false;
                colvarDataId.IsReadOnly = false;
                colvarDataId.DefaultSetting = @"";
                colvarDataId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDataId);

                var colvarTestId = new TableSchema.TableColumn(schema);
                colvarTestId.ColumnName = "Test_ID";
                colvarTestId.DataType = DbType.Decimal;
                colvarTestId.MaxLength = 0;
                colvarTestId.AutoIncrement = false;
                colvarTestId.IsNullable = false;
                colvarTestId.IsPrimaryKey = false;
                colvarTestId.IsForeignKey = false;
                colvarTestId.IsReadOnly = false;
                colvarTestId.DefaultSetting = @"";
                colvarTestId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTestId);

                var colvarTestTypeId = new TableSchema.TableColumn(schema);
                colvarTestTypeId.ColumnName = "TestType_ID";
                colvarTestTypeId.DataType = DbType.Int32;
                colvarTestTypeId.MaxLength = 0;
                colvarTestTypeId.AutoIncrement = false;
                colvarTestTypeId.IsNullable = false;
                colvarTestTypeId.IsPrimaryKey = false;
                colvarTestTypeId.IsForeignKey = false;
                colvarTestTypeId.IsReadOnly = false;
                colvarTestTypeId.DefaultSetting = @"";
                colvarTestTypeId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarTestTypeId);

                var colvarDeviceId = new TableSchema.TableColumn(schema);
                colvarDeviceId.ColumnName = "Device_ID";
                colvarDeviceId.DataType = DbType.Decimal;
                colvarDeviceId.MaxLength = 0;
                colvarDeviceId.AutoIncrement = false;
                colvarDeviceId.IsNullable = true;
                colvarDeviceId.IsPrimaryKey = false;
                colvarDeviceId.IsForeignKey = true;
                colvarDeviceId.IsReadOnly = false;
                colvarDeviceId.DefaultSetting = @"";

                colvarDeviceId.ForeignKeyTableName = "D_DEVICE_LIST";
                schema.Columns.Add(colvarDeviceId);

                var colvarDataTest = new TableSchema.TableColumn(schema);
                colvarDataTest.ColumnName = "DataTest";
                colvarDataTest.DataType = DbType.String;
                colvarDataTest.MaxLength = 4000;
                colvarDataTest.AutoIncrement = false;
                colvarDataTest.IsNullable = true;
                colvarDataTest.IsPrimaryKey = false;
                colvarDataTest.IsForeignKey = false;
                colvarDataTest.IsReadOnly = false;
                colvarDataTest.DefaultSetting = @"";
                colvarDataTest.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDataTest);

                var colvarAnalysis = new TableSchema.TableColumn(schema);
                colvarAnalysis.ColumnName = "Analysis";
                colvarAnalysis.DataType = DbType.Boolean;
                colvarAnalysis.MaxLength = 0;
                colvarAnalysis.AutoIncrement = false;
                colvarAnalysis.IsNullable = true;
                colvarAnalysis.IsPrimaryKey = false;
                colvarAnalysis.IsForeignKey = false;
                colvarAnalysis.IsReadOnly = false;
                colvarAnalysis.DefaultSetting = @"";
                colvarAnalysis.ForeignKeyTableName = "";
                schema.Columns.Add(colvarAnalysis);

                var colvarUserReceive = new TableSchema.TableColumn(schema);
                colvarUserReceive.ColumnName = "User_Receive";
                colvarUserReceive.DataType = DbType.Decimal;
                colvarUserReceive.MaxLength = 0;
                colvarUserReceive.AutoIncrement = false;
                colvarUserReceive.IsNullable = true;
                colvarUserReceive.IsPrimaryKey = false;
                colvarUserReceive.IsForeignKey = false;
                colvarUserReceive.IsReadOnly = false;
                colvarUserReceive.DefaultSetting = @"";
                colvarUserReceive.ForeignKeyTableName = "";
                schema.Columns.Add(colvarUserReceive);

                var colvarUpdateDate = new TableSchema.TableColumn(schema);
                colvarUpdateDate.ColumnName = "Update_Date";
                colvarUpdateDate.DataType = DbType.DateTime;
                colvarUpdateDate.MaxLength = 0;
                colvarUpdateDate.AutoIncrement = false;
                colvarUpdateDate.IsNullable = true;
                colvarUpdateDate.IsPrimaryKey = false;
                colvarUpdateDate.IsForeignKey = false;
                colvarUpdateDate.IsReadOnly = false;
                colvarUpdateDate.DefaultSetting = @"";
                colvarUpdateDate.ForeignKeyTableName = "";
                schema.Columns.Add(colvarUpdateDate);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("T_DATA_RAW", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("DataId")]
        [Bindable(true)]
        public decimal DataId
        {
            get { return GetColumnValue<decimal>(Columns.DataId); }
            set { SetColumnValue(Columns.DataId, value); }
        }

        [XmlAttribute("TestId")]
        [Bindable(true)]
        public decimal TestId
        {
            get { return GetColumnValue<decimal>(Columns.TestId); }
            set { SetColumnValue(Columns.TestId, value); }
        }

        [XmlAttribute("TestTypeId")]
        [Bindable(true)]
        public int TestTypeId
        {
            get { return GetColumnValue<int>(Columns.TestTypeId); }
            set { SetColumnValue(Columns.TestTypeId, value); }
        }

        [XmlAttribute("DeviceId")]
        [Bindable(true)]
        public decimal? DeviceId
        {
            get { return GetColumnValue<decimal?>(Columns.DeviceId); }
            set { SetColumnValue(Columns.DeviceId, value); }
        }

        [XmlAttribute("DataTest")]
        [Bindable(true)]
        public string DataTest
        {
            get { return GetColumnValue<string>(Columns.DataTest); }
            set { SetColumnValue(Columns.DataTest, value); }
        }

        [XmlAttribute("Analysis")]
        [Bindable(true)]
        public bool? Analysis
        {
            get { return GetColumnValue<bool?>(Columns.Analysis); }
            set { SetColumnValue(Columns.Analysis, value); }
        }

        [XmlAttribute("UserReceive")]
        [Bindable(true)]
        public decimal? UserReceive
        {
            get { return GetColumnValue<decimal?>(Columns.UserReceive); }
            set { SetColumnValue(Columns.UserReceive, value); }
        }

        [XmlAttribute("UpdateDate")]
        [Bindable(true)]
        public DateTime? UpdateDate
        {
            get { return GetColumnValue<DateTime?>(Columns.UpdateDate); }
            set { SetColumnValue(Columns.UpdateDate, value); }
        }

        #endregion

        #region ForeignKey Properties

        /// <summary>
        ///     Returns a DDeviceList ActiveRecord object related to this TDataRaw
        /// </summary>
        public DDeviceList DDeviceList
        {
            get { return DDeviceList.FetchByID(DeviceId); }
            set { SetColumnValue("Device_ID", value.DeviceId); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(decimal varTestId, int varTestTypeId, decimal? varDeviceId, string varDataTest,
            bool? varAnalysis, decimal? varUserReceive, DateTime? varUpdateDate)
        {
            var item = new TDataRaw();

            item.TestId = varTestId;

            item.TestTypeId = varTestTypeId;

            item.DeviceId = varDeviceId;

            item.DataTest = varDataTest;

            item.Analysis = varAnalysis;

            item.UserReceive = varUserReceive;

            item.UpdateDate = varUpdateDate;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(decimal varDataId, decimal varTestId, int varTestTypeId, decimal? varDeviceId,
            string varDataTest, bool? varAnalysis, decimal? varUserReceive, DateTime? varUpdateDate)
        {
            var item = new TDataRaw();

            item.DataId = varDataId;

            item.TestId = varTestId;

            item.TestTypeId = varTestTypeId;

            item.DeviceId = varDeviceId;

            item.DataTest = varDataTest;

            item.Analysis = varAnalysis;

            item.UserReceive = varUserReceive;

            item.UpdateDate = varUpdateDate;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn DataIdColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn TestIdColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn TestTypeIdColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn DeviceIdColumn
        {
            get { return Schema.Columns[3]; }
        }


        public static TableSchema.TableColumn DataTestColumn
        {
            get { return Schema.Columns[4]; }
        }


        public static TableSchema.TableColumn AnalysisColumn
        {
            get { return Schema.Columns[5]; }
        }


        public static TableSchema.TableColumn UserReceiveColumn
        {
            get { return Schema.Columns[6]; }
        }


        public static TableSchema.TableColumn UpdateDateColumn
        {
            get { return Schema.Columns[7]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string DataId = @"Data_ID";
            public static string TestId = @"Test_ID";
            public static string TestTypeId = @"TestType_ID";
            public static string DeviceId = @"Device_ID";
            public static string DataTest = @"DataTest";
            public static string Analysis = @"Analysis";
            public static string UserReceive = @"User_Receive";
            public static string UpdateDate = @"Update_Date";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no ManyToMany tables defined (0)
    }
}