using System;
using System.ComponentModel;
using System.Data;
using System.Reflection;
using System.Threading;
using System.Web;
using System.Xml.Serialization;
using SubSonic;

// <auto-generated />

namespace Vietbait.Lablink.Model
{
    /// <summary>
    ///     Strongly-typed collection for the TDataType class.
    /// </summary>
    [Serializable]
    public class TDataTypeCollection : ActiveList<TDataType, TDataTypeCollection>
    {
        /// <summary>
        ///     Filters an existing collection based on the set criteria. This is an in-memory filter
        ///     Thanks to developingchris for this!
        /// </summary>
        /// <returns>TDataTypeCollection</returns>
        public TDataTypeCollection Filter()
        {
            for (int i = Count - 1; i > -1; i--)
            {
                TDataType o = this[i];
                foreach (Where w in wheres)
                {
                    bool remove = false;
                    PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
    }

    /// <summary>
    ///     This is an ActiveRecord class which wraps the T_DATA_TYPE table.
    /// </summary>
    [Serializable]
    public class TDataType : ActiveRecord<TDataType>, IActiveRecord
    {
        #region .ctors and Default Settings

        public TDataType()
        {
            SetSQLProps();
            InitSetDefaults();
            MarkNew();
        }

        public TDataType(bool useDatabaseDefaults)
        {
            SetSQLProps();
            if (useDatabaseDefaults)
                ForceDefaults();
            MarkNew();
        }

        public TDataType(object keyID)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByKey(keyID);
        }

        public TDataType(string columnName, object columnValue)
        {
            SetSQLProps();
            InitSetDefaults();
            LoadByParam(columnName, columnValue);
        }

        private void InitSetDefaults()
        {
            SetDefaults();
        }

        protected static void SetSQLProps()
        {
            GetTableSchema();
        }

        #endregion

        #region Schema and Query Accessor	

        public static TableSchema.Table Schema
        {
            get
            {
                if (BaseSchema == null)
                    SetSQLProps();
                return BaseSchema;
            }
        }

        public static Query CreateQuery()
        {
            return new Query(Schema);
        }

        private static void GetTableSchema()
        {
            if (!IsSchemaInitialized)
            {
                //Schema declaration
                var schema = new TableSchema.Table("T_DATA_TYPE", TableType.Table, DataService.GetInstance("ORM"));
                schema.Columns = new TableSchema.TableColumnCollection();
                schema.SchemaName = @"dbo";
                //columns

                var colvarDataTypeId = new TableSchema.TableColumn(schema);
                colvarDataTypeId.ColumnName = "DataType_ID";
                colvarDataTypeId.DataType = DbType.Int32;
                colvarDataTypeId.MaxLength = 0;
                colvarDataTypeId.AutoIncrement = true;
                colvarDataTypeId.IsNullable = false;
                colvarDataTypeId.IsPrimaryKey = true;
                colvarDataTypeId.IsForeignKey = false;
                colvarDataTypeId.IsReadOnly = false;
                colvarDataTypeId.DefaultSetting = @"";
                colvarDataTypeId.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDataTypeId);

                var colvarDataTypeName = new TableSchema.TableColumn(schema);
                colvarDataTypeName.ColumnName = "DataType_Name";
                colvarDataTypeName.DataType = DbType.String;
                colvarDataTypeName.MaxLength = 100;
                colvarDataTypeName.AutoIncrement = false;
                colvarDataTypeName.IsNullable = true;
                colvarDataTypeName.IsPrimaryKey = false;
                colvarDataTypeName.IsForeignKey = false;
                colvarDataTypeName.IsReadOnly = false;
                colvarDataTypeName.DefaultSetting = @"";
                colvarDataTypeName.ForeignKeyTableName = "";
                schema.Columns.Add(colvarDataTypeName);

                var colvarFieldDataName = new TableSchema.TableColumn(schema);
                colvarFieldDataName.ColumnName = "FieldData_Name";
                colvarFieldDataName.DataType = DbType.String;
                colvarFieldDataName.MaxLength = 50;
                colvarFieldDataName.AutoIncrement = false;
                colvarFieldDataName.IsNullable = true;
                colvarFieldDataName.IsPrimaryKey = false;
                colvarFieldDataName.IsForeignKey = false;
                colvarFieldDataName.IsReadOnly = false;
                colvarFieldDataName.DefaultSetting = @"";
                colvarFieldDataName.ForeignKeyTableName = "";
                schema.Columns.Add(colvarFieldDataName);

                var colvarNote = new TableSchema.TableColumn(schema);
                colvarNote.ColumnName = "Note";
                colvarNote.DataType = DbType.String;
                colvarNote.MaxLength = 100;
                colvarNote.AutoIncrement = false;
                colvarNote.IsNullable = true;
                colvarNote.IsPrimaryKey = false;
                colvarNote.IsForeignKey = false;
                colvarNote.IsReadOnly = false;
                colvarNote.DefaultSetting = @"";
                colvarNote.ForeignKeyTableName = "";
                schema.Columns.Add(colvarNote);

                BaseSchema = schema;
                //add this schema to the provider
                //so we can query it later
                DataService.Providers["ORM"].AddSchema("T_DATA_TYPE", schema);
            }
        }

        #endregion

        #region Props

        [XmlAttribute("DataTypeId")]
        [Bindable(true)]
        public int DataTypeId
        {
            get { return GetColumnValue<int>(Columns.DataTypeId); }
            set { SetColumnValue(Columns.DataTypeId, value); }
        }

        [XmlAttribute("DataTypeName")]
        [Bindable(true)]
        public string DataTypeName
        {
            get { return GetColumnValue<string>(Columns.DataTypeName); }
            set { SetColumnValue(Columns.DataTypeName, value); }
        }

        [XmlAttribute("FieldDataName")]
        [Bindable(true)]
        public string FieldDataName
        {
            get { return GetColumnValue<string>(Columns.FieldDataName); }
            set { SetColumnValue(Columns.FieldDataName, value); }
        }

        [XmlAttribute("Note")]
        [Bindable(true)]
        public string Note
        {
            get { return GetColumnValue<string>(Columns.Note); }
            set { SetColumnValue(Columns.Note, value); }
        }

        #endregion

        #region ObjectDataSource support

        /// <summary>
        ///     Inserts a record, can be used with the Object Data Source
        /// </summary>
        public static void Insert(string varDataTypeName, string varFieldDataName, string varNote)
        {
            var item = new TDataType();

            item.DataTypeName = varDataTypeName;

            item.FieldDataName = varFieldDataName;

            item.Note = varNote;


            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        /// <summary>
        ///     Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(int varDataTypeId, string varDataTypeName, string varFieldDataName, string varNote)
        {
            var item = new TDataType();

            item.DataTypeId = varDataTypeId;

            item.DataTypeName = varDataTypeName;

            item.FieldDataName = varFieldDataName;

            item.Note = varNote;

            item.IsNew = false;
            if (HttpContext.Current != null)
                item.Save(HttpContext.Current.User.Identity.Name);
            else
                item.Save(Thread.CurrentPrincipal.Identity.Name);
        }

        #endregion

        #region Typed Columns

        public static TableSchema.TableColumn DataTypeIdColumn
        {
            get { return Schema.Columns[0]; }
        }


        public static TableSchema.TableColumn DataTypeNameColumn
        {
            get { return Schema.Columns[1]; }
        }


        public static TableSchema.TableColumn FieldDataNameColumn
        {
            get { return Schema.Columns[2]; }
        }


        public static TableSchema.TableColumn NoteColumn
        {
            get { return Schema.Columns[3]; }
        }

        #endregion

        #region Columns Struct

        public struct Columns
        {
            public static string DataTypeId = @"DataType_ID";
            public static string DataTypeName = @"DataType_Name";
            public static string FieldDataName = @"FieldData_Name";
            public static string Note = @"Note";
        }

        #endregion

        #region Update PK Collections

        #endregion

        #region Deep Save

        #endregion

        //no foreign key tables defined (0)


        //no ManyToMany tables defined (0)
    }
}