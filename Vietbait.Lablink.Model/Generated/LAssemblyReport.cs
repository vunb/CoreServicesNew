using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Vietbait.Lablink.Model
{
	/// <summary>
	/// Strongly-typed collection for the LAssemblyReport class.
	/// </summary>
    [Serializable]
	public partial class LAssemblyReportCollection : ActiveList<LAssemblyReport, LAssemblyReportCollection>
	{	   
		public LAssemblyReportCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LAssemblyReportCollection</returns>
		public LAssemblyReportCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LAssemblyReport o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the L_Assembly_Report table.
	/// </summary>
	[Serializable]
	public partial class LAssemblyReport : ActiveRecord<LAssemblyReport>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LAssemblyReport()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LAssemblyReport(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LAssemblyReport(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LAssemblyReport(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("L_Assembly_Report", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarAssemblyReportId = new TableSchema.TableColumn(schema);
				colvarAssemblyReportId.ColumnName = "AssemblyReport_ID";
				colvarAssemblyReportId.DataType = DbType.String;
				colvarAssemblyReportId.MaxLength = 100;
				colvarAssemblyReportId.AutoIncrement = false;
				colvarAssemblyReportId.IsNullable = false;
				colvarAssemblyReportId.IsPrimaryKey = true;
				colvarAssemblyReportId.IsForeignKey = false;
				colvarAssemblyReportId.IsReadOnly = false;
				colvarAssemblyReportId.DefaultSetting = @"";
				colvarAssemblyReportId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAssemblyReportId);
				
				TableSchema.TableColumn colvarReportName = new TableSchema.TableColumn(schema);
				colvarReportName.ColumnName = "Report_Name";
				colvarReportName.DataType = DbType.String;
				colvarReportName.MaxLength = 100;
				colvarReportName.AutoIncrement = false;
				colvarReportName.IsNullable = false;
				colvarReportName.IsPrimaryKey = false;
				colvarReportName.IsForeignKey = false;
				colvarReportName.IsReadOnly = false;
				colvarReportName.DefaultSetting = @"";
				colvarReportName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReportName);
				
				TableSchema.TableColumn colvarSDLLname = new TableSchema.TableColumn(schema);
				colvarSDLLname.ColumnName = "sDLLname";
				colvarSDLLname.DataType = DbType.String;
				colvarSDLLname.MaxLength = 100;
				colvarSDLLname.AutoIncrement = false;
				colvarSDLLname.IsNullable = true;
				colvarSDLLname.IsPrimaryKey = false;
				colvarSDLLname.IsForeignKey = false;
				colvarSDLLname.IsReadOnly = false;
				colvarSDLLname.DefaultSetting = @"";
				colvarSDLLname.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSDLLname);
				
				TableSchema.TableColumn colvarSAssemblyName = new TableSchema.TableColumn(schema);
				colvarSAssemblyName.ColumnName = "sAssemblyName";
				colvarSAssemblyName.DataType = DbType.String;
				colvarSAssemblyName.MaxLength = 100;
				colvarSAssemblyName.AutoIncrement = false;
				colvarSAssemblyName.IsNullable = true;
				colvarSAssemblyName.IsPrimaryKey = false;
				colvarSAssemblyName.IsForeignKey = false;
				colvarSAssemblyName.IsReadOnly = false;
				colvarSAssemblyName.DefaultSetting = @"";
				colvarSAssemblyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSAssemblyName);
				
				TableSchema.TableColumn colvarDesc = new TableSchema.TableColumn(schema);
				colvarDesc.ColumnName = "Desc";
				colvarDesc.DataType = DbType.String;
				colvarDesc.MaxLength = 200;
				colvarDesc.AutoIncrement = false;
				colvarDesc.IsNullable = true;
				colvarDesc.IsPrimaryKey = false;
				colvarDesc.IsForeignKey = false;
				colvarDesc.IsReadOnly = false;
				colvarDesc.DefaultSetting = @"";
				colvarDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDesc);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("L_Assembly_Report",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("AssemblyReportId")]
		[Bindable(true)]
		public string AssemblyReportId 
		{
			get { return GetColumnValue<string>(Columns.AssemblyReportId); }
			set { SetColumnValue(Columns.AssemblyReportId, value); }
		}
		  
		[XmlAttribute("ReportName")]
		[Bindable(true)]
		public string ReportName 
		{
			get { return GetColumnValue<string>(Columns.ReportName); }
			set { SetColumnValue(Columns.ReportName, value); }
		}
		  
		[XmlAttribute("SDLLname")]
		[Bindable(true)]
		public string SDLLname 
		{
			get { return GetColumnValue<string>(Columns.SDLLname); }
			set { SetColumnValue(Columns.SDLLname, value); }
		}
		  
		[XmlAttribute("SAssemblyName")]
		[Bindable(true)]
		public string SAssemblyName 
		{
			get { return GetColumnValue<string>(Columns.SAssemblyName); }
			set { SetColumnValue(Columns.SAssemblyName, value); }
		}
		  
		[XmlAttribute("Desc")]
		[Bindable(true)]
		public string Desc 
		{
			get { return GetColumnValue<string>(Columns.Desc); }
			set { SetColumnValue(Columns.Desc, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varAssemblyReportId,string varReportName,string varSDLLname,string varSAssemblyName,string varDesc)
		{
			LAssemblyReport item = new LAssemblyReport();
			
			item.AssemblyReportId = varAssemblyReportId;
			
			item.ReportName = varReportName;
			
			item.SDLLname = varSDLLname;
			
			item.SAssemblyName = varSAssemblyName;
			
			item.Desc = varDesc;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varAssemblyReportId,string varReportName,string varSDLLname,string varSAssemblyName,string varDesc)
		{
			LAssemblyReport item = new LAssemblyReport();
			
				item.AssemblyReportId = varAssemblyReportId;
			
				item.ReportName = varReportName;
			
				item.SDLLname = varSDLLname;
			
				item.SAssemblyName = varSAssemblyName;
			
				item.Desc = varDesc;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn AssemblyReportIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ReportNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn SDLLnameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SAssemblyNameColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn DescColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string AssemblyReportId = @"AssemblyReport_ID";
			 public static string ReportName = @"Report_Name";
			 public static string SDLLname = @"sDLLname";
			 public static string SAssemblyName = @"sAssemblyName";
			 public static string Desc = @"Desc";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
